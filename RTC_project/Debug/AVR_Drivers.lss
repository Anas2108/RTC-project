
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  000046d0  00004764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000d4  008000d4  000047d8  2**0
                  ALLOC
  3 .stab         00004c8c  00000000  00000000  000047d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000286e  00000000  00000000  00009464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bcd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000be12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000bf82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000dbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000eab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f864  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fc51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001041f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <__vector_1>
       8:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__vector_2>
       c:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3d       	cpi	r26, 0xDB	; 219
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <main>
      8a:	0c 94 66 23 	jmp	0x46cc	; 0x46cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ea       	ldi	r26, 0xA6	; 166
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ea       	ldi	r24, 0xA6	; 166
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3f 23 	jmp	0x467e	; 0x467e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WD_voidSleepTime>:
#include "../../../INCLUDE/MCAL/DIO/Dio_prv.h"
#include "../../../SERVICES/bit_utilies.h"


void WD_voidSleepTime(u8 Copy_u8TimeOfSleep)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <WD_voidSleepTime+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01

switch (Copy_u8TimeOfSleep)
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	28 2f       	mov	r18, r24
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	3b 83       	std	Y+3, r19	; 0x03
     b5c:	2a 83       	std	Y+2, r18	; 0x02
     b5e:	8a 81       	ldd	r24, Y+2	; 0x02
     b60:	9b 81       	ldd	r25, Y+3	; 0x03
     b62:	83 30       	cpi	r24, 0x03	; 3
     b64:	91 05       	cpc	r25, r1
     b66:	09 f4       	brne	.+2      	; 0xb6a <WD_voidSleepTime+0x24>
     b68:	70 c0       	rjmp	.+224    	; 0xc4a <WD_voidSleepTime+0x104>
     b6a:	2a 81       	ldd	r18, Y+2	; 0x02
     b6c:	3b 81       	ldd	r19, Y+3	; 0x03
     b6e:	24 30       	cpi	r18, 0x04	; 4
     b70:	31 05       	cpc	r19, r1
     b72:	84 f4       	brge	.+32     	; 0xb94 <WD_voidSleepTime+0x4e>
     b74:	8a 81       	ldd	r24, Y+2	; 0x02
     b76:	9b 81       	ldd	r25, Y+3	; 0x03
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	d1 f1       	breq	.+116    	; 0xbf2 <WD_voidSleepTime+0xac>
     b7e:	2a 81       	ldd	r18, Y+2	; 0x02
     b80:	3b 81       	ldd	r19, Y+3	; 0x03
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	0c f0       	brlt	.+2      	; 0xb8a <WD_voidSleepTime+0x44>
     b88:	4a c0       	rjmp	.+148    	; 0xc1e <WD_voidSleepTime+0xd8>
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	9b 81       	ldd	r25, Y+3	; 0x03
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	d1 f0       	breq	.+52     	; 0xbc6 <WD_voidSleepTime+0x80>
     b92:	c8 c0       	rjmp	.+400    	; 0xd24 <WD_voidSleepTime+0x1de>
     b94:	2a 81       	ldd	r18, Y+2	; 0x02
     b96:	3b 81       	ldd	r19, Y+3	; 0x03
     b98:	25 30       	cpi	r18, 0x05	; 5
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <WD_voidSleepTime+0x5a>
     b9e:	81 c0       	rjmp	.+258    	; 0xca2 <WD_voidSleepTime+0x15c>
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	9b 81       	ldd	r25, Y+3	; 0x03
     ba4:	85 30       	cpi	r24, 0x05	; 5
     ba6:	91 05       	cpc	r25, r1
     ba8:	0c f4       	brge	.+2      	; 0xbac <WD_voidSleepTime+0x66>
     baa:	65 c0       	rjmp	.+202    	; 0xc76 <WD_voidSleepTime+0x130>
     bac:	2a 81       	ldd	r18, Y+2	; 0x02
     bae:	3b 81       	ldd	r19, Y+3	; 0x03
     bb0:	26 30       	cpi	r18, 0x06	; 6
     bb2:	31 05       	cpc	r19, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <WD_voidSleepTime+0x72>
     bb6:	8b c0       	rjmp	.+278    	; 0xcce <WD_voidSleepTime+0x188>
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	9b 81       	ldd	r25, Y+3	; 0x03
     bbc:	87 30       	cpi	r24, 0x07	; 7
     bbe:	91 05       	cpc	r25, r1
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <WD_voidSleepTime+0x7e>
     bc2:	9b c0       	rjmp	.+310    	; 0xcfa <WD_voidSleepTime+0x1b4>
     bc4:	af c0       	rjmp	.+350    	; 0xd24 <WD_voidSleepTime+0x1de>
  {
case WD_SLEEP_16_ms:    CLR_BIT(WDTCR,2); CLR_BIT(WDTCR,1); CLR_BIT(WDTCR,0);     break;
     bc6:	a1 e4       	ldi	r26, 0x41	; 65
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e1 e4       	ldi	r30, 0x41	; 65
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8b 7f       	andi	r24, 0xFB	; 251
     bd2:	8c 93       	st	X, r24
     bd4:	a1 e4       	ldi	r26, 0x41	; 65
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e1 e4       	ldi	r30, 0x41	; 65
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8d 7f       	andi	r24, 0xFD	; 253
     be0:	8c 93       	st	X, r24
     be2:	a1 e4       	ldi	r26, 0x41	; 65
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e1 e4       	ldi	r30, 0x41	; 65
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	8e 7f       	andi	r24, 0xFE	; 254
     bee:	8c 93       	st	X, r24
     bf0:	99 c0       	rjmp	.+306    	; 0xd24 <WD_voidSleepTime+0x1de>
case WD_SLEEP_32_ms:    CLR_BIT(WDTCR,2); CLR_BIT(WDTCR,1); SET_BIT(WDTCR,0);     break;
     bf2:	a1 e4       	ldi	r26, 0x41	; 65
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e1 e4       	ldi	r30, 0x41	; 65
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	8b 7f       	andi	r24, 0xFB	; 251
     bfe:	8c 93       	st	X, r24
     c00:	a1 e4       	ldi	r26, 0x41	; 65
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e1 e4       	ldi	r30, 0x41	; 65
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8d 7f       	andi	r24, 0xFD	; 253
     c0c:	8c 93       	st	X, r24
     c0e:	a1 e4       	ldi	r26, 0x41	; 65
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e1 e4       	ldi	r30, 0x41	; 65
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	81 60       	ori	r24, 0x01	; 1
     c1a:	8c 93       	st	X, r24
     c1c:	83 c0       	rjmp	.+262    	; 0xd24 <WD_voidSleepTime+0x1de>
case WD_SLEEP_65_ms:    CLR_BIT(WDTCR,2); SET_BIT(WDTCR,1); CLR_BIT(WDTCR,0);     break;
     c1e:	a1 e4       	ldi	r26, 0x41	; 65
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e1 e4       	ldi	r30, 0x41	; 65
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	8b 7f       	andi	r24, 0xFB	; 251
     c2a:	8c 93       	st	X, r24
     c2c:	a1 e4       	ldi	r26, 0x41	; 65
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e1 e4       	ldi	r30, 0x41	; 65
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	82 60       	ori	r24, 0x02	; 2
     c38:	8c 93       	st	X, r24
     c3a:	a1 e4       	ldi	r26, 0x41	; 65
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e1 e4       	ldi	r30, 0x41	; 65
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	8e 7f       	andi	r24, 0xFE	; 254
     c46:	8c 93       	st	X, r24
     c48:	6d c0       	rjmp	.+218    	; 0xd24 <WD_voidSleepTime+0x1de>
case WD_SLEEP_130_ms:   CLR_BIT(WDTCR,2); SET_BIT(WDTCR,1); SET_BIT(WDTCR,0);     break;
     c4a:	a1 e4       	ldi	r26, 0x41	; 65
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e1 e4       	ldi	r30, 0x41	; 65
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8b 7f       	andi	r24, 0xFB	; 251
     c56:	8c 93       	st	X, r24
     c58:	a1 e4       	ldi	r26, 0x41	; 65
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	e1 e4       	ldi	r30, 0x41	; 65
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	82 60       	ori	r24, 0x02	; 2
     c64:	8c 93       	st	X, r24
     c66:	a1 e4       	ldi	r26, 0x41	; 65
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	e1 e4       	ldi	r30, 0x41	; 65
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	8c 93       	st	X, r24
     c74:	57 c0       	rjmp	.+174    	; 0xd24 <WD_voidSleepTime+0x1de>
case WD_SLEEP_260_ms:   SET_BIT(WDTCR,2); CLR_BIT(WDTCR,1); CLR_BIT(WDTCR,0);     break;
     c76:	a1 e4       	ldi	r26, 0x41	; 65
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e1 e4       	ldi	r30, 0x41	; 65
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	84 60       	ori	r24, 0x04	; 4
     c82:	8c 93       	st	X, r24
     c84:	a1 e4       	ldi	r26, 0x41	; 65
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e1 e4       	ldi	r30, 0x41	; 65
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8d 7f       	andi	r24, 0xFD	; 253
     c90:	8c 93       	st	X, r24
     c92:	a1 e4       	ldi	r26, 0x41	; 65
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e1 e4       	ldi	r30, 0x41	; 65
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
     c9e:	8c 93       	st	X, r24
     ca0:	41 c0       	rjmp	.+130    	; 0xd24 <WD_voidSleepTime+0x1de>
case WD_SLEEP_520_ms:   SET_BIT(WDTCR,2); CLR_BIT(WDTCR,1); SET_BIT(WDTCR,0);     break;
     ca2:	a1 e4       	ldi	r26, 0x41	; 65
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e1 e4       	ldi	r30, 0x41	; 65
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	84 60       	ori	r24, 0x04	; 4
     cae:	8c 93       	st	X, r24
     cb0:	a1 e4       	ldi	r26, 0x41	; 65
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e1 e4       	ldi	r30, 0x41	; 65
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8d 7f       	andi	r24, 0xFD	; 253
     cbc:	8c 93       	st	X, r24
     cbe:	a1 e4       	ldi	r26, 0x41	; 65
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e1 e4       	ldi	r30, 0x41	; 65
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	8c 93       	st	X, r24
     ccc:	2b c0       	rjmp	.+86     	; 0xd24 <WD_voidSleepTime+0x1de>
case WD_SLEEP_1000_ms:  SET_BIT(WDTCR,2); SET_BIT(WDTCR,1); CLR_BIT(WDTCR,0);     break;
     cce:	a1 e4       	ldi	r26, 0x41	; 65
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e1 e4       	ldi	r30, 0x41	; 65
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	84 60       	ori	r24, 0x04	; 4
     cda:	8c 93       	st	X, r24
     cdc:	a1 e4       	ldi	r26, 0x41	; 65
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e1 e4       	ldi	r30, 0x41	; 65
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	82 60       	ori	r24, 0x02	; 2
     ce8:	8c 93       	st	X, r24
     cea:	a1 e4       	ldi	r26, 0x41	; 65
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e1 e4       	ldi	r30, 0x41	; 65
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8e 7f       	andi	r24, 0xFE	; 254
     cf6:	8c 93       	st	X, r24
     cf8:	15 c0       	rjmp	.+42     	; 0xd24 <WD_voidSleepTime+0x1de>
case WD_SLEEP_2100_ms:  SET_BIT(WDTCR,2); SET_BIT(WDTCR,1); SET_BIT(WDTCR,0);     break;
     cfa:	a1 e4       	ldi	r26, 0x41	; 65
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e1 e4       	ldi	r30, 0x41	; 65
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	a1 e4       	ldi	r26, 0x41	; 65
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e1 e4       	ldi	r30, 0x41	; 65
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	82 60       	ori	r24, 0x02	; 2
     d14:	8c 93       	st	X, r24
     d16:	a1 e4       	ldi	r26, 0x41	; 65
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e1 e4       	ldi	r30, 0x41	; 65
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	81 60       	ori	r24, 0x01	; 1
     d22:	8c 93       	st	X, r24

   }

}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <WD_voidWatchDogEnable>:


void WD_voidWatchDogEnable(void)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,3);
     d38:	a1 e4       	ldi	r26, 0x41	; 65
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e1 e4       	ldi	r30, 0x41	; 65
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	88 60       	ori	r24, 0x08	; 8
     d44:	8c 93       	st	X, r24

}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <WD_voidWatchDogDisable>:

void WD_voidWatchDogDisable(void)
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(WDTCR,3);
     d54:	a1 e4       	ldi	r26, 0x41	; 65
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e1 e4       	ldi	r30, 0x41	; 65
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	87 7f       	andi	r24, 0xF7	; 247
     d60:	8c 93       	st	X, r24
	SET_BIT(WDTCR,4);
     d62:	a1 e4       	ldi	r26, 0x41	; 65
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e1 e4       	ldi	r30, 0x41	; 65
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	80 61       	ori	r24, 0x10	; 16
     d6e:	8c 93       	st	X, r24

}
     d70:	cf 91       	pop	r28
     d72:	df 91       	pop	r29
     d74:	08 95       	ret

00000d76 <UART_voidInit>:
#include "../../../SERVICES/bit_utilies.h"
#include "../../../INCLUDE/MCAL/DIO/Dio_prv.h"

u8 reg_copy=0;

void UART_voidInit(USART_str * Add_ptrPointerUSART){
     d76:	df 93       	push	r29
     d78:	cf 93       	push	r28
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	62 97       	sbiw	r28, 0x12	; 18
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
//to set baud rate
switch(Add_ptrPointerUSART->double_speed)
     d8e:	e9 81       	ldd	r30, Y+1	; 0x01
     d90:	fa 81       	ldd	r31, Y+2	; 0x02
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3a 8b       	std	Y+18, r19	; 0x12
     d9a:	29 8b       	std	Y+17, r18	; 0x11
     d9c:	89 89       	ldd	r24, Y+17	; 0x11
     d9e:	9a 89       	ldd	r25, Y+18	; 0x12
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	39 f0       	breq	.+14     	; 0xdb2 <UART_voidInit+0x3c>
     da4:	29 89       	ldd	r18, Y+17	; 0x11
     da6:	3a 89       	ldd	r19, Y+18	; 0x12
     da8:	21 30       	cpi	r18, 0x01	; 1
     daa:	31 05       	cpc	r19, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <UART_voidInit+0x3a>
     dae:	94 c0       	rjmp	.+296    	; 0xed8 <UART_voidInit+0x162>
     db0:	26 c1       	rjmp	.+588    	; 0xffe <UART_voidInit+0x288>
  {
case USART_DOUBLE_SPEED_DISABLE: CLR_BIT(UCSRA,1);
     db2:	ab e2       	ldi	r26, 0x2B	; 43
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e2       	ldi	r30, 0x2B	; 43
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8d 7f       	andi	r24, 0xFD	; 253
     dbe:	8c 93       	st	X, r24

     switch(Add_ptrPointerUSART->baud_rate)
     dc0:	e9 81       	ldd	r30, Y+1	; 0x01
     dc2:	fa 81       	ldd	r31, Y+2	; 0x02
     dc4:	80 81       	ld	r24, Z
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	38 8b       	std	Y+16, r19	; 0x10
     dcc:	2f 87       	std	Y+15, r18	; 0x0f
     dce:	8f 85       	ldd	r24, Y+15	; 0x0f
     dd0:	98 89       	ldd	r25, Y+16	; 0x10
     dd2:	84 30       	cpi	r24, 0x04	; 4
     dd4:	91 05       	cpc	r25, r1
     dd6:	09 f4       	brne	.+2      	; 0xdda <UART_voidInit+0x64>
     dd8:	57 c0       	rjmp	.+174    	; 0xe88 <UART_voidInit+0x112>
     dda:	2f 85       	ldd	r18, Y+15	; 0x0f
     ddc:	38 89       	ldd	r19, Y+16	; 0x10
     dde:	25 30       	cpi	r18, 0x05	; 5
     de0:	31 05       	cpc	r19, r1
     de2:	d4 f4       	brge	.+52     	; 0xe18 <UART_voidInit+0xa2>
     de4:	8f 85       	ldd	r24, Y+15	; 0x0f
     de6:	98 89       	ldd	r25, Y+16	; 0x10
     de8:	81 30       	cpi	r24, 0x01	; 1
     dea:	91 05       	cpc	r25, r1
     dec:	a9 f1       	breq	.+106    	; 0xe58 <UART_voidInit+0xe2>
     dee:	2f 85       	ldd	r18, Y+15	; 0x0f
     df0:	38 89       	ldd	r19, Y+16	; 0x10
     df2:	22 30       	cpi	r18, 0x02	; 2
     df4:	31 05       	cpc	r19, r1
     df6:	2c f4       	brge	.+10     	; 0xe02 <UART_voidInit+0x8c>
     df8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfa:	98 89       	ldd	r25, Y+16	; 0x10
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	21 f1       	breq	.+72     	; 0xe48 <UART_voidInit+0xd2>
     e00:	fe c0       	rjmp	.+508    	; 0xffe <UART_voidInit+0x288>
     e02:	2f 85       	ldd	r18, Y+15	; 0x0f
     e04:	38 89       	ldd	r19, Y+16	; 0x10
     e06:	22 30       	cpi	r18, 0x02	; 2
     e08:	31 05       	cpc	r19, r1
     e0a:	71 f1       	breq	.+92     	; 0xe68 <UART_voidInit+0xf2>
     e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e0e:	98 89       	ldd	r25, Y+16	; 0x10
     e10:	83 30       	cpi	r24, 0x03	; 3
     e12:	91 05       	cpc	r25, r1
     e14:	89 f1       	breq	.+98     	; 0xe78 <UART_voidInit+0x102>
     e16:	f3 c0       	rjmp	.+486    	; 0xffe <UART_voidInit+0x288>
     e18:	2f 85       	ldd	r18, Y+15	; 0x0f
     e1a:	38 89       	ldd	r19, Y+16	; 0x10
     e1c:	26 30       	cpi	r18, 0x06	; 6
     e1e:	31 05       	cpc	r19, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <UART_voidInit+0xae>
     e22:	42 c0       	rjmp	.+132    	; 0xea8 <UART_voidInit+0x132>
     e24:	8f 85       	ldd	r24, Y+15	; 0x0f
     e26:	98 89       	ldd	r25, Y+16	; 0x10
     e28:	86 30       	cpi	r24, 0x06	; 6
     e2a:	91 05       	cpc	r25, r1
     e2c:	ac f1       	brlt	.+106    	; 0xe98 <UART_voidInit+0x122>
     e2e:	2f 85       	ldd	r18, Y+15	; 0x0f
     e30:	38 89       	ldd	r19, Y+16	; 0x10
     e32:	27 30       	cpi	r18, 0x07	; 7
     e34:	31 05       	cpc	r19, r1
     e36:	09 f4       	brne	.+2      	; 0xe3a <UART_voidInit+0xc4>
     e38:	3f c0       	rjmp	.+126    	; 0xeb8 <UART_voidInit+0x142>
     e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3c:	98 89       	ldd	r25, Y+16	; 0x10
     e3e:	88 30       	cpi	r24, 0x08	; 8
     e40:	91 05       	cpc	r25, r1
     e42:	09 f4       	brne	.+2      	; 0xe46 <UART_voidInit+0xd0>
     e44:	41 c0       	rjmp	.+130    	; 0xec8 <UART_voidInit+0x152>
     e46:	db c0       	rjmp	.+438    	; 0xffe <UART_voidInit+0x288>
     {
     case USART_BAUD_RATE_2400 : UBRRL= 207; UBRRH=0; break;
     e48:	e9 e2       	ldi	r30, 0x29	; 41
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	8f ec       	ldi	r24, 0xCF	; 207
     e4e:	80 83       	st	Z, r24
     e50:	e0 e4       	ldi	r30, 0x40	; 64
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	10 82       	st	Z, r1
     e56:	d3 c0       	rjmp	.+422    	; 0xffe <UART_voidInit+0x288>
     case USART_BAUD_RATE_4800 : UBRRL= 103; UBRRH=0; break;
     e58:	e9 e2       	ldi	r30, 0x29	; 41
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	87 e6       	ldi	r24, 0x67	; 103
     e5e:	80 83       	st	Z, r24
     e60:	e0 e4       	ldi	r30, 0x40	; 64
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	10 82       	st	Z, r1
     e66:	cb c0       	rjmp	.+406    	; 0xffe <UART_voidInit+0x288>
     case USART_BAUD_RATE_9600 : UBRRL= 51; UBRRH=0; break;
     e68:	e9 e2       	ldi	r30, 0x29	; 41
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	83 e3       	ldi	r24, 0x33	; 51
     e6e:	80 83       	st	Z, r24
     e70:	e0 e4       	ldi	r30, 0x40	; 64
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	10 82       	st	Z, r1
     e76:	c3 c0       	rjmp	.+390    	; 0xffe <UART_voidInit+0x288>
     case USART_BAUD_RATE_14400 : UBRRL= 34; UBRRH=0; break;
     e78:	e9 e2       	ldi	r30, 0x29	; 41
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	82 e2       	ldi	r24, 0x22	; 34
     e7e:	80 83       	st	Z, r24
     e80:	e0 e4       	ldi	r30, 0x40	; 64
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	10 82       	st	Z, r1
     e86:	bb c0       	rjmp	.+374    	; 0xffe <UART_voidInit+0x288>
     case USART_BAUD_RATE_19200 : UBRRL= 25; UBRRH=0; break;
     e88:	e9 e2       	ldi	r30, 0x29	; 41
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	89 e1       	ldi	r24, 0x19	; 25
     e8e:	80 83       	st	Z, r24
     e90:	e0 e4       	ldi	r30, 0x40	; 64
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	10 82       	st	Z, r1
     e96:	b3 c0       	rjmp	.+358    	; 0xffe <UART_voidInit+0x288>
     case USART_BAUD_RATE_28800 : UBRRL= 16; UBRRH=0; break;
     e98:	e9 e2       	ldi	r30, 0x29	; 41
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 e1       	ldi	r24, 0x10	; 16
     e9e:	80 83       	st	Z, r24
     ea0:	e0 e4       	ldi	r30, 0x40	; 64
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	10 82       	st	Z, r1
     ea6:	ab c0       	rjmp	.+342    	; 0xffe <UART_voidInit+0x288>
     case USART_BAUD_RATE_38400 : UBRRL= 12; UBRRH=0; break;
     ea8:	e9 e2       	ldi	r30, 0x29	; 41
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	8c e0       	ldi	r24, 0x0C	; 12
     eae:	80 83       	st	Z, r24
     eb0:	e0 e4       	ldi	r30, 0x40	; 64
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	10 82       	st	Z, r1
     eb6:	a3 c0       	rjmp	.+326    	; 0xffe <UART_voidInit+0x288>
     case USART_BAUD_RATE_57600 : UBRRL= 8; UBRRH=0; break;
     eb8:	e9 e2       	ldi	r30, 0x29	; 41
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	88 e0       	ldi	r24, 0x08	; 8
     ebe:	80 83       	st	Z, r24
     ec0:	e0 e4       	ldi	r30, 0x40	; 64
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	10 82       	st	Z, r1
     ec6:	9b c0       	rjmp	.+310    	; 0xffe <UART_voidInit+0x288>
     case USART_BAUD_RATE_76800 : UBRRL= 6; UBRRH=0; break;
     ec8:	e9 e2       	ldi	r30, 0x29	; 41
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	86 e0       	ldi	r24, 0x06	; 6
     ece:	80 83       	st	Z, r24
     ed0:	e0 e4       	ldi	r30, 0x40	; 64
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	10 82       	st	Z, r1
     ed6:	93 c0       	rjmp	.+294    	; 0xffe <UART_voidInit+0x288>

     } break;



     case USART_DOUBLE_SPEED_ENABLE: SET_BIT(UCSRA,1);
     ed8:	ab e2       	ldi	r26, 0x2B	; 43
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	eb e2       	ldi	r30, 0x2B	; 43
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	82 60       	ori	r24, 0x02	; 2
     ee4:	8c 93       	st	X, r24

          switch(Add_ptrPointerUSART->baud_rate)
     ee6:	e9 81       	ldd	r30, Y+1	; 0x01
     ee8:	fa 81       	ldd	r31, Y+2	; 0x02
     eea:	80 81       	ld	r24, Z
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3e 87       	std	Y+14, r19	; 0x0e
     ef2:	2d 87       	std	Y+13, r18	; 0x0d
     ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	91 05       	cpc	r25, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <UART_voidInit+0x18a>
     efe:	58 c0       	rjmp	.+176    	; 0xfb0 <UART_voidInit+0x23a>
     f00:	2d 85       	ldd	r18, Y+13	; 0x0d
     f02:	3e 85       	ldd	r19, Y+14	; 0x0e
     f04:	25 30       	cpi	r18, 0x05	; 5
     f06:	31 05       	cpc	r19, r1
     f08:	d4 f4       	brge	.+52     	; 0xf3e <UART_voidInit+0x1c8>
     f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	b1 f1       	breq	.+108    	; 0xf80 <UART_voidInit+0x20a>
     f14:	2d 85       	ldd	r18, Y+13	; 0x0d
     f16:	3e 85       	ldd	r19, Y+14	; 0x0e
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <UART_voidInit+0x1b2>
     f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f20:	9e 85       	ldd	r25, Y+14	; 0x0e
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	21 f1       	breq	.+72     	; 0xf6e <UART_voidInit+0x1f8>
     f26:	6b c0       	rjmp	.+214    	; 0xffe <UART_voidInit+0x288>
     f28:	2d 85       	ldd	r18, Y+13	; 0x0d
     f2a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	79 f1       	breq	.+94     	; 0xf90 <UART_voidInit+0x21a>
     f32:	8d 85       	ldd	r24, Y+13	; 0x0d
     f34:	9e 85       	ldd	r25, Y+14	; 0x0e
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	91 f1       	breq	.+100    	; 0xfa0 <UART_voidInit+0x22a>
     f3c:	60 c0       	rjmp	.+192    	; 0xffe <UART_voidInit+0x288>
     f3e:	2d 85       	ldd	r18, Y+13	; 0x0d
     f40:	3e 85       	ldd	r19, Y+14	; 0x0e
     f42:	26 30       	cpi	r18, 0x06	; 6
     f44:	31 05       	cpc	r19, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <UART_voidInit+0x1d4>
     f48:	43 c0       	rjmp	.+134    	; 0xfd0 <UART_voidInit+0x25a>
     f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4e:	86 30       	cpi	r24, 0x06	; 6
     f50:	91 05       	cpc	r25, r1
     f52:	b4 f1       	brlt	.+108    	; 0xfc0 <UART_voidInit+0x24a>
     f54:	2d 85       	ldd	r18, Y+13	; 0x0d
     f56:	3e 85       	ldd	r19, Y+14	; 0x0e
     f58:	27 30       	cpi	r18, 0x07	; 7
     f5a:	31 05       	cpc	r19, r1
     f5c:	09 f4       	brne	.+2      	; 0xf60 <UART_voidInit+0x1ea>
     f5e:	40 c0       	rjmp	.+128    	; 0xfe0 <UART_voidInit+0x26a>
     f60:	8d 85       	ldd	r24, Y+13	; 0x0d
     f62:	9e 85       	ldd	r25, Y+14	; 0x0e
     f64:	88 30       	cpi	r24, 0x08	; 8
     f66:	91 05       	cpc	r25, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <UART_voidInit+0x1f6>
     f6a:	42 c0       	rjmp	.+132    	; 0xff0 <UART_voidInit+0x27a>
     f6c:	48 c0       	rjmp	.+144    	; 0xffe <UART_voidInit+0x288>
          {
          case USART_BAUD_RATE_2400 : UBRRL= 160; UBRRH=1; break;
     f6e:	e9 e2       	ldi	r30, 0x29	; 41
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 ea       	ldi	r24, 0xA0	; 160
     f74:	80 83       	st	Z, r24
     f76:	e0 e4       	ldi	r30, 0x40	; 64
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	80 83       	st	Z, r24
     f7e:	3f c0       	rjmp	.+126    	; 0xffe <UART_voidInit+0x288>
          case USART_BAUD_RATE_4800 : UBRRL= 207; UBRRH=0; break;
     f80:	e9 e2       	ldi	r30, 0x29	; 41
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	8f ec       	ldi	r24, 0xCF	; 207
     f86:	80 83       	st	Z, r24
     f88:	e0 e4       	ldi	r30, 0x40	; 64
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	10 82       	st	Z, r1
     f8e:	37 c0       	rjmp	.+110    	; 0xffe <UART_voidInit+0x288>
          case USART_BAUD_RATE_9600 : UBRRL= 103; UBRRH=0; break;
     f90:	e9 e2       	ldi	r30, 0x29	; 41
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	87 e6       	ldi	r24, 0x67	; 103
     f96:	80 83       	st	Z, r24
     f98:	e0 e4       	ldi	r30, 0x40	; 64
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	10 82       	st	Z, r1
     f9e:	2f c0       	rjmp	.+94     	; 0xffe <UART_voidInit+0x288>
          case USART_BAUD_RATE_14400 : UBRRL= 68; UBRRH=0; break;
     fa0:	e9 e2       	ldi	r30, 0x29	; 41
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	84 e4       	ldi	r24, 0x44	; 68
     fa6:	80 83       	st	Z, r24
     fa8:	e0 e4       	ldi	r30, 0x40	; 64
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	10 82       	st	Z, r1
     fae:	27 c0       	rjmp	.+78     	; 0xffe <UART_voidInit+0x288>
          case USART_BAUD_RATE_19200 : UBRRL= 51; UBRRH=0; break;
     fb0:	e9 e2       	ldi	r30, 0x29	; 41
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	83 e3       	ldi	r24, 0x33	; 51
     fb6:	80 83       	st	Z, r24
     fb8:	e0 e4       	ldi	r30, 0x40	; 64
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	10 82       	st	Z, r1
     fbe:	1f c0       	rjmp	.+62     	; 0xffe <UART_voidInit+0x288>
          case USART_BAUD_RATE_28800 : UBRRL= 34; UBRRH=0; break;
     fc0:	e9 e2       	ldi	r30, 0x29	; 41
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	82 e2       	ldi	r24, 0x22	; 34
     fc6:	80 83       	st	Z, r24
     fc8:	e0 e4       	ldi	r30, 0x40	; 64
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	10 82       	st	Z, r1
     fce:	17 c0       	rjmp	.+46     	; 0xffe <UART_voidInit+0x288>
          case USART_BAUD_RATE_38400 : UBRRL= 25; UBRRH=0; break;
     fd0:	e9 e2       	ldi	r30, 0x29	; 41
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	89 e1       	ldi	r24, 0x19	; 25
     fd6:	80 83       	st	Z, r24
     fd8:	e0 e4       	ldi	r30, 0x40	; 64
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	10 82       	st	Z, r1
     fde:	0f c0       	rjmp	.+30     	; 0xffe <UART_voidInit+0x288>
          case USART_BAUD_RATE_57600 : UBRRL= 16; UBRRH=0; break;
     fe0:	e9 e2       	ldi	r30, 0x29	; 41
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 e1       	ldi	r24, 0x10	; 16
     fe6:	80 83       	st	Z, r24
     fe8:	e0 e4       	ldi	r30, 0x40	; 64
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	10 82       	st	Z, r1
     fee:	07 c0       	rjmp	.+14     	; 0xffe <UART_voidInit+0x288>
          case USART_BAUD_RATE_76800 : UBRRL= 12; UBRRH=0; break;
     ff0:	e9 e2       	ldi	r30, 0x29	; 41
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	8c e0       	ldi	r24, 0x0C	; 12
     ff6:	80 83       	st	Z, r24
     ff8:	e0 e4       	ldi	r30, 0x40	; 64
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	10 82       	st	Z, r1
          } break;


  }

SET_BIT(reg_copy,7); // to access UCSRC
     ffe:	80 91 d4 00 	lds	r24, 0x00D4
    1002:	80 68       	ori	r24, 0x80	; 128
    1004:	80 93 d4 00 	sts	0x00D4, r24

switch(Add_ptrPointerUSART->USART_mode)
    1008:	e9 81       	ldd	r30, Y+1	; 0x01
    100a:	fa 81       	ldd	r31, Y+2	; 0x02
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3c 87       	std	Y+12, r19	; 0x0c
    1014:	2b 87       	std	Y+11, r18	; 0x0b
    1016:	8b 85       	ldd	r24, Y+11	; 0x0b
    1018:	9c 85       	ldd	r25, Y+12	; 0x0c
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	59 f0       	breq	.+22     	; 0x1034 <UART_voidInit+0x2be>
    101e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1020:	3c 85       	ldd	r19, Y+12	; 0x0c
    1022:	21 30       	cpi	r18, 0x01	; 1
    1024:	31 05       	cpc	r19, r1
    1026:	59 f4       	brne	.+22     	; 0x103e <UART_voidInit+0x2c8>
  {
   case USART_MODE_SELECT_SYNCHRONOUS: SET_BIT(reg_copy,6); break;
    1028:	80 91 d4 00 	lds	r24, 0x00D4
    102c:	80 64       	ori	r24, 0x40	; 64
    102e:	80 93 d4 00 	sts	0x00D4, r24
    1032:	05 c0       	rjmp	.+10     	; 0x103e <UART_voidInit+0x2c8>
   case USART_MODE_SELECT_ASYNCHRONOUS: CLR_BIT(reg_copy,6); break;
    1034:	80 91 d4 00 	lds	r24, 0x00D4
    1038:	8f 7b       	andi	r24, 0xBF	; 191
    103a:	80 93 d4 00 	sts	0x00D4, r24
  }

switch(Add_ptrPointerUSART->Parity_Mode)
    103e:	e9 81       	ldd	r30, Y+1	; 0x01
    1040:	fa 81       	ldd	r31, Y+2	; 0x02
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3a 87       	std	Y+10, r19	; 0x0a
    104a:	29 87       	std	Y+9, r18	; 0x09
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	91 05       	cpc	r25, r1
    1054:	a1 f0       	breq	.+40     	; 0x107e <UART_voidInit+0x308>
    1056:	29 85       	ldd	r18, Y+9	; 0x09
    1058:	3a 85       	ldd	r19, Y+10	; 0x0a
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	31 05       	cpc	r19, r1
    105e:	d1 f0       	breq	.+52     	; 0x1094 <UART_voidInit+0x31e>
    1060:	89 85       	ldd	r24, Y+9	; 0x09
    1062:	9a 85       	ldd	r25, Y+10	; 0x0a
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	01 f5       	brne	.+64     	; 0x10a8 <UART_voidInit+0x332>
  {
   case USART_PARITY_MODE_DISABLE: CLR_BIT(reg_copy,5);  CLR_BIT(reg_copy,4); break;
    1068:	80 91 d4 00 	lds	r24, 0x00D4
    106c:	8f 7d       	andi	r24, 0xDF	; 223
    106e:	80 93 d4 00 	sts	0x00D4, r24
    1072:	80 91 d4 00 	lds	r24, 0x00D4
    1076:	8f 7e       	andi	r24, 0xEF	; 239
    1078:	80 93 d4 00 	sts	0x00D4, r24
    107c:	15 c0       	rjmp	.+42     	; 0x10a8 <UART_voidInit+0x332>
   case USART_PARITY_MODE_EVEN: SET_BIT(reg_copy,5);  CLR_BIT(reg_copy,4); break;
    107e:	80 91 d4 00 	lds	r24, 0x00D4
    1082:	80 62       	ori	r24, 0x20	; 32
    1084:	80 93 d4 00 	sts	0x00D4, r24
    1088:	80 91 d4 00 	lds	r24, 0x00D4
    108c:	8f 7e       	andi	r24, 0xEF	; 239
    108e:	80 93 d4 00 	sts	0x00D4, r24
    1092:	0a c0       	rjmp	.+20     	; 0x10a8 <UART_voidInit+0x332>
   case USART_PARITY_MODE_ODD: SET_BIT(reg_copy,5);  SET_BIT(reg_copy,4); break;
    1094:	80 91 d4 00 	lds	r24, 0x00D4
    1098:	80 62       	ori	r24, 0x20	; 32
    109a:	80 93 d4 00 	sts	0x00D4, r24
    109e:	80 91 d4 00 	lds	r24, 0x00D4
    10a2:	80 61       	ori	r24, 0x10	; 16
    10a4:	80 93 d4 00 	sts	0x00D4, r24
  }

switch(Add_ptrPointerUSART->num_of_Stop_bits)
    10a8:	e9 81       	ldd	r30, Y+1	; 0x01
    10aa:	fa 81       	ldd	r31, Y+2	; 0x02
    10ac:	85 81       	ldd	r24, Z+5	; 0x05
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	38 87       	std	Y+8, r19	; 0x08
    10b4:	2f 83       	std	Y+7, r18	; 0x07
    10b6:	8f 81       	ldd	r24, Y+7	; 0x07
    10b8:	98 85       	ldd	r25, Y+8	; 0x08
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	31 f0       	breq	.+12     	; 0x10ca <UART_voidInit+0x354>
    10be:	2f 81       	ldd	r18, Y+7	; 0x07
    10c0:	38 85       	ldd	r19, Y+8	; 0x08
    10c2:	21 30       	cpi	r18, 0x01	; 1
    10c4:	31 05       	cpc	r19, r1
    10c6:	39 f0       	breq	.+14     	; 0x10d6 <UART_voidInit+0x360>
    10c8:	0b c0       	rjmp	.+22     	; 0x10e0 <UART_voidInit+0x36a>
  {
   case USART_STOP_1_BIT: CLR_BIT(reg_copy,3); break;
    10ca:	80 91 d4 00 	lds	r24, 0x00D4
    10ce:	87 7f       	andi	r24, 0xF7	; 247
    10d0:	80 93 d4 00 	sts	0x00D4, r24
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <UART_voidInit+0x36a>
   case USART_STOP_2_BIT: SET_BIT(reg_copy,3); break;
    10d6:	80 91 d4 00 	lds	r24, 0x00D4
    10da:	88 60       	ori	r24, 0x08	; 8
    10dc:	80 93 d4 00 	sts	0x00D4, r24

  }

switch(Add_ptrPointerUSART->data_size)
    10e0:	e9 81       	ldd	r30, Y+1	; 0x01
    10e2:	fa 81       	ldd	r31, Y+2	; 0x02
    10e4:	86 81       	ldd	r24, Z+6	; 0x06
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	3e 83       	std	Y+6, r19	; 0x06
    10ec:	2d 83       	std	Y+5, r18	; 0x05
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
    10f0:	9e 81       	ldd	r25, Y+6	; 0x06
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	91 05       	cpc	r25, r1
    10f6:	09 f4       	brne	.+2      	; 0x10fa <UART_voidInit+0x384>
    10f8:	3f c0       	rjmp	.+126    	; 0x1178 <UART_voidInit+0x402>
    10fa:	2d 81       	ldd	r18, Y+5	; 0x05
    10fc:	3e 81       	ldd	r19, Y+6	; 0x06
    10fe:	23 30       	cpi	r18, 0x03	; 3
    1100:	31 05       	cpc	r19, r1
    1102:	54 f4       	brge	.+20     	; 0x1118 <UART_voidInit+0x3a2>
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	91 f0       	breq	.+36     	; 0x1130 <UART_voidInit+0x3ba>
    110c:	2d 81       	ldd	r18, Y+5	; 0x05
    110e:	3e 81       	ldd	r19, Y+6	; 0x06
    1110:	21 30       	cpi	r18, 0x01	; 1
    1112:	31 05       	cpc	r19, r1
    1114:	f9 f0       	breq	.+62     	; 0x1154 <UART_voidInit+0x3de>
    1116:	65 c0       	rjmp	.+202    	; 0x11e2 <UART_voidInit+0x46c>
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	e9 f1       	breq	.+122    	; 0x119c <UART_voidInit+0x426>
    1122:	2d 81       	ldd	r18, Y+5	; 0x05
    1124:	3e 81       	ldd	r19, Y+6	; 0x06
    1126:	24 30       	cpi	r18, 0x04	; 4
    1128:	31 05       	cpc	r19, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <UART_voidInit+0x3b8>
    112c:	49 c0       	rjmp	.+146    	; 0x11c0 <UART_voidInit+0x44a>
    112e:	59 c0       	rjmp	.+178    	; 0x11e2 <UART_voidInit+0x46c>
  {
   case USART_DATA_SIZE_5_BIT: CLR_BIT(UCSRB,2); CLR_BIT(reg_copy,2);  CLR_BIT(reg_copy,1); break;
    1130:	aa e2       	ldi	r26, 0x2A	; 42
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ea e2       	ldi	r30, 0x2A	; 42
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8b 7f       	andi	r24, 0xFB	; 251
    113c:	8c 93       	st	X, r24
    113e:	80 91 d4 00 	lds	r24, 0x00D4
    1142:	8b 7f       	andi	r24, 0xFB	; 251
    1144:	80 93 d4 00 	sts	0x00D4, r24
    1148:	80 91 d4 00 	lds	r24, 0x00D4
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	80 93 d4 00 	sts	0x00D4, r24
    1152:	47 c0       	rjmp	.+142    	; 0x11e2 <UART_voidInit+0x46c>
   case USART_DATA_SIZE_6_BIT: CLR_BIT(UCSRB,2); CLR_BIT(reg_copy,2);  SET_BIT(reg_copy,1); break;
    1154:	aa e2       	ldi	r26, 0x2A	; 42
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	ea e2       	ldi	r30, 0x2A	; 42
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8b 7f       	andi	r24, 0xFB	; 251
    1160:	8c 93       	st	X, r24
    1162:	80 91 d4 00 	lds	r24, 0x00D4
    1166:	8b 7f       	andi	r24, 0xFB	; 251
    1168:	80 93 d4 00 	sts	0x00D4, r24
    116c:	80 91 d4 00 	lds	r24, 0x00D4
    1170:	82 60       	ori	r24, 0x02	; 2
    1172:	80 93 d4 00 	sts	0x00D4, r24
    1176:	35 c0       	rjmp	.+106    	; 0x11e2 <UART_voidInit+0x46c>
   case USART_DATA_SIZE_7_BIT: CLR_BIT(UCSRB,2); SET_BIT(reg_copy,2);  CLR_BIT(reg_copy,1); break;
    1178:	aa e2       	ldi	r26, 0x2A	; 42
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	ea e2       	ldi	r30, 0x2A	; 42
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8b 7f       	andi	r24, 0xFB	; 251
    1184:	8c 93       	st	X, r24
    1186:	80 91 d4 00 	lds	r24, 0x00D4
    118a:	84 60       	ori	r24, 0x04	; 4
    118c:	80 93 d4 00 	sts	0x00D4, r24
    1190:	80 91 d4 00 	lds	r24, 0x00D4
    1194:	8d 7f       	andi	r24, 0xFD	; 253
    1196:	80 93 d4 00 	sts	0x00D4, r24
    119a:	23 c0       	rjmp	.+70     	; 0x11e2 <UART_voidInit+0x46c>
   case USART_DATA_SIZE_8_BIT: CLR_BIT(UCSRB,2); SET_BIT(reg_copy,2);  SET_BIT(reg_copy,1); break;
    119c:	aa e2       	ldi	r26, 0x2A	; 42
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ea e2       	ldi	r30, 0x2A	; 42
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8b 7f       	andi	r24, 0xFB	; 251
    11a8:	8c 93       	st	X, r24
    11aa:	80 91 d4 00 	lds	r24, 0x00D4
    11ae:	84 60       	ori	r24, 0x04	; 4
    11b0:	80 93 d4 00 	sts	0x00D4, r24
    11b4:	80 91 d4 00 	lds	r24, 0x00D4
    11b8:	82 60       	ori	r24, 0x02	; 2
    11ba:	80 93 d4 00 	sts	0x00D4, r24
    11be:	11 c0       	rjmp	.+34     	; 0x11e2 <UART_voidInit+0x46c>
   case USART_DATA_SIZE_9_BIT: SET_BIT(UCSRB,2); SET_BIT(reg_copy,2);  SET_BIT(reg_copy,1); break;
    11c0:	aa e2       	ldi	r26, 0x2A	; 42
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ea e2       	ldi	r30, 0x2A	; 42
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	84 60       	ori	r24, 0x04	; 4
    11cc:	8c 93       	st	X, r24
    11ce:	80 91 d4 00 	lds	r24, 0x00D4
    11d2:	84 60       	ori	r24, 0x04	; 4
    11d4:	80 93 d4 00 	sts	0x00D4, r24
    11d8:	80 91 d4 00 	lds	r24, 0x00D4
    11dc:	82 60       	ori	r24, 0x02	; 2
    11de:	80 93 d4 00 	sts	0x00D4, r24

  }

switch(Add_ptrPointerUSART->Clock_Polarity)
    11e2:	e9 81       	ldd	r30, Y+1	; 0x01
    11e4:	fa 81       	ldd	r31, Y+2	; 0x02
    11e6:	83 81       	ldd	r24, Z+3	; 0x03
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3c 83       	std	Y+4, r19	; 0x04
    11ee:	2b 83       	std	Y+3, r18	; 0x03
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	79 f0       	breq	.+30     	; 0x1218 <UART_voidInit+0x4a2>
    11fa:	2b 81       	ldd	r18, Y+3	; 0x03
    11fc:	3c 81       	ldd	r19, Y+4	; 0x04
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	31 05       	cpc	r19, r1
    1202:	81 f0       	breq	.+32     	; 0x1224 <UART_voidInit+0x4ae>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	00 97       	sbiw	r24, 0x00	; 0
    120a:	89 f4       	brne	.+34     	; 0x122e <UART_voidInit+0x4b8>
  {
  case USART_CLK_POLARITY_1: CLR_BIT(reg_copy,0); break;
    120c:	80 91 d4 00 	lds	r24, 0x00D4
    1210:	8e 7f       	andi	r24, 0xFE	; 254
    1212:	80 93 d4 00 	sts	0x00D4, r24
    1216:	0b c0       	rjmp	.+22     	; 0x122e <UART_voidInit+0x4b8>
  case USART_CLK_POLARITY_2: SET_BIT(reg_copy,0); break;
    1218:	80 91 d4 00 	lds	r24, 0x00D4
    121c:	81 60       	ori	r24, 0x01	; 1
    121e:	80 93 d4 00 	sts	0x00D4, r24
    1222:	05 c0       	rjmp	.+10     	; 0x122e <UART_voidInit+0x4b8>
  case USART_CLK_POLARITY_DISABLE: CLR_BIT(reg_copy,0); break;
    1224:	80 91 d4 00 	lds	r24, 0x00D4
    1228:	8e 7f       	andi	r24, 0xFE	; 254
    122a:	80 93 d4 00 	sts	0x00D4, r24
  }

// put the value of reg_copy in UCSRA
UCSRA=reg_copy;
    122e:	eb e2       	ldi	r30, 0x2B	; 43
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 91 d4 00 	lds	r24, 0x00D4
    1236:	80 83       	st	Z, r24

// enable RX
SET_BIT(UCSRB,4);
    1238:	aa e2       	ldi	r26, 0x2A	; 42
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ea e2       	ldi	r30, 0x2A	; 42
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	80 61       	ori	r24, 0x10	; 16
    1244:	8c 93       	st	X, r24
//enable TX
SET_BIT(UCSRB,3);
    1246:	aa e2       	ldi	r26, 0x2A	; 42
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	ea e2       	ldi	r30, 0x2A	; 42
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	88 60       	ori	r24, 0x08	; 8
    1252:	8c 93       	st	X, r24

}
    1254:	62 96       	adiw	r28, 0x12	; 18
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <UART_voidSendChar>:

void UART_voidSendChar(u8 data)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    1270:	89 83       	std	Y+1, r24	; 0x01

// Wait until transmission reg emp

	while(GET_BIT(UCSRA,5)==0){}
    1272:	eb e2       	ldi	r30, 0x2B	; 43
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	82 95       	swap	r24
    127a:	86 95       	lsr	r24
    127c:	87 70       	andi	r24, 0x07	; 7
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	81 70       	andi	r24, 0x01	; 1
    1284:	90 70       	andi	r25, 0x00	; 0
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	a1 f3       	breq	.-24     	; 0x1272 <UART_voidSendChar+0xc>
    UDR_T=data;
    128a:	ec e2       	ldi	r30, 0x2C	; 44
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	80 83       	st	Z, r24

}
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <UART_u8GetChar>:



u8 UART_u8GetChar(void)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
  u8 Result;

	while(GET_BIT(UCSRA,7)==0){}
    12a4:	eb e2       	ldi	r30, 0x2B	; 43
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	88 23       	and	r24, r24
    12ac:	dc f7       	brge	.-10     	; 0x12a4 <UART_u8GetChar+0xa>



  Result=UDR_R;
    12ae:	ec e2       	ldi	r30, 0x2C	; 44
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	89 83       	std	Y+1, r24	; 0x01

 return Result;
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12b8:	0f 90       	pop	r0
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <TIMER_voidInit>:
#include "../../../INCLUDE/MCAL/TIMER/TIMER_prv.h"
#include "../../../INCLUDE/MCAL/DIO/Dio_prv.h"
#include "../../../SERVICES/bit_utilies.h"

void TIMER_voidInit(str_timer *Add_ptrTimer )
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	6c 97       	sbiw	r28, 0x1c	; 28
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	9a 83       	std	Y+2, r25	; 0x02
    12d6:	89 83       	std	Y+1, r24	; 0x01

	switch(Add_ptrTimer->channel){
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	80 81       	ld	r24, Z
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	3c 8f       	std	Y+28, r19	; 0x1c
    12e4:	2b 8f       	std	Y+27, r18	; 0x1b
    12e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	39 f0       	breq	.+14     	; 0x12fc <TIMER_voidInit+0x3c>
    12ee:	2b 8d       	ldd	r18, Y+27	; 0x1b
    12f0:	3c 8d       	ldd	r19, Y+28	; 0x1c
    12f2:	21 30       	cpi	r18, 0x01	; 1
    12f4:	31 05       	cpc	r19, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <TIMER_voidInit+0x3a>
    12f8:	e3 c1       	rjmp	.+966    	; 0x16c0 <TIMER_voidInit+0x400>
    12fa:	c2 c3       	rjmp	.+1924   	; 0x1a80 <TIMER_voidInit+0x7c0>
	case TIMER_CHANNEL_A:

	switch (Add_ptrTimer->WGM)
    12fc:	e9 81       	ldd	r30, Y+1	; 0x01
    12fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1300:	81 81       	ldd	r24, Z+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3a 8f       	std	Y+26, r19	; 0x1a
    1308:	29 8f       	std	Y+25, r18	; 0x19
    130a:	89 8d       	ldd	r24, Y+25	; 0x19
    130c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	09 f4       	brne	.+2      	; 0x1316 <TIMER_voidInit+0x56>
    1314:	97 c0       	rjmp	.+302    	; 0x1444 <TIMER_voidInit+0x184>
    1316:	29 8d       	ldd	r18, Y+25	; 0x19
    1318:	3a 8d       	ldd	r19, Y+26	; 0x1a
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	2c f4       	brge	.+10     	; 0x132a <TIMER_voidInit+0x6a>
    1320:	89 8d       	ldd	r24, Y+25	; 0x19
    1322:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	71 f0       	breq	.+28     	; 0x1344 <TIMER_voidInit+0x84>
    1328:	ab c3       	rjmp	.+1878   	; 0x1a80 <TIMER_voidInit+0x7c0>
    132a:	29 8d       	ldd	r18, Y+25	; 0x19
    132c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	09 f4       	brne	.+2      	; 0x1336 <TIMER_voidInit+0x76>
    1334:	66 c1       	rjmp	.+716    	; 0x1602 <TIMER_voidInit+0x342>
    1336:	89 8d       	ldd	r24, Y+25	; 0x19
    1338:	9a 8d       	ldd	r25, Y+26	; 0x1a
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	91 05       	cpc	r25, r1
    133e:	09 f4       	brne	.+2      	; 0x1342 <TIMER_voidInit+0x82>
    1340:	01 c1       	rjmp	.+514    	; 0x1544 <TIMER_voidInit+0x284>
    1342:	9e c3       	rjmp	.+1852   	; 0x1a80 <TIMER_voidInit+0x7c0>
	{
	case TIMER_NORMAL_MODE: CLR_BIT(TCCR1B,4); CLR_BIT(TCCR1B,3); CLR_BIT(TCCR1A,1); CLR_BIT(TCCR1A,0);
    1344:	ae e4       	ldi	r26, 0x4E	; 78
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	ee e4       	ldi	r30, 0x4E	; 78
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8f 7e       	andi	r24, 0xEF	; 239
    1350:	8c 93       	st	X, r24
    1352:	ae e4       	ldi	r26, 0x4E	; 78
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ee e4       	ldi	r30, 0x4E	; 78
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	87 7f       	andi	r24, 0xF7	; 247
    135e:	8c 93       	st	X, r24
    1360:	af e4       	ldi	r26, 0x4F	; 79
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	ef e4       	ldi	r30, 0x4F	; 79
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8d 7f       	andi	r24, 0xFD	; 253
    136c:	8c 93       	st	X, r24
    136e:	af e4       	ldi	r26, 0x4F	; 79
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ef e4       	ldi	r30, 0x4F	; 79
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8e 7f       	andi	r24, 0xFE	; 254
    137a:	8c 93       	st	X, r24

	  switch(Add_ptrTimer->COM)
    137c:	e9 81       	ldd	r30, Y+1	; 0x01
    137e:	fa 81       	ldd	r31, Y+2	; 0x02
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	38 8f       	std	Y+24, r19	; 0x18
    1388:	2f 8b       	std	Y+23, r18	; 0x17
    138a:	8f 89       	ldd	r24, Y+23	; 0x17
    138c:	98 8d       	ldd	r25, Y+24	; 0x18
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	59 f1       	breq	.+86     	; 0x13ea <TIMER_voidInit+0x12a>
    1394:	2f 89       	ldd	r18, Y+23	; 0x17
    1396:	38 8d       	ldd	r19, Y+24	; 0x18
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	2c f4       	brge	.+10     	; 0x13a8 <TIMER_voidInit+0xe8>
    139e:	8f 89       	ldd	r24, Y+23	; 0x17
    13a0:	98 8d       	ldd	r25, Y+24	; 0x18
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	61 f0       	breq	.+24     	; 0x13be <TIMER_voidInit+0xfe>
    13a6:	6c c3       	rjmp	.+1752   	; 0x1a80 <TIMER_voidInit+0x7c0>
    13a8:	2f 89       	ldd	r18, Y+23	; 0x17
    13aa:	38 8d       	ldd	r19, Y+24	; 0x18
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	59 f1       	breq	.+86     	; 0x1408 <TIMER_voidInit+0x148>
    13b2:	8f 89       	ldd	r24, Y+23	; 0x17
    13b4:	98 8d       	ldd	r25, Y+24	; 0x18
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	91 05       	cpc	r25, r1
    13ba:	a9 f1       	breq	.+106    	; 0x1426 <TIMER_voidInit+0x166>
    13bc:	61 c3       	rjmp	.+1730   	; 0x1a80 <TIMER_voidInit+0x7c0>
	  {
	  case TIMER_COM_NORMAL_OPERATION: CLR_BIT(TCCR1A,7);  CLR_BIT(TCCR1A,6);  SET_BIT(TIMSK,2); break;
    13be:	af e4       	ldi	r26, 0x4F	; 79
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ef e4       	ldi	r30, 0x4F	; 79
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 77       	andi	r24, 0x7F	; 127
    13ca:	8c 93       	st	X, r24
    13cc:	af e4       	ldi	r26, 0x4F	; 79
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	ef e4       	ldi	r30, 0x4F	; 79
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8f 7b       	andi	r24, 0xBF	; 191
    13d8:	8c 93       	st	X, r24
    13da:	a9 e5       	ldi	r26, 0x59	; 89
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e9 e5       	ldi	r30, 0x59	; 89
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	84 60       	ori	r24, 0x04	; 4
    13e6:	8c 93       	st	X, r24
    13e8:	4b c3       	rjmp	.+1686   	; 0x1a80 <TIMER_voidInit+0x7c0>
	  case TIMER_COM_TOGGLE:  CLR_BIT(TCCR1A,7);  SET_BIT(TCCR1A,6);   break;
    13ea:	af e4       	ldi	r26, 0x4F	; 79
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	ef e4       	ldi	r30, 0x4F	; 79
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	8f 77       	andi	r24, 0x7F	; 127
    13f6:	8c 93       	st	X, r24
    13f8:	af e4       	ldi	r26, 0x4F	; 79
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ef e4       	ldi	r30, 0x4F	; 79
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	80 64       	ori	r24, 0x40	; 64
    1404:	8c 93       	st	X, r24
    1406:	3c c3       	rjmp	.+1656   	; 0x1a80 <TIMER_voidInit+0x7c0>
	  case TIMER_COM_CLEAR:  SET_BIT(TCCR1A,7);  CLR_BIT(TCCR1A,6);   break;
    1408:	af e4       	ldi	r26, 0x4F	; 79
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	ef e4       	ldi	r30, 0x4F	; 79
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 68       	ori	r24, 0x80	; 128
    1414:	8c 93       	st	X, r24
    1416:	af e4       	ldi	r26, 0x4F	; 79
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	ef e4       	ldi	r30, 0x4F	; 79
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 7b       	andi	r24, 0xBF	; 191
    1422:	8c 93       	st	X, r24
    1424:	2d c3       	rjmp	.+1626   	; 0x1a80 <TIMER_voidInit+0x7c0>
	  case TIMER_COM_SET:  SET_BIT(TCCR1A,7);  SET_BIT(TCCR1A,6);   break;
    1426:	af e4       	ldi	r26, 0x4F	; 79
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	ef e4       	ldi	r30, 0x4F	; 79
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	80 68       	ori	r24, 0x80	; 128
    1432:	8c 93       	st	X, r24
    1434:	af e4       	ldi	r26, 0x4F	; 79
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ef e4       	ldi	r30, 0x4F	; 79
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	80 64       	ori	r24, 0x40	; 64
    1440:	8c 93       	st	X, r24
    1442:	1e c3       	rjmp	.+1596   	; 0x1a80 <TIMER_voidInit+0x7c0>

	  }

	break;
	case TIMER_CTC_MODE: CLR_BIT(TCCR1B,4); SET_BIT(TCCR1B,3); CLR_BIT(TCCR1A,1); CLR_BIT(TCCR1A,0);
    1444:	ae e4       	ldi	r26, 0x4E	; 78
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ee e4       	ldi	r30, 0x4E	; 78
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8f 7e       	andi	r24, 0xEF	; 239
    1450:	8c 93       	st	X, r24
    1452:	ae e4       	ldi	r26, 0x4E	; 78
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ee e4       	ldi	r30, 0x4E	; 78
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	88 60       	ori	r24, 0x08	; 8
    145e:	8c 93       	st	X, r24
    1460:	af e4       	ldi	r26, 0x4F	; 79
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	ef e4       	ldi	r30, 0x4F	; 79
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	8d 7f       	andi	r24, 0xFD	; 253
    146c:	8c 93       	st	X, r24
    146e:	af e4       	ldi	r26, 0x4F	; 79
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ef e4       	ldi	r30, 0x4F	; 79
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	8e 7f       	andi	r24, 0xFE	; 254
    147a:	8c 93       	st	X, r24

	switch(Add_ptrTimer->COM)
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	3e 8b       	std	Y+22, r19	; 0x16
    1488:	2d 8b       	std	Y+21, r18	; 0x15
    148a:	8d 89       	ldd	r24, Y+21	; 0x15
    148c:	9e 89       	ldd	r25, Y+22	; 0x16
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	91 05       	cpc	r25, r1
    1492:	59 f1       	breq	.+86     	; 0x14ea <TIMER_voidInit+0x22a>
    1494:	2d 89       	ldd	r18, Y+21	; 0x15
    1496:	3e 89       	ldd	r19, Y+22	; 0x16
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <TIMER_voidInit+0x1e8>
    149e:	8d 89       	ldd	r24, Y+21	; 0x15
    14a0:	9e 89       	ldd	r25, Y+22	; 0x16
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	61 f0       	breq	.+24     	; 0x14be <TIMER_voidInit+0x1fe>
    14a6:	ec c2       	rjmp	.+1496   	; 0x1a80 <TIMER_voidInit+0x7c0>
    14a8:	2d 89       	ldd	r18, Y+21	; 0x15
    14aa:	3e 89       	ldd	r19, Y+22	; 0x16
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	59 f1       	breq	.+86     	; 0x1508 <TIMER_voidInit+0x248>
    14b2:	8d 89       	ldd	r24, Y+21	; 0x15
    14b4:	9e 89       	ldd	r25, Y+22	; 0x16
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	91 05       	cpc	r25, r1
    14ba:	a9 f1       	breq	.+106    	; 0x1526 <TIMER_voidInit+0x266>
    14bc:	e1 c2       	rjmp	.+1474   	; 0x1a80 <TIMER_voidInit+0x7c0>
		  {
		  case TIMER_COM_NORMAL_OPERATION: CLR_BIT(TCCR1A,7);  CLR_BIT(TCCR1A,6);  SET_BIT(TIMSK,4); break;
    14be:	af e4       	ldi	r26, 0x4F	; 79
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	ef e4       	ldi	r30, 0x4F	; 79
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8f 77       	andi	r24, 0x7F	; 127
    14ca:	8c 93       	st	X, r24
    14cc:	af e4       	ldi	r26, 0x4F	; 79
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	ef e4       	ldi	r30, 0x4F	; 79
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	8f 7b       	andi	r24, 0xBF	; 191
    14d8:	8c 93       	st	X, r24
    14da:	a9 e5       	ldi	r26, 0x59	; 89
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e9 e5       	ldi	r30, 0x59	; 89
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 61       	ori	r24, 0x10	; 16
    14e6:	8c 93       	st	X, r24
    14e8:	cb c2       	rjmp	.+1430   	; 0x1a80 <TIMER_voidInit+0x7c0>
		  case TIMER_COM_TOGGLE:  CLR_BIT(TCCR1A,7);  SET_BIT(TCCR1A,6);   break;
    14ea:	af e4       	ldi	r26, 0x4F	; 79
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ef e4       	ldi	r30, 0x4F	; 79
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	8f 77       	andi	r24, 0x7F	; 127
    14f6:	8c 93       	st	X, r24
    14f8:	af e4       	ldi	r26, 0x4F	; 79
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	ef e4       	ldi	r30, 0x4F	; 79
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	80 64       	ori	r24, 0x40	; 64
    1504:	8c 93       	st	X, r24
    1506:	bc c2       	rjmp	.+1400   	; 0x1a80 <TIMER_voidInit+0x7c0>
		  case TIMER_COM_CLEAR:  SET_BIT(TCCR1A,7);  CLR_BIT(TCCR1A,6);   break;
    1508:	af e4       	ldi	r26, 0x4F	; 79
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	ef e4       	ldi	r30, 0x4F	; 79
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	80 68       	ori	r24, 0x80	; 128
    1514:	8c 93       	st	X, r24
    1516:	af e4       	ldi	r26, 0x4F	; 79
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ef e4       	ldi	r30, 0x4F	; 79
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8f 7b       	andi	r24, 0xBF	; 191
    1522:	8c 93       	st	X, r24
    1524:	ad c2       	rjmp	.+1370   	; 0x1a80 <TIMER_voidInit+0x7c0>
		  case TIMER_COM_SET:  SET_BIT(TCCR1A,7);  SET_BIT(TCCR1A,6);   break;
    1526:	af e4       	ldi	r26, 0x4F	; 79
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ef e4       	ldi	r30, 0x4F	; 79
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 68       	ori	r24, 0x80	; 128
    1532:	8c 93       	st	X, r24
    1534:	af e4       	ldi	r26, 0x4F	; 79
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ef e4       	ldi	r30, 0x4F	; 79
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 64       	ori	r24, 0x40	; 64
    1540:	8c 93       	st	X, r24
    1542:	9e c2       	rjmp	.+1340   	; 0x1a80 <TIMER_voidInit+0x7c0>

		  }

	break;
	case TIMER_FAST_PWM_ICR_MODE: SET_BIT(TCCR1B,4); SET_BIT(TCCR1B,3); SET_BIT(TCCR1A,1); CLR_BIT(TCCR1A,0);
    1544:	ae e4       	ldi	r26, 0x4E	; 78
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ee e4       	ldi	r30, 0x4E	; 78
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 61       	ori	r24, 0x10	; 16
    1550:	8c 93       	st	X, r24
    1552:	ae e4       	ldi	r26, 0x4E	; 78
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ee e4       	ldi	r30, 0x4E	; 78
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	88 60       	ori	r24, 0x08	; 8
    155e:	8c 93       	st	X, r24
    1560:	af e4       	ldi	r26, 0x4F	; 79
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ef e4       	ldi	r30, 0x4F	; 79
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	82 60       	ori	r24, 0x02	; 2
    156c:	8c 93       	st	X, r24
    156e:	af e4       	ldi	r26, 0x4F	; 79
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ef e4       	ldi	r30, 0x4F	; 79
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	8e 7f       	andi	r24, 0xFE	; 254
    157a:	8c 93       	st	X, r24

	switch(Add_ptrTimer->COM)
    157c:	e9 81       	ldd	r30, Y+1	; 0x01
    157e:	fa 81       	ldd	r31, Y+2	; 0x02
    1580:	82 81       	ldd	r24, Z+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3c 8b       	std	Y+20, r19	; 0x14
    1588:	2b 8b       	std	Y+19, r18	; 0x13
    158a:	8b 89       	ldd	r24, Y+19	; 0x13
    158c:	9c 89       	ldd	r25, Y+20	; 0x14
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	91 05       	cpc	r25, r1
    1592:	c9 f0       	breq	.+50     	; 0x15c6 <TIMER_voidInit+0x306>
    1594:	2b 89       	ldd	r18, Y+19	; 0x13
    1596:	3c 89       	ldd	r19, Y+20	; 0x14
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	19 f1       	breq	.+70     	; 0x15e4 <TIMER_voidInit+0x324>
    159e:	8b 89       	ldd	r24, Y+19	; 0x13
    15a0:	9c 89       	ldd	r25, Y+20	; 0x14
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <TIMER_voidInit+0x2e8>
    15a6:	6c c2       	rjmp	.+1240   	; 0x1a80 <TIMER_voidInit+0x7c0>
			  {
			  case TIMER_COM_NORMAL_OPERATION: CLR_BIT(TCCR1A,7);  CLR_BIT(TCCR1A,6); break; //pwm  by software
    15a8:	af e4       	ldi	r26, 0x4F	; 79
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ef e4       	ldi	r30, 0x4F	; 79
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 77       	andi	r24, 0x7F	; 127
    15b4:	8c 93       	st	X, r24
    15b6:	af e4       	ldi	r26, 0x4F	; 79
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	ef e4       	ldi	r30, 0x4F	; 79
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8f 7b       	andi	r24, 0xBF	; 191
    15c2:	8c 93       	st	X, r24
    15c4:	5d c2       	rjmp	.+1210   	; 0x1a80 <TIMER_voidInit+0x7c0>
			  case TIMER_NON_INVERTING:  SET_BIT(TCCR1A,7);  CLR_BIT(TCCR1A,6);   break;
    15c6:	af e4       	ldi	r26, 0x4F	; 79
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ef e4       	ldi	r30, 0x4F	; 79
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	80 68       	ori	r24, 0x80	; 128
    15d2:	8c 93       	st	X, r24
    15d4:	af e4       	ldi	r26, 0x4F	; 79
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	ef e4       	ldi	r30, 0x4F	; 79
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	8f 7b       	andi	r24, 0xBF	; 191
    15e0:	8c 93       	st	X, r24
    15e2:	4e c2       	rjmp	.+1180   	; 0x1a80 <TIMER_voidInit+0x7c0>
			  case TIMER_INVERTING:  SET_BIT(TCCR1A,7);  SET_BIT(TCCR1A,6);   break;
    15e4:	af e4       	ldi	r26, 0x4F	; 79
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	ef e4       	ldi	r30, 0x4F	; 79
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 68       	ori	r24, 0x80	; 128
    15f0:	8c 93       	st	X, r24
    15f2:	af e4       	ldi	r26, 0x4F	; 79
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ef e4       	ldi	r30, 0x4F	; 79
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	80 64       	ori	r24, 0x40	; 64
    15fe:	8c 93       	st	X, r24
    1600:	3f c2       	rjmp	.+1150   	; 0x1a80 <TIMER_voidInit+0x7c0>

			  }

	break;
	case TIMER_PWM_PHASE_CORRECT_ICR_MODE: SET_BIT(TCCR1B,4); CLR_BIT(TCCR1B,3); SET_BIT(TCCR1A,1); CLR_BIT(TCCR1A,0);
    1602:	ae e4       	ldi	r26, 0x4E	; 78
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	ee e4       	ldi	r30, 0x4E	; 78
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 61       	ori	r24, 0x10	; 16
    160e:	8c 93       	st	X, r24
    1610:	ae e4       	ldi	r26, 0x4E	; 78
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	ee e4       	ldi	r30, 0x4E	; 78
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	87 7f       	andi	r24, 0xF7	; 247
    161c:	8c 93       	st	X, r24
    161e:	af e4       	ldi	r26, 0x4F	; 79
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	ef e4       	ldi	r30, 0x4F	; 79
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	82 60       	ori	r24, 0x02	; 2
    162a:	8c 93       	st	X, r24
    162c:	af e4       	ldi	r26, 0x4F	; 79
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ef e4       	ldi	r30, 0x4F	; 79
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8e 7f       	andi	r24, 0xFE	; 254
    1638:	8c 93       	st	X, r24

	switch(Add_ptrTimer->COM)
    163a:	e9 81       	ldd	r30, Y+1	; 0x01
    163c:	fa 81       	ldd	r31, Y+2	; 0x02
    163e:	82 81       	ldd	r24, Z+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3a 8b       	std	Y+18, r19	; 0x12
    1646:	29 8b       	std	Y+17, r18	; 0x11
    1648:	89 89       	ldd	r24, Y+17	; 0x11
    164a:	9a 89       	ldd	r25, Y+18	; 0x12
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	c9 f0       	breq	.+50     	; 0x1684 <TIMER_voidInit+0x3c4>
    1652:	29 89       	ldd	r18, Y+17	; 0x11
    1654:	3a 89       	ldd	r19, Y+18	; 0x12
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	19 f1       	breq	.+70     	; 0x16a2 <TIMER_voidInit+0x3e2>
    165c:	89 89       	ldd	r24, Y+17	; 0x11
    165e:	9a 89       	ldd	r25, Y+18	; 0x12
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	09 f0       	breq	.+2      	; 0x1666 <TIMER_voidInit+0x3a6>
    1664:	0d c2       	rjmp	.+1050   	; 0x1a80 <TIMER_voidInit+0x7c0>
				  {
	               case TIMER_COM_NORMAL_OPERATION: CLR_BIT(TCCR1A,7);  CLR_BIT(TCCR1A,6); break; //pwm  by software
    1666:	af e4       	ldi	r26, 0x4F	; 79
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	ef e4       	ldi	r30, 0x4F	; 79
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	8f 77       	andi	r24, 0x7F	; 127
    1672:	8c 93       	st	X, r24
    1674:	af e4       	ldi	r26, 0x4F	; 79
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	ef e4       	ldi	r30, 0x4F	; 79
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	8f 7b       	andi	r24, 0xBF	; 191
    1680:	8c 93       	st	X, r24
    1682:	fe c1       	rjmp	.+1020   	; 0x1a80 <TIMER_voidInit+0x7c0>
				  case TIMER_NON_INVERTING:  SET_BIT(TCCR1A,7);  CLR_BIT(TCCR1A,6);   break;
    1684:	af e4       	ldi	r26, 0x4F	; 79
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	ef e4       	ldi	r30, 0x4F	; 79
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 68       	ori	r24, 0x80	; 128
    1690:	8c 93       	st	X, r24
    1692:	af e4       	ldi	r26, 0x4F	; 79
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8f 7b       	andi	r24, 0xBF	; 191
    169e:	8c 93       	st	X, r24
    16a0:	ef c1       	rjmp	.+990    	; 0x1a80 <TIMER_voidInit+0x7c0>
				  case TIMER_INVERTING:  SET_BIT(TCCR1A,7);  SET_BIT(TCCR1A,6);   break;
    16a2:	af e4       	ldi	r26, 0x4F	; 79
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ef e4       	ldi	r30, 0x4F	; 79
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 68       	ori	r24, 0x80	; 128
    16ae:	8c 93       	st	X, r24
    16b0:	af e4       	ldi	r26, 0x4F	; 79
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ef e4       	ldi	r30, 0x4F	; 79
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	80 64       	ori	r24, 0x40	; 64
    16bc:	8c 93       	st	X, r24
    16be:	e0 c1       	rjmp	.+960    	; 0x1a80 <TIMER_voidInit+0x7c0>

	break;

	case TIMER_CHANNEL_B:

		switch (Add_ptrTimer->WGM)
    16c0:	e9 81       	ldd	r30, Y+1	; 0x01
    16c2:	fa 81       	ldd	r31, Y+2	; 0x02
    16c4:	81 81       	ldd	r24, Z+1	; 0x01
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	38 8b       	std	Y+16, r19	; 0x10
    16cc:	2f 87       	std	Y+15, r18	; 0x0f
    16ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d0:	98 89       	ldd	r25, Y+16	; 0x10
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <TIMER_voidInit+0x41a>
    16d8:	97 c0       	rjmp	.+302    	; 0x1808 <TIMER_voidInit+0x548>
    16da:	2f 85       	ldd	r18, Y+15	; 0x0f
    16dc:	38 89       	ldd	r19, Y+16	; 0x10
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	2c f4       	brge	.+10     	; 0x16ee <TIMER_voidInit+0x42e>
    16e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e6:	98 89       	ldd	r25, Y+16	; 0x10
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	71 f0       	breq	.+28     	; 0x1708 <TIMER_voidInit+0x448>
    16ec:	c9 c1       	rjmp	.+914    	; 0x1a80 <TIMER_voidInit+0x7c0>
    16ee:	2f 85       	ldd	r18, Y+15	; 0x0f
    16f0:	38 89       	ldd	r19, Y+16	; 0x10
    16f2:	22 30       	cpi	r18, 0x02	; 2
    16f4:	31 05       	cpc	r19, r1
    16f6:	09 f4       	brne	.+2      	; 0x16fa <TIMER_voidInit+0x43a>
    16f8:	66 c1       	rjmp	.+716    	; 0x19c6 <TIMER_voidInit+0x706>
    16fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fc:	98 89       	ldd	r25, Y+16	; 0x10
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	91 05       	cpc	r25, r1
    1702:	09 f4       	brne	.+2      	; 0x1706 <TIMER_voidInit+0x446>
    1704:	01 c1       	rjmp	.+514    	; 0x1908 <TIMER_voidInit+0x648>
    1706:	bc c1       	rjmp	.+888    	; 0x1a80 <TIMER_voidInit+0x7c0>
		{
		case TIMER_NORMAL_MODE: CLR_BIT(TCCR1B,4); CLR_BIT(TCCR1B,3); CLR_BIT(TCCR1A,1); CLR_BIT(TCCR1A,0);
    1708:	ae e4       	ldi	r26, 0x4E	; 78
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	ee e4       	ldi	r30, 0x4E	; 78
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	8f 7e       	andi	r24, 0xEF	; 239
    1714:	8c 93       	st	X, r24
    1716:	ae e4       	ldi	r26, 0x4E	; 78
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ee e4       	ldi	r30, 0x4E	; 78
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	87 7f       	andi	r24, 0xF7	; 247
    1722:	8c 93       	st	X, r24
    1724:	af e4       	ldi	r26, 0x4F	; 79
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	ef e4       	ldi	r30, 0x4F	; 79
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	8d 7f       	andi	r24, 0xFD	; 253
    1730:	8c 93       	st	X, r24
    1732:	af e4       	ldi	r26, 0x4F	; 79
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ef e4       	ldi	r30, 0x4F	; 79
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8e 7f       	andi	r24, 0xFE	; 254
    173e:	8c 93       	st	X, r24

		  switch(Add_ptrTimer->COM)
    1740:	e9 81       	ldd	r30, Y+1	; 0x01
    1742:	fa 81       	ldd	r31, Y+2	; 0x02
    1744:	82 81       	ldd	r24, Z+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	3e 87       	std	Y+14, r19	; 0x0e
    174c:	2d 87       	std	Y+13, r18	; 0x0d
    174e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1750:	9e 85       	ldd	r25, Y+14	; 0x0e
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	91 05       	cpc	r25, r1
    1756:	59 f1       	breq	.+86     	; 0x17ae <TIMER_voidInit+0x4ee>
    1758:	2d 85       	ldd	r18, Y+13	; 0x0d
    175a:	3e 85       	ldd	r19, Y+14	; 0x0e
    175c:	22 30       	cpi	r18, 0x02	; 2
    175e:	31 05       	cpc	r19, r1
    1760:	2c f4       	brge	.+10     	; 0x176c <TIMER_voidInit+0x4ac>
    1762:	8d 85       	ldd	r24, Y+13	; 0x0d
    1764:	9e 85       	ldd	r25, Y+14	; 0x0e
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	61 f0       	breq	.+24     	; 0x1782 <TIMER_voidInit+0x4c2>
    176a:	8a c1       	rjmp	.+788    	; 0x1a80 <TIMER_voidInit+0x7c0>
    176c:	2d 85       	ldd	r18, Y+13	; 0x0d
    176e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1770:	22 30       	cpi	r18, 0x02	; 2
    1772:	31 05       	cpc	r19, r1
    1774:	59 f1       	breq	.+86     	; 0x17cc <TIMER_voidInit+0x50c>
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	83 30       	cpi	r24, 0x03	; 3
    177c:	91 05       	cpc	r25, r1
    177e:	a9 f1       	breq	.+106    	; 0x17ea <TIMER_voidInit+0x52a>
    1780:	7f c1       	rjmp	.+766    	; 0x1a80 <TIMER_voidInit+0x7c0>
		  {
		  case TIMER_COM_NORMAL_OPERATION: CLR_BIT(TCCR1A,5);  CLR_BIT(TCCR1A,4); SET_BIT(TIMSK,2); break;
    1782:	af e4       	ldi	r26, 0x4F	; 79
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	ef e4       	ldi	r30, 0x4F	; 79
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8f 7d       	andi	r24, 0xDF	; 223
    178e:	8c 93       	st	X, r24
    1790:	af e4       	ldi	r26, 0x4F	; 79
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ef e4       	ldi	r30, 0x4F	; 79
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8f 7e       	andi	r24, 0xEF	; 239
    179c:	8c 93       	st	X, r24
    179e:	a9 e5       	ldi	r26, 0x59	; 89
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e9 e5       	ldi	r30, 0x59	; 89
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	84 60       	ori	r24, 0x04	; 4
    17aa:	8c 93       	st	X, r24
    17ac:	69 c1       	rjmp	.+722    	; 0x1a80 <TIMER_voidInit+0x7c0>
		  case TIMER_COM_TOGGLE:  CLR_BIT(TCCR1A,5);  SET_BIT(TCCR1A,4);   break;
    17ae:	af e4       	ldi	r26, 0x4F	; 79
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	8f 7d       	andi	r24, 0xDF	; 223
    17ba:	8c 93       	st	X, r24
    17bc:	af e4       	ldi	r26, 0x4F	; 79
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ef e4       	ldi	r30, 0x4F	; 79
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	80 61       	ori	r24, 0x10	; 16
    17c8:	8c 93       	st	X, r24
    17ca:	5a c1       	rjmp	.+692    	; 0x1a80 <TIMER_voidInit+0x7c0>
		  case TIMER_COM_CLEAR:  SET_BIT(TCCR1A,5);  CLR_BIT(TCCR1A,4);   break;
    17cc:	af e4       	ldi	r26, 0x4F	; 79
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ef e4       	ldi	r30, 0x4F	; 79
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	80 62       	ori	r24, 0x20	; 32
    17d8:	8c 93       	st	X, r24
    17da:	af e4       	ldi	r26, 0x4F	; 79
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ef e4       	ldi	r30, 0x4F	; 79
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 7e       	andi	r24, 0xEF	; 239
    17e6:	8c 93       	st	X, r24
    17e8:	4b c1       	rjmp	.+662    	; 0x1a80 <TIMER_voidInit+0x7c0>
		  case TIMER_COM_SET:  SET_BIT(TCCR1A,5);  SET_BIT(TCCR1A,4);   break;
    17ea:	af e4       	ldi	r26, 0x4F	; 79
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ef e4       	ldi	r30, 0x4F	; 79
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 62       	ori	r24, 0x20	; 32
    17f6:	8c 93       	st	X, r24
    17f8:	af e4       	ldi	r26, 0x4F	; 79
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ef e4       	ldi	r30, 0x4F	; 79
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 61       	ori	r24, 0x10	; 16
    1804:	8c 93       	st	X, r24
    1806:	3c c1       	rjmp	.+632    	; 0x1a80 <TIMER_voidInit+0x7c0>

		  }

		break;
		case TIMER_CTC_MODE: CLR_BIT(TCCR1B,4); SET_BIT(TCCR1B,3); CLR_BIT(TCCR1A,1); CLR_BIT(TCCR1A,0);
    1808:	ae e4       	ldi	r26, 0x4E	; 78
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ee e4       	ldi	r30, 0x4E	; 78
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8f 7e       	andi	r24, 0xEF	; 239
    1814:	8c 93       	st	X, r24
    1816:	ae e4       	ldi	r26, 0x4E	; 78
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ee e4       	ldi	r30, 0x4E	; 78
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	88 60       	ori	r24, 0x08	; 8
    1822:	8c 93       	st	X, r24
    1824:	af e4       	ldi	r26, 0x4F	; 79
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ef e4       	ldi	r30, 0x4F	; 79
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8d 7f       	andi	r24, 0xFD	; 253
    1830:	8c 93       	st	X, r24
    1832:	af e4       	ldi	r26, 0x4F	; 79
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ef e4       	ldi	r30, 0x4F	; 79
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	8e 7f       	andi	r24, 0xFE	; 254
    183e:	8c 93       	st	X, r24

		switch(Add_ptrTimer->COM)
    1840:	e9 81       	ldd	r30, Y+1	; 0x01
    1842:	fa 81       	ldd	r31, Y+2	; 0x02
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	3c 87       	std	Y+12, r19	; 0x0c
    184c:	2b 87       	std	Y+11, r18	; 0x0b
    184e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1850:	9c 85       	ldd	r25, Y+12	; 0x0c
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	91 05       	cpc	r25, r1
    1856:	59 f1       	breq	.+86     	; 0x18ae <TIMER_voidInit+0x5ee>
    1858:	2b 85       	ldd	r18, Y+11	; 0x0b
    185a:	3c 85       	ldd	r19, Y+12	; 0x0c
    185c:	22 30       	cpi	r18, 0x02	; 2
    185e:	31 05       	cpc	r19, r1
    1860:	2c f4       	brge	.+10     	; 0x186c <TIMER_voidInit+0x5ac>
    1862:	8b 85       	ldd	r24, Y+11	; 0x0b
    1864:	9c 85       	ldd	r25, Y+12	; 0x0c
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	61 f0       	breq	.+24     	; 0x1882 <TIMER_voidInit+0x5c2>
    186a:	0a c1       	rjmp	.+532    	; 0x1a80 <TIMER_voidInit+0x7c0>
    186c:	2b 85       	ldd	r18, Y+11	; 0x0b
    186e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1870:	22 30       	cpi	r18, 0x02	; 2
    1872:	31 05       	cpc	r19, r1
    1874:	59 f1       	breq	.+86     	; 0x18cc <TIMER_voidInit+0x60c>
    1876:	8b 85       	ldd	r24, Y+11	; 0x0b
    1878:	9c 85       	ldd	r25, Y+12	; 0x0c
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	a9 f1       	breq	.+106    	; 0x18ea <TIMER_voidInit+0x62a>
    1880:	ff c0       	rjmp	.+510    	; 0x1a80 <TIMER_voidInit+0x7c0>
			  {
			  case TIMER_COM_NORMAL_OPERATION: CLR_BIT(TCCR1A,5);  CLR_BIT(TCCR1A,4);   SET_BIT(TIMSK,3); break;
    1882:	af e4       	ldi	r26, 0x4F	; 79
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ef e4       	ldi	r30, 0x4F	; 79
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 7d       	andi	r24, 0xDF	; 223
    188e:	8c 93       	st	X, r24
    1890:	af e4       	ldi	r26, 0x4F	; 79
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ef e4       	ldi	r30, 0x4F	; 79
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8f 7e       	andi	r24, 0xEF	; 239
    189c:	8c 93       	st	X, r24
    189e:	a9 e5       	ldi	r26, 0x59	; 89
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e9 e5       	ldi	r30, 0x59	; 89
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	88 60       	ori	r24, 0x08	; 8
    18aa:	8c 93       	st	X, r24
    18ac:	e9 c0       	rjmp	.+466    	; 0x1a80 <TIMER_voidInit+0x7c0>
			  case TIMER_COM_TOGGLE:  CLR_BIT(TCCR1A,5);  SET_BIT(TCCR1A,4);   break;
    18ae:	af e4       	ldi	r26, 0x4F	; 79
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	ef e4       	ldi	r30, 0x4F	; 79
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	8f 7d       	andi	r24, 0xDF	; 223
    18ba:	8c 93       	st	X, r24
    18bc:	af e4       	ldi	r26, 0x4F	; 79
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ef e4       	ldi	r30, 0x4F	; 79
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 61       	ori	r24, 0x10	; 16
    18c8:	8c 93       	st	X, r24
    18ca:	da c0       	rjmp	.+436    	; 0x1a80 <TIMER_voidInit+0x7c0>
			  case TIMER_COM_CLEAR:  SET_BIT(TCCR1A,5);  CLR_BIT(TCCR1A,4);   break;
    18cc:	af e4       	ldi	r26, 0x4F	; 79
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ef e4       	ldi	r30, 0x4F	; 79
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	80 62       	ori	r24, 0x20	; 32
    18d8:	8c 93       	st	X, r24
    18da:	af e4       	ldi	r26, 0x4F	; 79
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	ef e4       	ldi	r30, 0x4F	; 79
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 7e       	andi	r24, 0xEF	; 239
    18e6:	8c 93       	st	X, r24
    18e8:	cb c0       	rjmp	.+406    	; 0x1a80 <TIMER_voidInit+0x7c0>
			  case TIMER_COM_SET:  SET_BIT(TCCR1A,5);  SET_BIT(TCCR1A,4);   break;
    18ea:	af e4       	ldi	r26, 0x4F	; 79
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	ef e4       	ldi	r30, 0x4F	; 79
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	80 62       	ori	r24, 0x20	; 32
    18f6:	8c 93       	st	X, r24
    18f8:	af e4       	ldi	r26, 0x4F	; 79
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	ef e4       	ldi	r30, 0x4F	; 79
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 61       	ori	r24, 0x10	; 16
    1904:	8c 93       	st	X, r24
    1906:	bc c0       	rjmp	.+376    	; 0x1a80 <TIMER_voidInit+0x7c0>

			  }

		break;
		case TIMER_FAST_PWM_ICR_MODE: SET_BIT(TCCR1B,4); SET_BIT(TCCR1B,3); SET_BIT(TCCR1A,1); CLR_BIT(TCCR1A,0);
    1908:	ae e4       	ldi	r26, 0x4E	; 78
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ee e4       	ldi	r30, 0x4E	; 78
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	80 61       	ori	r24, 0x10	; 16
    1914:	8c 93       	st	X, r24
    1916:	ae e4       	ldi	r26, 0x4E	; 78
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	ee e4       	ldi	r30, 0x4E	; 78
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	88 60       	ori	r24, 0x08	; 8
    1922:	8c 93       	st	X, r24
    1924:	af e4       	ldi	r26, 0x4F	; 79
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	ef e4       	ldi	r30, 0x4F	; 79
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	82 60       	ori	r24, 0x02	; 2
    1930:	8c 93       	st	X, r24
    1932:	af e4       	ldi	r26, 0x4F	; 79
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ef e4       	ldi	r30, 0x4F	; 79
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	8e 7f       	andi	r24, 0xFE	; 254
    193e:	8c 93       	st	X, r24

		switch(Add_ptrTimer->COM)
    1940:	e9 81       	ldd	r30, Y+1	; 0x01
    1942:	fa 81       	ldd	r31, Y+2	; 0x02
    1944:	82 81       	ldd	r24, Z+2	; 0x02
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3a 87       	std	Y+10, r19	; 0x0a
    194c:	29 87       	std	Y+9, r18	; 0x09
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	c9 f0       	breq	.+50     	; 0x198a <TIMER_voidInit+0x6ca>
    1958:	29 85       	ldd	r18, Y+9	; 0x09
    195a:	3a 85       	ldd	r19, Y+10	; 0x0a
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	19 f1       	breq	.+70     	; 0x19a8 <TIMER_voidInit+0x6e8>
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	09 f0       	breq	.+2      	; 0x196c <TIMER_voidInit+0x6ac>
    196a:	8a c0       	rjmp	.+276    	; 0x1a80 <TIMER_voidInit+0x7c0>
				  {
				  case TIMER_COM_NORMAL_OPERATION: CLR_BIT(TCCR1A,5);  CLR_BIT(TCCR1A,4); break; //pwm  by software
    196c:	af e4       	ldi	r26, 0x4F	; 79
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	ef e4       	ldi	r30, 0x4F	; 79
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8f 7d       	andi	r24, 0xDF	; 223
    1978:	8c 93       	st	X, r24
    197a:	af e4       	ldi	r26, 0x4F	; 79
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	ef e4       	ldi	r30, 0x4F	; 79
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8f 7e       	andi	r24, 0xEF	; 239
    1986:	8c 93       	st	X, r24
    1988:	7b c0       	rjmp	.+246    	; 0x1a80 <TIMER_voidInit+0x7c0>
				  case TIMER_NON_INVERTING:  SET_BIT(TCCR1A,5);  CLR_BIT(TCCR1A,4);   break;
    198a:	af e4       	ldi	r26, 0x4F	; 79
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ef e4       	ldi	r30, 0x4F	; 79
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 62       	ori	r24, 0x20	; 32
    1996:	8c 93       	st	X, r24
    1998:	af e4       	ldi	r26, 0x4F	; 79
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ef e4       	ldi	r30, 0x4F	; 79
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8f 7e       	andi	r24, 0xEF	; 239
    19a4:	8c 93       	st	X, r24
    19a6:	6c c0       	rjmp	.+216    	; 0x1a80 <TIMER_voidInit+0x7c0>
				  case TIMER_INVERTING:  SET_BIT(TCCR1A,5);  SET_BIT(TCCR1A,4);   break;
    19a8:	af e4       	ldi	r26, 0x4F	; 79
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ef e4       	ldi	r30, 0x4F	; 79
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	80 62       	ori	r24, 0x20	; 32
    19b4:	8c 93       	st	X, r24
    19b6:	af e4       	ldi	r26, 0x4F	; 79
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	ef e4       	ldi	r30, 0x4F	; 79
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	80 61       	ori	r24, 0x10	; 16
    19c2:	8c 93       	st	X, r24
    19c4:	5d c0       	rjmp	.+186    	; 0x1a80 <TIMER_voidInit+0x7c0>

				  }

		break;
		case TIMER_PWM_PHASE_CORRECT_ICR_MODE: SET_BIT(TCCR1B,4); CLR_BIT(TCCR1B,3); SET_BIT(TCCR1A,1); CLR_BIT(TCCR1A,0);
    19c6:	ae e4       	ldi	r26, 0x4E	; 78
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	ee e4       	ldi	r30, 0x4E	; 78
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	80 61       	ori	r24, 0x10	; 16
    19d2:	8c 93       	st	X, r24
    19d4:	ae e4       	ldi	r26, 0x4E	; 78
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ee e4       	ldi	r30, 0x4E	; 78
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	87 7f       	andi	r24, 0xF7	; 247
    19e0:	8c 93       	st	X, r24
    19e2:	af e4       	ldi	r26, 0x4F	; 79
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	ef e4       	ldi	r30, 0x4F	; 79
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	82 60       	ori	r24, 0x02	; 2
    19ee:	8c 93       	st	X, r24
    19f0:	af e4       	ldi	r26, 0x4F	; 79
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ef e4       	ldi	r30, 0x4F	; 79
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8e 7f       	andi	r24, 0xFE	; 254
    19fc:	8c 93       	st	X, r24

		switch(Add_ptrTimer->COM)
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	38 87       	std	Y+8, r19	; 0x08
    1a0a:	2f 83       	std	Y+7, r18	; 0x07
    1a0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0e:	98 85       	ldd	r25, Y+8	; 0x08
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	c1 f0       	breq	.+48     	; 0x1a46 <TIMER_voidInit+0x786>
    1a16:	2f 81       	ldd	r18, Y+7	; 0x07
    1a18:	38 85       	ldd	r19, Y+8	; 0x08
    1a1a:	22 30       	cpi	r18, 0x02	; 2
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	11 f1       	breq	.+68     	; 0x1a64 <TIMER_voidInit+0x7a4>
    1a20:	8f 81       	ldd	r24, Y+7	; 0x07
    1a22:	98 85       	ldd	r25, Y+8	; 0x08
    1a24:	00 97       	sbiw	r24, 0x00	; 0
    1a26:	61 f5       	brne	.+88     	; 0x1a80 <TIMER_voidInit+0x7c0>
					  {
		               case TIMER_COM_NORMAL_OPERATION: CLR_BIT(TCCR1A,5);  CLR_BIT(TCCR1A,4); break; //pwm  by software
    1a28:	af e4       	ldi	r26, 0x4F	; 79
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ef e4       	ldi	r30, 0x4F	; 79
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8f 7d       	andi	r24, 0xDF	; 223
    1a34:	8c 93       	st	X, r24
    1a36:	af e4       	ldi	r26, 0x4F	; 79
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	ef e4       	ldi	r30, 0x4F	; 79
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	8f 7e       	andi	r24, 0xEF	; 239
    1a42:	8c 93       	st	X, r24
    1a44:	1d c0       	rjmp	.+58     	; 0x1a80 <TIMER_voidInit+0x7c0>
					  case TIMER_NON_INVERTING:  SET_BIT(TCCR1A,5);  CLR_BIT(TCCR1A,4);   break;
    1a46:	af e4       	ldi	r26, 0x4F	; 79
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	ef e4       	ldi	r30, 0x4F	; 79
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 62       	ori	r24, 0x20	; 32
    1a52:	8c 93       	st	X, r24
    1a54:	af e4       	ldi	r26, 0x4F	; 79
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	ef e4       	ldi	r30, 0x4F	; 79
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8f 7e       	andi	r24, 0xEF	; 239
    1a60:	8c 93       	st	X, r24
    1a62:	0e c0       	rjmp	.+28     	; 0x1a80 <TIMER_voidInit+0x7c0>
					  case TIMER_INVERTING:  SET_BIT(TCCR1A,5);  SET_BIT(TCCR1A,4);   break;
    1a64:	af e4       	ldi	r26, 0x4F	; 79
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	ef e4       	ldi	r30, 0x4F	; 79
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	80 62       	ori	r24, 0x20	; 32
    1a70:	8c 93       	st	X, r24
    1a72:	af e4       	ldi	r26, 0x4F	; 79
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	ef e4       	ldi	r30, 0x4F	; 79
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 61       	ori	r24, 0x10	; 16
    1a7e:	8c 93       	st	X, r24

}



   switch (Add_ptrTimer->overflowINT)
    1a80:	e9 81       	ldd	r30, Y+1	; 0x01
    1a82:	fa 81       	ldd	r31, Y+2	; 0x02
    1a84:	84 81       	ldd	r24, Z+4	; 0x04
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	3e 83       	std	Y+6, r19	; 0x06
    1a8c:	2d 83       	std	Y+5, r18	; 0x05
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	31 f0       	breq	.+12     	; 0x1aa2 <TIMER_voidInit+0x7e2>
    1a96:	2d 81       	ldd	r18, Y+5	; 0x05
    1a98:	3e 81       	ldd	r19, Y+6	; 0x06
    1a9a:	21 30       	cpi	r18, 0x01	; 1
    1a9c:	31 05       	cpc	r19, r1
    1a9e:	49 f0       	breq	.+18     	; 0x1ab2 <TIMER_voidInit+0x7f2>
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <TIMER_voidInit+0x800>
   {

   case TIMER_OVERFLOW_ENABEL: SET_BIT(TIMSK,2); break;
    1aa2:	a9 e5       	ldi	r26, 0x59	; 89
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e9 e5       	ldi	r30, 0x59	; 89
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	84 60       	ori	r24, 0x04	; 4
    1aae:	8c 93       	st	X, r24
    1ab0:	07 c0       	rjmp	.+14     	; 0x1ac0 <TIMER_voidInit+0x800>
   case TIMER_OVERFLOW_DISABEL:CLR_BIT(TIMSK,2); break;
    1ab2:	a9 e5       	ldi	r26, 0x59	; 89
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e9 e5       	ldi	r30, 0x59	; 89
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8b 7f       	andi	r24, 0xFB	; 251
    1abe:	8c 93       	st	X, r24

   }



	switch (Add_ptrTimer->prescale)
    1ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac4:	83 81       	ldd	r24, Z+3	; 0x03
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	3c 83       	std	Y+4, r19	; 0x04
    1acc:	2b 83       	std	Y+3, r18	; 0x03
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <TIMER_voidInit+0x81a>
    1ad8:	4e c0       	rjmp	.+156    	; 0x1b76 <TIMER_voidInit+0x8b6>
    1ada:	2b 81       	ldd	r18, Y+3	; 0x03
    1adc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ade:	23 30       	cpi	r18, 0x03	; 3
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	54 f4       	brge	.+20     	; 0x1af8 <TIMER_voidInit+0x838>
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	c9 f0       	breq	.+50     	; 0x1b1e <TIMER_voidInit+0x85e>
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	21 30       	cpi	r18, 0x01	; 1
    1af2:	31 05       	cpc	r19, r1
    1af4:	51 f1       	breq	.+84     	; 0x1b4a <TIMER_voidInit+0x88a>
    1af6:	96 c0       	rjmp	.+300    	; 0x1c24 <TIMER_voidInit+0x964>
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	84 30       	cpi	r24, 0x04	; 4
    1afe:	91 05       	cpc	r25, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <TIMER_voidInit+0x844>
    1b02:	65 c0       	rjmp	.+202    	; 0x1bce <TIMER_voidInit+0x90e>
    1b04:	2b 81       	ldd	r18, Y+3	; 0x03
    1b06:	3c 81       	ldd	r19, Y+4	; 0x04
    1b08:	24 30       	cpi	r18, 0x04	; 4
    1b0a:	31 05       	cpc	r19, r1
    1b0c:	0c f4       	brge	.+2      	; 0x1b10 <TIMER_voidInit+0x850>
    1b0e:	49 c0       	rjmp	.+146    	; 0x1ba2 <TIMER_voidInit+0x8e2>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	85 30       	cpi	r24, 0x05	; 5
    1b16:	91 05       	cpc	r25, r1
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <TIMER_voidInit+0x85c>
    1b1a:	6f c0       	rjmp	.+222    	; 0x1bfa <TIMER_voidInit+0x93a>
    1b1c:	83 c0       	rjmp	.+262    	; 0x1c24 <TIMER_voidInit+0x964>
	{
	case TIMER_NO_CLK : CLR_BIT(TCCR1B,2); CLR_BIT(TCCR1B,1); CLR_BIT(TCCR1B,0); break;
    1b1e:	ae e4       	ldi	r26, 0x4E	; 78
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	ee e4       	ldi	r30, 0x4E	; 78
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8b 7f       	andi	r24, 0xFB	; 251
    1b2a:	8c 93       	st	X, r24
    1b2c:	ae e4       	ldi	r26, 0x4E	; 78
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ee e4       	ldi	r30, 0x4E	; 78
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8d 7f       	andi	r24, 0xFD	; 253
    1b38:	8c 93       	st	X, r24
    1b3a:	ae e4       	ldi	r26, 0x4E	; 78
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	ee e4       	ldi	r30, 0x4E	; 78
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	8e 7f       	andi	r24, 0xFE	; 254
    1b46:	8c 93       	st	X, r24
    1b48:	6d c0       	rjmp	.+218    	; 0x1c24 <TIMER_voidInit+0x964>
	case TIMER_CLK_DEVIDED_BY_1 : CLR_BIT(TCCR1B,2); CLR_BIT(TCCR1B,1); SET_BIT(TCCR1B,0); break;
    1b4a:	ae e4       	ldi	r26, 0x4E	; 78
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	ee e4       	ldi	r30, 0x4E	; 78
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8b 7f       	andi	r24, 0xFB	; 251
    1b56:	8c 93       	st	X, r24
    1b58:	ae e4       	ldi	r26, 0x4E	; 78
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	ee e4       	ldi	r30, 0x4E	; 78
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	8d 7f       	andi	r24, 0xFD	; 253
    1b64:	8c 93       	st	X, r24
    1b66:	ae e4       	ldi	r26, 0x4E	; 78
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	ee e4       	ldi	r30, 0x4E	; 78
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	81 60       	ori	r24, 0x01	; 1
    1b72:	8c 93       	st	X, r24
    1b74:	57 c0       	rjmp	.+174    	; 0x1c24 <TIMER_voidInit+0x964>
	case TIMER_CLK_DEVIDED_BY_8 : CLR_BIT(TCCR1B,2); SET_BIT(TCCR1B,1); CLR_BIT(TCCR1B,0); break;
    1b76:	ae e4       	ldi	r26, 0x4E	; 78
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	ee e4       	ldi	r30, 0x4E	; 78
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8b 7f       	andi	r24, 0xFB	; 251
    1b82:	8c 93       	st	X, r24
    1b84:	ae e4       	ldi	r26, 0x4E	; 78
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ee e4       	ldi	r30, 0x4E	; 78
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	82 60       	ori	r24, 0x02	; 2
    1b90:	8c 93       	st	X, r24
    1b92:	ae e4       	ldi	r26, 0x4E	; 78
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	ee e4       	ldi	r30, 0x4E	; 78
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8e 7f       	andi	r24, 0xFE	; 254
    1b9e:	8c 93       	st	X, r24
    1ba0:	41 c0       	rjmp	.+130    	; 0x1c24 <TIMER_voidInit+0x964>
	case TIMER_CLK_DEVIDED_BY_64 : CLR_BIT(TCCR1B,2); SET_BIT(TCCR1B,1); SET_BIT(TCCR1B,0); break;
    1ba2:	ae e4       	ldi	r26, 0x4E	; 78
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	ee e4       	ldi	r30, 0x4E	; 78
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	8b 7f       	andi	r24, 0xFB	; 251
    1bae:	8c 93       	st	X, r24
    1bb0:	ae e4       	ldi	r26, 0x4E	; 78
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ee e4       	ldi	r30, 0x4E	; 78
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	82 60       	ori	r24, 0x02	; 2
    1bbc:	8c 93       	st	X, r24
    1bbe:	ae e4       	ldi	r26, 0x4E	; 78
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	ee e4       	ldi	r30, 0x4E	; 78
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	81 60       	ori	r24, 0x01	; 1
    1bca:	8c 93       	st	X, r24
    1bcc:	2b c0       	rjmp	.+86     	; 0x1c24 <TIMER_voidInit+0x964>
	case TIMER_CLK_DEVIDED_BY_256 : SET_BIT(TCCR1B,2); CLR_BIT(TCCR1B,1); CLR_BIT(TCCR1B,0); break;
    1bce:	ae e4       	ldi	r26, 0x4E	; 78
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	ee e4       	ldi	r30, 0x4E	; 78
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	84 60       	ori	r24, 0x04	; 4
    1bda:	8c 93       	st	X, r24
    1bdc:	ae e4       	ldi	r26, 0x4E	; 78
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	ee e4       	ldi	r30, 0x4E	; 78
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8d 7f       	andi	r24, 0xFD	; 253
    1be8:	8c 93       	st	X, r24
    1bea:	ae e4       	ldi	r26, 0x4E	; 78
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	ee e4       	ldi	r30, 0x4E	; 78
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	8e 7f       	andi	r24, 0xFE	; 254
    1bf6:	8c 93       	st	X, r24
    1bf8:	15 c0       	rjmp	.+42     	; 0x1c24 <TIMER_voidInit+0x964>
	case TIMER_CLK_DEVIDED_BY_1024 : SET_BIT(TCCR1B,2); CLR_BIT(TCCR1B,1); SET_BIT(TCCR1B,0); break;
    1bfa:	ae e4       	ldi	r26, 0x4E	; 78
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	ee e4       	ldi	r30, 0x4E	; 78
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	84 60       	ori	r24, 0x04	; 4
    1c06:	8c 93       	st	X, r24
    1c08:	ae e4       	ldi	r26, 0x4E	; 78
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ee e4       	ldi	r30, 0x4E	; 78
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8d 7f       	andi	r24, 0xFD	; 253
    1c14:	8c 93       	st	X, r24
    1c16:	ae e4       	ldi	r26, 0x4E	; 78
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	ee e4       	ldi	r30, 0x4E	; 78
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	81 60       	ori	r24, 0x01	; 1
    1c22:	8c 93       	st	X, r24

	}

}
    1c24:	6c 96       	adiw	r28, 0x1c	; 28
    1c26:	0f b6       	in	r0, 0x3f	; 63
    1c28:	f8 94       	cli
    1c2a:	de bf       	out	0x3e, r29	; 62
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	cd bf       	out	0x3d, r28	; 61
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <SPI_voidMasterInit>:
#include "../../../INCLUDE/MCAL/SPI/SPI_prv.h"
#include "../../../SERVICES/bit_utilies.h"
#include "../../../INCLUDE/MCAL/DIO/Dio_prv.h"

void SPI_voidMasterInit (MSPI_str *Add_ptrMSPI)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	2a 97       	sbiw	r28, 0x0a	; 10
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01

switch(Add_ptrMSPI->data_order)
    1c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c50:	fa 81       	ldd	r31, Y+2	; 0x02
    1c52:	80 81       	ld	r24, Z
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	3a 87       	std	Y+10, r19	; 0x0a
    1c5a:	29 87       	std	Y+9, r18	; 0x09
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	31 f0       	breq	.+12     	; 0x1c70 <SPI_voidMasterInit+0x3a>
    1c64:	29 85       	ldd	r18, Y+9	; 0x09
    1c66:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c68:	21 30       	cpi	r18, 0x01	; 1
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	49 f0       	breq	.+18     	; 0x1c80 <SPI_voidMasterInit+0x4a>
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <SPI_voidMasterInit+0x58>
 {
  case SPI_DATA_ORDER_LSB_FIRST : SET_BIT(SPCR,5); break;
    1c70:	ac e2       	ldi	r26, 0x2C	; 44
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	ec e2       	ldi	r30, 0x2C	; 44
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 62       	ori	r24, 0x20	; 32
    1c7c:	8c 93       	st	X, r24
    1c7e:	07 c0       	rjmp	.+14     	; 0x1c8e <SPI_voidMasterInit+0x58>

  case SPI_DATA_ORDER_MSB_FIRST : CLR_BIT(SPCR,5); break;
    1c80:	ac e2       	ldi	r26, 0x2C	; 44
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	ec e2       	ldi	r30, 0x2C	; 44
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8f 7d       	andi	r24, 0xDF	; 223
    1c8c:	8c 93       	st	X, r24

 }

switch(Add_ptrMSPI->clock_polarity)
    1c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c90:	fa 81       	ldd	r31, Y+2	; 0x02
    1c92:	81 81       	ldd	r24, Z+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	38 87       	std	Y+8, r19	; 0x08
    1c9a:	2f 83       	std	Y+7, r18	; 0x07
    1c9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9e:	98 85       	ldd	r25, Y+8	; 0x08
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	31 f0       	breq	.+12     	; 0x1cb0 <SPI_voidMasterInit+0x7a>
    1ca4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ca6:	38 85       	ldd	r19, Y+8	; 0x08
    1ca8:	21 30       	cpi	r18, 0x01	; 1
    1caa:	31 05       	cpc	r19, r1
    1cac:	49 f0       	breq	.+18     	; 0x1cc0 <SPI_voidMasterInit+0x8a>
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <SPI_voidMasterInit+0x98>

 {
 case SPI_CLOCK_POLARITY_MODE_1 : SET_BIT(SPCR,3); break;
    1cb0:	ac e2       	ldi	r26, 0x2C	; 44
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	ec e2       	ldi	r30, 0x2C	; 44
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	88 60       	ori	r24, 0x08	; 8
    1cbc:	8c 93       	st	X, r24
    1cbe:	07 c0       	rjmp	.+14     	; 0x1cce <SPI_voidMasterInit+0x98>

 case SPI_CLOCK_POLARITY_MODE_2 : CLR_BIT(SPCR,3); break;
    1cc0:	ac e2       	ldi	r26, 0x2C	; 44
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	ec e2       	ldi	r30, 0x2C	; 44
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	87 7f       	andi	r24, 0xF7	; 247
    1ccc:	8c 93       	st	X, r24

 }

switch (Add_ptrMSPI->clock_phase)
    1cce:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	3e 83       	std	Y+6, r19	; 0x06
    1cda:	2d 83       	std	Y+5, r18	; 0x05
    1cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cde:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce0:	00 97       	sbiw	r24, 0x00	; 0
    1ce2:	31 f0       	breq	.+12     	; 0x1cf0 <SPI_voidMasterInit+0xba>
    1ce4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce8:	21 30       	cpi	r18, 0x01	; 1
    1cea:	31 05       	cpc	r19, r1
    1cec:	49 f0       	breq	.+18     	; 0x1d00 <SPI_voidMasterInit+0xca>
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <SPI_voidMasterInit+0xd8>

 {
case SPI_CLOCK_PHASE_MODE_1: CLR_BIT(SPCR,2); break;
    1cf0:	ac e2       	ldi	r26, 0x2C	; 44
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	ec e2       	ldi	r30, 0x2C	; 44
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8b 7f       	andi	r24, 0xFB	; 251
    1cfc:	8c 93       	st	X, r24
    1cfe:	07 c0       	rjmp	.+14     	; 0x1d0e <SPI_voidMasterInit+0xd8>
case SPI_CLOCK_PHASE_MODE_2: SET_BIT(SPCR,2); break;
    1d00:	ac e2       	ldi	r26, 0x2C	; 44
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	ec e2       	ldi	r30, 0x2C	; 44
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	84 60       	ori	r24, 0x04	; 4
    1d0c:	8c 93       	st	X, r24
 }

switch(Add_ptrMSPI->clock_scale)
    1d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d10:	fa 81       	ldd	r31, Y+2	; 0x02
    1d12:	83 81       	ldd	r24, Z+3	; 0x03
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	3c 83       	std	Y+4, r19	; 0x04
    1d1a:	2b 83       	std	Y+3, r18	; 0x03
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	83 30       	cpi	r24, 0x03	; 3
    1d22:	91 05       	cpc	r25, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <SPI_voidMasterInit+0xf2>
    1d26:	6a c0       	rjmp	.+212    	; 0x1dfc <SPI_voidMasterInit+0x1c6>
    1d28:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2c:	24 30       	cpi	r18, 0x04	; 4
    1d2e:	31 05       	cpc	r19, r1
    1d30:	84 f4       	brge	.+32     	; 0x1d52 <SPI_voidMasterInit+0x11c>
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	91 05       	cpc	r25, r1
    1d3a:	a1 f1       	breq	.+104    	; 0x1da4 <SPI_voidMasterInit+0x16e>
    1d3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d40:	22 30       	cpi	r18, 0x02	; 2
    1d42:	31 05       	cpc	r19, r1
    1d44:	0c f0       	brlt	.+2      	; 0x1d48 <SPI_voidMasterInit+0x112>
    1d46:	44 c0       	rjmp	.+136    	; 0x1dd0 <SPI_voidMasterInit+0x19a>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	a1 f0       	breq	.+40     	; 0x1d78 <SPI_voidMasterInit+0x142>
    1d50:	ac c0       	rjmp	.+344    	; 0x1eaa <SPI_voidMasterInit+0x274>
    1d52:	2b 81       	ldd	r18, Y+3	; 0x03
    1d54:	3c 81       	ldd	r19, Y+4	; 0x04
    1d56:	25 30       	cpi	r18, 0x05	; 5
    1d58:	31 05       	cpc	r19, r1
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <SPI_voidMasterInit+0x128>
    1d5c:	7b c0       	rjmp	.+246    	; 0x1e54 <SPI_voidMasterInit+0x21e>
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	85 30       	cpi	r24, 0x05	; 5
    1d64:	91 05       	cpc	r25, r1
    1d66:	0c f4       	brge	.+2      	; 0x1d6a <SPI_voidMasterInit+0x134>
    1d68:	5f c0       	rjmp	.+190    	; 0x1e28 <SPI_voidMasterInit+0x1f2>
    1d6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6e:	26 30       	cpi	r18, 0x06	; 6
    1d70:	31 05       	cpc	r19, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <SPI_voidMasterInit+0x140>
    1d74:	85 c0       	rjmp	.+266    	; 0x1e80 <SPI_voidMasterInit+0x24a>
    1d76:	99 c0       	rjmp	.+306    	; 0x1eaa <SPI_voidMasterInit+0x274>
 {
case SPI_CLK_DEVIDED_BY_2: SET_BIT(SPSR,0); CLR_BIT(SPCR,1); CLR_BIT(SPCR,0); break;
    1d78:	ac e2       	ldi	r26, 0x2C	; 44
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	ec e2       	ldi	r30, 0x2C	; 44
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	81 60       	ori	r24, 0x01	; 1
    1d84:	8c 93       	st	X, r24
    1d86:	ac e2       	ldi	r26, 0x2C	; 44
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	ec e2       	ldi	r30, 0x2C	; 44
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	8d 7f       	andi	r24, 0xFD	; 253
    1d92:	8c 93       	st	X, r24
    1d94:	ac e2       	ldi	r26, 0x2C	; 44
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	ec e2       	ldi	r30, 0x2C	; 44
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8e 7f       	andi	r24, 0xFE	; 254
    1da0:	8c 93       	st	X, r24
    1da2:	83 c0       	rjmp	.+262    	; 0x1eaa <SPI_voidMasterInit+0x274>
case SPI_CLK_DEVIDED_BY_4: CLR_BIT(SPSR,0); CLR_BIT(SPCR,1); CLR_BIT(SPCR,0); break;
    1da4:	ac e2       	ldi	r26, 0x2C	; 44
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	ec e2       	ldi	r30, 0x2C	; 44
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8e 7f       	andi	r24, 0xFE	; 254
    1db0:	8c 93       	st	X, r24
    1db2:	ac e2       	ldi	r26, 0x2C	; 44
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	ec e2       	ldi	r30, 0x2C	; 44
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8d 7f       	andi	r24, 0xFD	; 253
    1dbe:	8c 93       	st	X, r24
    1dc0:	ac e2       	ldi	r26, 0x2C	; 44
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	ec e2       	ldi	r30, 0x2C	; 44
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	8e 7f       	andi	r24, 0xFE	; 254
    1dcc:	8c 93       	st	X, r24
    1dce:	6d c0       	rjmp	.+218    	; 0x1eaa <SPI_voidMasterInit+0x274>
case SPI_CLK_DEVIDED_BY_8: SET_BIT(SPSR,0); CLR_BIT(SPCR,1); SET_BIT(SPCR,0); break;
    1dd0:	ac e2       	ldi	r26, 0x2C	; 44
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	ec e2       	ldi	r30, 0x2C	; 44
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	81 60       	ori	r24, 0x01	; 1
    1ddc:	8c 93       	st	X, r24
    1dde:	ac e2       	ldi	r26, 0x2C	; 44
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	ec e2       	ldi	r30, 0x2C	; 44
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	8d 7f       	andi	r24, 0xFD	; 253
    1dea:	8c 93       	st	X, r24
    1dec:	ac e2       	ldi	r26, 0x2C	; 44
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	ec e2       	ldi	r30, 0x2C	; 44
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	81 60       	ori	r24, 0x01	; 1
    1df8:	8c 93       	st	X, r24
    1dfa:	57 c0       	rjmp	.+174    	; 0x1eaa <SPI_voidMasterInit+0x274>
case SPI_CLK_DEVIDED_BY_16: CLR_BIT(SPSR,0); CLR_BIT(SPCR,1); SET_BIT(SPCR,0); break;
    1dfc:	ac e2       	ldi	r26, 0x2C	; 44
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	ec e2       	ldi	r30, 0x2C	; 44
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	8e 7f       	andi	r24, 0xFE	; 254
    1e08:	8c 93       	st	X, r24
    1e0a:	ac e2       	ldi	r26, 0x2C	; 44
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	ec e2       	ldi	r30, 0x2C	; 44
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	8d 7f       	andi	r24, 0xFD	; 253
    1e16:	8c 93       	st	X, r24
    1e18:	ac e2       	ldi	r26, 0x2C	; 44
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	ec e2       	ldi	r30, 0x2C	; 44
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	81 60       	ori	r24, 0x01	; 1
    1e24:	8c 93       	st	X, r24
    1e26:	41 c0       	rjmp	.+130    	; 0x1eaa <SPI_voidMasterInit+0x274>
case SPI_CLK_DEVIDED_BY_32: SET_BIT(SPSR,0); SET_BIT(SPCR,1); CLR_BIT(SPCR,0); break;
    1e28:	ac e2       	ldi	r26, 0x2C	; 44
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	ec e2       	ldi	r30, 0x2C	; 44
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	81 60       	ori	r24, 0x01	; 1
    1e34:	8c 93       	st	X, r24
    1e36:	ac e2       	ldi	r26, 0x2C	; 44
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	ec e2       	ldi	r30, 0x2C	; 44
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	82 60       	ori	r24, 0x02	; 2
    1e42:	8c 93       	st	X, r24
    1e44:	ac e2       	ldi	r26, 0x2C	; 44
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	ec e2       	ldi	r30, 0x2C	; 44
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	8e 7f       	andi	r24, 0xFE	; 254
    1e50:	8c 93       	st	X, r24
    1e52:	2b c0       	rjmp	.+86     	; 0x1eaa <SPI_voidMasterInit+0x274>
case SPI_CLK_DEVIDED_BY_64: CLR_BIT(SPSR,0); SET_BIT(SPCR,1); CLR_BIT(SPCR,0); break;
    1e54:	ac e2       	ldi	r26, 0x2C	; 44
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	ec e2       	ldi	r30, 0x2C	; 44
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8e 7f       	andi	r24, 0xFE	; 254
    1e60:	8c 93       	st	X, r24
    1e62:	ac e2       	ldi	r26, 0x2C	; 44
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	ec e2       	ldi	r30, 0x2C	; 44
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	82 60       	ori	r24, 0x02	; 2
    1e6e:	8c 93       	st	X, r24
    1e70:	ac e2       	ldi	r26, 0x2C	; 44
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	ec e2       	ldi	r30, 0x2C	; 44
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8e 7f       	andi	r24, 0xFE	; 254
    1e7c:	8c 93       	st	X, r24
    1e7e:	15 c0       	rjmp	.+42     	; 0x1eaa <SPI_voidMasterInit+0x274>
case SPI_CLK_DEVIDED_BY_128: CLR_BIT(SPSR,0); SET_BIT(SPCR,1); SET_BIT(SPCR,0); break;
    1e80:	ac e2       	ldi	r26, 0x2C	; 44
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	ec e2       	ldi	r30, 0x2C	; 44
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8e 7f       	andi	r24, 0xFE	; 254
    1e8c:	8c 93       	st	X, r24
    1e8e:	ac e2       	ldi	r26, 0x2C	; 44
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	ec e2       	ldi	r30, 0x2C	; 44
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	82 60       	ori	r24, 0x02	; 2
    1e9a:	8c 93       	st	X, r24
    1e9c:	ac e2       	ldi	r26, 0x2C	; 44
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	ec e2       	ldi	r30, 0x2C	; 44
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	81 60       	ori	r24, 0x01	; 1
    1ea8:	8c 93       	st	X, r24
 }

SET_BIT(SPCR,4); //TO SET MASTER MODE
    1eaa:	ac e2       	ldi	r26, 0x2C	; 44
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	ec e2       	ldi	r30, 0x2C	; 44
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 61       	ori	r24, 0x10	; 16
    1eb6:	8c 93       	st	X, r24
SET_BIT(SPCR,6); // TO ENABLE SPI
    1eb8:	ac e2       	ldi	r26, 0x2C	; 44
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	ec e2       	ldi	r30, 0x2C	; 44
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	80 64       	ori	r24, 0x40	; 64
    1ec4:	8c 93       	st	X, r24

}
    1ec6:	2a 96       	adiw	r28, 0x0a	; 10
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <SPI_voidSlaveInit>:


void SPI_voidSlaveInit (MSPI_str *Add_ptrSSPI)
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	28 97       	sbiw	r28, 0x08	; 8
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01

switch(Add_ptrSSPI->data_order)
    1ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef4:	80 81       	ld	r24, Z
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	38 87       	std	Y+8, r19	; 0x08
    1efc:	2f 83       	std	Y+7, r18	; 0x07
    1efe:	8f 81       	ldd	r24, Y+7	; 0x07
    1f00:	98 85       	ldd	r25, Y+8	; 0x08
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	31 f0       	breq	.+12     	; 0x1f12 <SPI_voidSlaveInit+0x3a>
    1f06:	2f 81       	ldd	r18, Y+7	; 0x07
    1f08:	38 85       	ldd	r19, Y+8	; 0x08
    1f0a:	21 30       	cpi	r18, 0x01	; 1
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	49 f0       	breq	.+18     	; 0x1f22 <SPI_voidSlaveInit+0x4a>
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <SPI_voidSlaveInit+0x58>
 {
  case SPI_DATA_ORDER_LSB_FIRST : SET_BIT(SPCR,5); break;
    1f12:	ac e2       	ldi	r26, 0x2C	; 44
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	ec e2       	ldi	r30, 0x2C	; 44
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	80 62       	ori	r24, 0x20	; 32
    1f1e:	8c 93       	st	X, r24
    1f20:	07 c0       	rjmp	.+14     	; 0x1f30 <SPI_voidSlaveInit+0x58>

  case SPI_DATA_ORDER_MSB_FIRST : CLR_BIT(SPCR,5); break;
    1f22:	ac e2       	ldi	r26, 0x2C	; 44
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	ec e2       	ldi	r30, 0x2C	; 44
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	8f 7d       	andi	r24, 0xDF	; 223
    1f2e:	8c 93       	st	X, r24

 }

switch(Add_ptrSSPI->clock_polarity)
    1f30:	e9 81       	ldd	r30, Y+1	; 0x01
    1f32:	fa 81       	ldd	r31, Y+2	; 0x02
    1f34:	81 81       	ldd	r24, Z+1	; 0x01
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	3e 83       	std	Y+6, r19	; 0x06
    1f3c:	2d 83       	std	Y+5, r18	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	31 f0       	breq	.+12     	; 0x1f52 <SPI_voidSlaveInit+0x7a>
    1f46:	2d 81       	ldd	r18, Y+5	; 0x05
    1f48:	3e 81       	ldd	r19, Y+6	; 0x06
    1f4a:	21 30       	cpi	r18, 0x01	; 1
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	49 f0       	breq	.+18     	; 0x1f62 <SPI_voidSlaveInit+0x8a>
    1f50:	0f c0       	rjmp	.+30     	; 0x1f70 <SPI_voidSlaveInit+0x98>

 {
 case SPI_CLOCK_POLARITY_MODE_1 : SET_BIT(SPCR,3); break;
    1f52:	ac e2       	ldi	r26, 0x2C	; 44
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	ec e2       	ldi	r30, 0x2C	; 44
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 60       	ori	r24, 0x08	; 8
    1f5e:	8c 93       	st	X, r24
    1f60:	07 c0       	rjmp	.+14     	; 0x1f70 <SPI_voidSlaveInit+0x98>

 case SPI_CLOCK_POLARITY_MODE_2 : CLR_BIT(SPCR,3); break;
    1f62:	ac e2       	ldi	r26, 0x2C	; 44
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	ec e2       	ldi	r30, 0x2C	; 44
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	87 7f       	andi	r24, 0xF7	; 247
    1f6e:	8c 93       	st	X, r24

 }

switch (Add_ptrSSPI->clock_phase)
    1f70:	e9 81       	ldd	r30, Y+1	; 0x01
    1f72:	fa 81       	ldd	r31, Y+2	; 0x02
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3c 83       	std	Y+4, r19	; 0x04
    1f7c:	2b 83       	std	Y+3, r18	; 0x03
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	31 f0       	breq	.+12     	; 0x1f92 <SPI_voidSlaveInit+0xba>
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8a:	21 30       	cpi	r18, 0x01	; 1
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	49 f0       	breq	.+18     	; 0x1fa2 <SPI_voidSlaveInit+0xca>
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <SPI_voidSlaveInit+0xd8>

 {
case SPI_CLOCK_PHASE_MODE_1: CLR_BIT(SPCR,2); break;
    1f92:	ac e2       	ldi	r26, 0x2C	; 44
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	ec e2       	ldi	r30, 0x2C	; 44
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	8b 7f       	andi	r24, 0xFB	; 251
    1f9e:	8c 93       	st	X, r24
    1fa0:	07 c0       	rjmp	.+14     	; 0x1fb0 <SPI_voidSlaveInit+0xd8>
case SPI_CLOCK_PHASE_MODE_2: SET_BIT(SPCR,2); break;
    1fa2:	ac e2       	ldi	r26, 0x2C	; 44
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ec e2       	ldi	r30, 0x2C	; 44
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	84 60       	ori	r24, 0x04	; 4
    1fae:	8c 93       	st	X, r24
 }



CLR_BIT(SPCR,4); //TO SET SLAVE MODE
    1fb0:	ac e2       	ldi	r26, 0x2C	; 44
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	ec e2       	ldi	r30, 0x2C	; 44
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	8f 7e       	andi	r24, 0xEF	; 239
    1fbc:	8c 93       	st	X, r24
SET_BIT(SPCR,6); // TO ENABLE SPI
    1fbe:	ac e2       	ldi	r26, 0x2C	; 44
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	ec e2       	ldi	r30, 0x2C	; 44
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 64       	ori	r24, 0x40	; 64
    1fca:	8c 93       	st	X, r24

}
    1fcc:	28 96       	adiw	r28, 0x08	; 8
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <SPI_u8DataTransfer>:


u8 SPI_u8DataTransfer (u8 Copy_u8Data)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	0f 92       	push	r0
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_u8Data;
    1fea:	eb e2       	ldi	r30, 0x2B	; 43
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	80 83       	st	Z, r24

	while(GET_BIT(SPSR,7)==0);
    1ff2:	ec e2       	ldi	r30, 0x2C	; 44
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	88 23       	and	r24, r24
    1ffa:	dc f7       	brge	.-10     	; 0x1ff2 <SPI_u8DataTransfer+0x14>

	return SPDR;
    1ffc:	eb e2       	ldi	r30, 0x2B	; 43
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z


}
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <GIE_voidGlobalInterruptEnable>:
#include "../../../INCLUDE/MCAL/GIE/GIE_prv.h"
#include "../../../SERVICES/bit_utilies.h"


void GIE_voidGlobalInterruptEnable(void)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62

SET_BIT(SREG,GIE_SREG_PIN);
    2012:	af e5       	ldi	r26, 0x5F	; 95
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	ef e5       	ldi	r30, 0x5F	; 95
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	80 68       	ori	r24, 0x80	; 128
    201e:	8c 93       	st	X, r24

}
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <GIE_voidGlobalInterruptDisable>:

void GIE_voidGlobalInterruptDisable(void)
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62

CLR_BIT(SREG,GIE_SREG_PIN);
    202e:	af e5       	ldi	r26, 0x5F	; 95
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ef e5       	ldi	r30, 0x5F	; 95
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	8f 77       	andi	r24, 0x7F	; 127
    203a:	8c 93       	st	X, r24

}
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <EXTI_voidEnable>:
#include "../../../INCLUDE/MCAL/EXTI/EXTI_prv.h"
#include "../../../INCLUDE/MCAL/DIO/Dio_prv.h"
#include "../../../SERVICES/bit_utilies.h"
#include "util/delay.h"
void EXTI_voidEnable(u8 Copy_u8ExtIntNum,u8 Copy_u8EdgeIntSource)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	2a 97       	sbiw	r28, 0x0a	; 10
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	6a 83       	std	Y+2, r22	; 0x02

 switch(Copy_u8ExtIntNum)
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	3a 87       	std	Y+10, r19	; 0x0a
    2062:	29 87       	std	Y+9, r18	; 0x09
    2064:	89 85       	ldd	r24, Y+9	; 0x09
    2066:	9a 85       	ldd	r25, Y+10	; 0x0a
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	91 05       	cpc	r25, r1
    206c:	09 f4       	brne	.+2      	; 0x2070 <EXTI_voidEnable+0x2e>
    206e:	6d c0       	rjmp	.+218    	; 0x214a <EXTI_voidEnable+0x108>
    2070:	29 85       	ldd	r18, Y+9	; 0x09
    2072:	3a 85       	ldd	r19, Y+10	; 0x0a
    2074:	22 30       	cpi	r18, 0x02	; 2
    2076:	31 05       	cpc	r19, r1
    2078:	09 f4       	brne	.+2      	; 0x207c <EXTI_voidEnable+0x3a>
    207a:	c9 c0       	rjmp	.+402    	; 0x220e <EXTI_voidEnable+0x1cc>
    207c:	89 85       	ldd	r24, Y+9	; 0x09
    207e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	09 f0       	breq	.+2      	; 0x2086 <EXTI_voidEnable+0x44>
    2084:	ea c0       	rjmp	.+468    	; 0x225a <EXTI_voidEnable+0x218>
  {
 case EXTI_INT_0: SET_BIT(GICR, EXTI_INT_0_GICR);
    2086:	ab e5       	ldi	r26, 0x5B	; 91
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	eb e5       	ldi	r30, 0x5B	; 91
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	80 64       	ori	r24, 0x40	; 64
    2092:	8c 93       	st	X, r24
		 switch(Copy_u8EdgeIntSource)
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	28 2f       	mov	r18, r24
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	38 87       	std	Y+8, r19	; 0x08
    209c:	2f 83       	std	Y+7, r18	; 0x07
    209e:	8f 81       	ldd	r24, Y+7	; 0x07
    20a0:	98 85       	ldd	r25, Y+8	; 0x08
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	91 05       	cpc	r25, r1
    20a6:	21 f1       	breq	.+72     	; 0x20f0 <EXTI_voidEnable+0xae>
    20a8:	2f 81       	ldd	r18, Y+7	; 0x07
    20aa:	38 85       	ldd	r19, Y+8	; 0x08
    20ac:	22 30       	cpi	r18, 0x02	; 2
    20ae:	31 05       	cpc	r19, r1
    20b0:	2c f4       	brge	.+10     	; 0x20bc <EXTI_voidEnable+0x7a>
    20b2:	8f 81       	ldd	r24, Y+7	; 0x07
    20b4:	98 85       	ldd	r25, Y+8	; 0x08
    20b6:	00 97       	sbiw	r24, 0x00	; 0
    20b8:	61 f0       	breq	.+24     	; 0x20d2 <EXTI_voidEnable+0x90>
    20ba:	cf c0       	rjmp	.+414    	; 0x225a <EXTI_voidEnable+0x218>
    20bc:	2f 81       	ldd	r18, Y+7	; 0x07
    20be:	38 85       	ldd	r19, Y+8	; 0x08
    20c0:	22 30       	cpi	r18, 0x02	; 2
    20c2:	31 05       	cpc	r19, r1
    20c4:	21 f1       	breq	.+72     	; 0x210e <EXTI_voidEnable+0xcc>
    20c6:	8f 81       	ldd	r24, Y+7	; 0x07
    20c8:	98 85       	ldd	r25, Y+8	; 0x08
    20ca:	83 30       	cpi	r24, 0x03	; 3
    20cc:	91 05       	cpc	r25, r1
    20ce:	71 f1       	breq	.+92     	; 0x212c <EXTI_voidEnable+0xea>
    20d0:	c4 c0       	rjmp	.+392    	; 0x225a <EXTI_voidEnable+0x218>
		 {
		 case EXTI_INT_0_LOW_LEVEL: CLR_BIT(MCUCR,1); CLR_BIT(MCUCR,0); break;
    20d2:	a5 e5       	ldi	r26, 0x55	; 85
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e5 e5       	ldi	r30, 0x55	; 85
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	8d 7f       	andi	r24, 0xFD	; 253
    20de:	8c 93       	st	X, r24
    20e0:	a5 e5       	ldi	r26, 0x55	; 85
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e5 e5       	ldi	r30, 0x55	; 85
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	8e 7f       	andi	r24, 0xFE	; 254
    20ec:	8c 93       	st	X, r24
    20ee:	b5 c0       	rjmp	.+362    	; 0x225a <EXTI_voidEnable+0x218>
		 case EXTI_INT_0_LOGICAL_CHANGE: CLR_BIT(MCUCR,1); SET_BIT(MCUCR,0); break;
    20f0:	a5 e5       	ldi	r26, 0x55	; 85
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e5 e5       	ldi	r30, 0x55	; 85
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	8d 7f       	andi	r24, 0xFD	; 253
    20fc:	8c 93       	st	X, r24
    20fe:	a5 e5       	ldi	r26, 0x55	; 85
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e5 e5       	ldi	r30, 0x55	; 85
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	81 60       	ori	r24, 0x01	; 1
    210a:	8c 93       	st	X, r24
    210c:	a6 c0       	rjmp	.+332    	; 0x225a <EXTI_voidEnable+0x218>
		 case EXTI_INT_0_FALLING_EDGE: SET_BIT(MCUCR,1); CLR_BIT(MCUCR,0); break;
    210e:	a5 e5       	ldi	r26, 0x55	; 85
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	e5 e5       	ldi	r30, 0x55	; 85
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	82 60       	ori	r24, 0x02	; 2
    211a:	8c 93       	st	X, r24
    211c:	a5 e5       	ldi	r26, 0x55	; 85
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	e5 e5       	ldi	r30, 0x55	; 85
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	8e 7f       	andi	r24, 0xFE	; 254
    2128:	8c 93       	st	X, r24
    212a:	97 c0       	rjmp	.+302    	; 0x225a <EXTI_voidEnable+0x218>
		 case EXTI_INT_0_RISING_EDGE: SET_BIT(MCUCR,1); SET_BIT(MCUCR,0); break;
    212c:	a5 e5       	ldi	r26, 0x55	; 85
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e5 e5       	ldi	r30, 0x55	; 85
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	82 60       	ori	r24, 0x02	; 2
    2138:	8c 93       	st	X, r24
    213a:	a5 e5       	ldi	r26, 0x55	; 85
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e5 e5       	ldi	r30, 0x55	; 85
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	81 60       	ori	r24, 0x01	; 1
    2146:	8c 93       	st	X, r24
    2148:	88 c0       	rjmp	.+272    	; 0x225a <EXTI_voidEnable+0x218>
		 }

		  break;


 case EXTI_INT_1: SET_BIT(GICR, EXTI_INT_1_GICR);
    214a:	ab e5       	ldi	r26, 0x5B	; 91
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	eb e5       	ldi	r30, 0x5B	; 91
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	80 68       	ori	r24, 0x80	; 128
    2156:	8c 93       	st	X, r24
 switch(Copy_u8EdgeIntSource)
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	3e 83       	std	Y+6, r19	; 0x06
    2160:	2d 83       	std	Y+5, r18	; 0x05
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	81 30       	cpi	r24, 0x01	; 1
    2168:	91 05       	cpc	r25, r1
    216a:	21 f1       	breq	.+72     	; 0x21b4 <EXTI_voidEnable+0x172>
    216c:	2d 81       	ldd	r18, Y+5	; 0x05
    216e:	3e 81       	ldd	r19, Y+6	; 0x06
    2170:	22 30       	cpi	r18, 0x02	; 2
    2172:	31 05       	cpc	r19, r1
    2174:	2c f4       	brge	.+10     	; 0x2180 <EXTI_voidEnable+0x13e>
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	61 f0       	breq	.+24     	; 0x2196 <EXTI_voidEnable+0x154>
    217e:	6d c0       	rjmp	.+218    	; 0x225a <EXTI_voidEnable+0x218>
    2180:	2d 81       	ldd	r18, Y+5	; 0x05
    2182:	3e 81       	ldd	r19, Y+6	; 0x06
    2184:	22 30       	cpi	r18, 0x02	; 2
    2186:	31 05       	cpc	r19, r1
    2188:	21 f1       	breq	.+72     	; 0x21d2 <EXTI_voidEnable+0x190>
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	83 30       	cpi	r24, 0x03	; 3
    2190:	91 05       	cpc	r25, r1
    2192:	71 f1       	breq	.+92     	; 0x21f0 <EXTI_voidEnable+0x1ae>
    2194:	62 c0       	rjmp	.+196    	; 0x225a <EXTI_voidEnable+0x218>
		 {
		 case EXTI_INT_1_LOW_LEVEL: CLR_BIT(MCUCR,3); CLR_BIT(MCUCR,2); break;
    2196:	a5 e5       	ldi	r26, 0x55	; 85
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e5 e5       	ldi	r30, 0x55	; 85
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	87 7f       	andi	r24, 0xF7	; 247
    21a2:	8c 93       	st	X, r24
    21a4:	a5 e5       	ldi	r26, 0x55	; 85
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e5 e5       	ldi	r30, 0x55	; 85
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	8b 7f       	andi	r24, 0xFB	; 251
    21b0:	8c 93       	st	X, r24
    21b2:	53 c0       	rjmp	.+166    	; 0x225a <EXTI_voidEnable+0x218>
		 case EXTI_INT_1_LOGICAL_CHANGE:  CLR_BIT(MCUCR,3); SET_BIT(MCUCR,2); break;
    21b4:	a5 e5       	ldi	r26, 0x55	; 85
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e5 e5       	ldi	r30, 0x55	; 85
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	87 7f       	andi	r24, 0xF7	; 247
    21c0:	8c 93       	st	X, r24
    21c2:	a5 e5       	ldi	r26, 0x55	; 85
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e5 e5       	ldi	r30, 0x55	; 85
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	84 60       	ori	r24, 0x04	; 4
    21ce:	8c 93       	st	X, r24
    21d0:	44 c0       	rjmp	.+136    	; 0x225a <EXTI_voidEnable+0x218>
		 case EXTI_INT_1_FALLING_EDGE: SET_BIT(MCUCR,3); CLR_BIT(MCUCR,2); break;
    21d2:	a5 e5       	ldi	r26, 0x55	; 85
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e5 e5       	ldi	r30, 0x55	; 85
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	88 60       	ori	r24, 0x08	; 8
    21de:	8c 93       	st	X, r24
    21e0:	a5 e5       	ldi	r26, 0x55	; 85
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e5 e5       	ldi	r30, 0x55	; 85
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	8b 7f       	andi	r24, 0xFB	; 251
    21ec:	8c 93       	st	X, r24
    21ee:	35 c0       	rjmp	.+106    	; 0x225a <EXTI_voidEnable+0x218>
		 case EXTI_INT_1_RISING_EDGE: SET_BIT(MCUCR,3); SET_BIT(MCUCR,2); break;
    21f0:	a5 e5       	ldi	r26, 0x55	; 85
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e5 e5       	ldi	r30, 0x55	; 85
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	88 60       	ori	r24, 0x08	; 8
    21fc:	8c 93       	st	X, r24
    21fe:	a5 e5       	ldi	r26, 0x55	; 85
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e5 e5       	ldi	r30, 0x55	; 85
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	84 60       	ori	r24, 0x04	; 4
    220a:	8c 93       	st	X, r24
    220c:	26 c0       	rjmp	.+76     	; 0x225a <EXTI_voidEnable+0x218>

		 }

 break;

 case EXTI_INT_2: SET_BIT(GICR, EXTI_INT_2_GICR);
    220e:	ab e5       	ldi	r26, 0x5B	; 91
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	eb e5       	ldi	r30, 0x5B	; 91
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	80 62       	ori	r24, 0x20	; 32
    221a:	8c 93       	st	X, r24
 switch(Copy_u8EdgeIntSource)
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	28 2f       	mov	r18, r24
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	3c 83       	std	Y+4, r19	; 0x04
    2224:	2b 83       	std	Y+3, r18	; 0x03
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	82 30       	cpi	r24, 0x02	; 2
    222c:	91 05       	cpc	r25, r1
    222e:	31 f0       	breq	.+12     	; 0x223c <EXTI_voidEnable+0x1fa>
    2230:	2b 81       	ldd	r18, Y+3	; 0x03
    2232:	3c 81       	ldd	r19, Y+4	; 0x04
    2234:	23 30       	cpi	r18, 0x03	; 3
    2236:	31 05       	cpc	r19, r1
    2238:	49 f0       	breq	.+18     	; 0x224c <EXTI_voidEnable+0x20a>
    223a:	0f c0       	rjmp	.+30     	; 0x225a <EXTI_voidEnable+0x218>
		 {

		 case EXTI_INT_2_FALLING_EDGE:  CLR_BIT(MCUCR,6); break;
    223c:	a5 e5       	ldi	r26, 0x55	; 85
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e5 e5       	ldi	r30, 0x55	; 85
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	8f 7b       	andi	r24, 0xBF	; 191
    2248:	8c 93       	st	X, r24
    224a:	07 c0       	rjmp	.+14     	; 0x225a <EXTI_voidEnable+0x218>
		 case EXTI_INT_2_RISING_EDGE: SET_BIT(MCUCR,6);  break;
    224c:	a5 e5       	ldi	r26, 0x55	; 85
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	e5 e5       	ldi	r30, 0x55	; 85
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	80 64       	ori	r24, 0x40	; 64
    2258:	8c 93       	st	X, r24
 break;



  }
}
    225a:	2a 96       	adiw	r28, 0x0a	; 10
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <EXTI_voidDisable>:

 /////////////////////////////////////////////

 void EXTI_voidDisable(u8 Copy_u8ExtIntNum)
 {
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	00 d0       	rcall	.+0      	; 0x2272 <EXTI_voidDisable+0x6>
    2272:	0f 92       	push	r0
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	89 83       	std	Y+1, r24	; 0x01


	 switch( Copy_u8ExtIntNum)
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	3b 83       	std	Y+3, r19	; 0x03
    2282:	2a 83       	std	Y+2, r18	; 0x02
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	9b 81       	ldd	r25, Y+3	; 0x03
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	91 05       	cpc	r25, r1
    228c:	89 f0       	breq	.+34     	; 0x22b0 <EXTI_voidDisable+0x44>
    228e:	2a 81       	ldd	r18, Y+2	; 0x02
    2290:	3b 81       	ldd	r19, Y+3	; 0x03
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	31 05       	cpc	r19, r1
    2296:	a1 f0       	breq	.+40     	; 0x22c0 <EXTI_voidDisable+0x54>
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	b9 f4       	brne	.+46     	; 0x22ce <EXTI_voidDisable+0x62>
	 {
	 case EXTI_INT_0: CLR_BIT(GICR, EXTI_INT_0_GICR); break;
    22a0:	ab e5       	ldi	r26, 0x5B	; 91
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	eb e5       	ldi	r30, 0x5B	; 91
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	8f 7b       	andi	r24, 0xBF	; 191
    22ac:	8c 93       	st	X, r24
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <EXTI_voidDisable+0x62>
	 case EXTI_INT_1: CLR_BIT(GICR, EXTI_INT_1_GICR); break;
    22b0:	ab e5       	ldi	r26, 0x5B	; 91
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	eb e5       	ldi	r30, 0x5B	; 91
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	8f 77       	andi	r24, 0x7F	; 127
    22bc:	8c 93       	st	X, r24
    22be:	07 c0       	rjmp	.+14     	; 0x22ce <EXTI_voidDisable+0x62>
	 case EXTI_INT_2: CLR_BIT(GICR, EXTI_INT_2_GICR); break;
    22c0:	ab e5       	ldi	r26, 0x5B	; 91
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	eb e5       	ldi	r30, 0x5B	; 91
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8f 7d       	andi	r24, 0xDF	; 223
    22cc:	8c 93       	st	X, r24


	 }


 }
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <DIO_enuSetPinValue>:

// body of the function that use to put high or low on the pin



Dio_tenuErrorStatus DIO_enuSetPinValue (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinVal){
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	28 97       	sbiw	r28, 0x08	; 8
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	8a 83       	std	Y+2, r24	; 0x02
    22f0:	6b 83       	std	Y+3, r22	; 0x03
    22f2:	4c 83       	std	Y+4, r20	; 0x04
// check
	Dio_tenuErrorStatus LOC_enErrorStatus =Dio_enOk;
    22f4:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)){
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	84 30       	cpi	r24, 0x04	; 4
    22fa:	08 f0       	brcs	.+2      	; 0x22fe <DIO_enuSetPinValue+0x24>
    22fc:	ef c0       	rjmp	.+478    	; 0x24dc <DIO_enuSetPinValue+0x202>
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	88 30       	cpi	r24, 0x08	; 8
    2302:	08 f0       	brcs	.+2      	; 0x2306 <DIO_enuSetPinValue+0x2c>
    2304:	eb c0       	rjmp	.+470    	; 0x24dc <DIO_enuSetPinValue+0x202>

		if(Copy_u8PinVal==DIO_u8_HIGH){
    2306:	8c 81       	ldd	r24, Y+4	; 0x04
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	09 f0       	breq	.+2      	; 0x230e <DIO_enuSetPinValue+0x34>
    230c:	6f c0       	rjmp	.+222    	; 0x23ec <DIO_enuSetPinValue+0x112>
			switch (Copy_u8PortId){
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	38 87       	std	Y+8, r19	; 0x08
    2316:	2f 83       	std	Y+7, r18	; 0x07
    2318:	8f 81       	ldd	r24, Y+7	; 0x07
    231a:	98 85       	ldd	r25, Y+8	; 0x08
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	91 05       	cpc	r25, r1
    2320:	49 f1       	breq	.+82     	; 0x2374 <DIO_enuSetPinValue+0x9a>
    2322:	2f 81       	ldd	r18, Y+7	; 0x07
    2324:	38 85       	ldd	r19, Y+8	; 0x08
    2326:	22 30       	cpi	r18, 0x02	; 2
    2328:	31 05       	cpc	r19, r1
    232a:	2c f4       	brge	.+10     	; 0x2336 <DIO_enuSetPinValue+0x5c>
    232c:	8f 81       	ldd	r24, Y+7	; 0x07
    232e:	98 85       	ldd	r25, Y+8	; 0x08
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	61 f0       	breq	.+24     	; 0x234c <DIO_enuSetPinValue+0x72>
    2334:	d5 c0       	rjmp	.+426    	; 0x24e0 <DIO_enuSetPinValue+0x206>
    2336:	2f 81       	ldd	r18, Y+7	; 0x07
    2338:	38 85       	ldd	r19, Y+8	; 0x08
    233a:	22 30       	cpi	r18, 0x02	; 2
    233c:	31 05       	cpc	r19, r1
    233e:	71 f1       	breq	.+92     	; 0x239c <DIO_enuSetPinValue+0xc2>
    2340:	8f 81       	ldd	r24, Y+7	; 0x07
    2342:	98 85       	ldd	r25, Y+8	; 0x08
    2344:	83 30       	cpi	r24, 0x03	; 3
    2346:	91 05       	cpc	r25, r1
    2348:	e9 f1       	breq	.+122    	; 0x23c4 <DIO_enuSetPinValue+0xea>
    234a:	ca c0       	rjmp	.+404    	; 0x24e0 <DIO_enuSetPinValue+0x206>

			case DIO_u8_PORTA : SET_BIT(PORTA_Register,Copy_u8PinId); break;
    234c:	ab e3       	ldi	r26, 0x3B	; 59
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	eb e3       	ldi	r30, 0x3B	; 59
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	48 2f       	mov	r20, r24
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 2e       	mov	r0, r18
    2364:	02 c0       	rjmp	.+4      	; 0x236a <DIO_enuSetPinValue+0x90>
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <DIO_enuSetPinValue+0x8c>
    236e:	84 2b       	or	r24, r20
    2370:	8c 93       	st	X, r24
    2372:	b6 c0       	rjmp	.+364    	; 0x24e0 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTB : SET_BIT(PORTB_Register,Copy_u8PinId); break;
    2374:	a8 e3       	ldi	r26, 0x38	; 56
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e8 e3       	ldi	r30, 0x38	; 56
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	48 2f       	mov	r20, r24
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 2e       	mov	r0, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <DIO_enuSetPinValue+0xb8>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	0a 94       	dec	r0
    2394:	e2 f7       	brpl	.-8      	; 0x238e <DIO_enuSetPinValue+0xb4>
    2396:	84 2b       	or	r24, r20
    2398:	8c 93       	st	X, r24
    239a:	a2 c0       	rjmp	.+324    	; 0x24e0 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTC : SET_BIT(PORTC_Register,Copy_u8PinId); break;
    239c:	a5 e3       	ldi	r26, 0x35	; 53
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e5 e3       	ldi	r30, 0x35	; 53
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	48 2f       	mov	r20, r24
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 2e       	mov	r0, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <DIO_enuSetPinValue+0xe0>
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	0a 94       	dec	r0
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <DIO_enuSetPinValue+0xdc>
    23be:	84 2b       	or	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	8e c0       	rjmp	.+284    	; 0x24e0 <DIO_enuSetPinValue+0x206>
			case DIO_u8_PORTD : SET_BIT(PORTD_Register,Copy_u8PinId); break;
    23c4:	a2 e3       	ldi	r26, 0x32	; 50
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e2 e3       	ldi	r30, 0x32	; 50
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	48 2f       	mov	r20, r24
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	02 2e       	mov	r0, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <DIO_enuSetPinValue+0x108>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <DIO_enuSetPinValue+0x104>
    23e6:	84 2b       	or	r24, r20
    23e8:	8c 93       	st	X, r24
    23ea:	7a c0       	rjmp	.+244    	; 0x24e0 <DIO_enuSetPinValue+0x206>
			default:/*wrong id */ break;
			}

			}

		else if(Copy_u8PinVal==DIO_u8_LOW){
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	88 23       	and	r24, r24
    23f0:	09 f0       	breq	.+2      	; 0x23f4 <DIO_enuSetPinValue+0x11a>
    23f2:	76 c0       	rjmp	.+236    	; 0x24e0 <DIO_enuSetPinValue+0x206>

			switch (Copy_u8PortId){
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	3e 83       	std	Y+6, r19	; 0x06
    23fc:	2d 83       	std	Y+5, r18	; 0x05
    23fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2400:	9e 81       	ldd	r25, Y+6	; 0x06
    2402:	81 30       	cpi	r24, 0x01	; 1
    2404:	91 05       	cpc	r25, r1
    2406:	59 f1       	breq	.+86     	; 0x245e <DIO_enuSetPinValue+0x184>
    2408:	2d 81       	ldd	r18, Y+5	; 0x05
    240a:	3e 81       	ldd	r19, Y+6	; 0x06
    240c:	22 30       	cpi	r18, 0x02	; 2
    240e:	31 05       	cpc	r19, r1
    2410:	2c f4       	brge	.+10     	; 0x241c <DIO_enuSetPinValue+0x142>
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f0       	breq	.+26     	; 0x2434 <DIO_enuSetPinValue+0x15a>
    241a:	62 c0       	rjmp	.+196    	; 0x24e0 <DIO_enuSetPinValue+0x206>
    241c:	2d 81       	ldd	r18, Y+5	; 0x05
    241e:	3e 81       	ldd	r19, Y+6	; 0x06
    2420:	22 30       	cpi	r18, 0x02	; 2
    2422:	31 05       	cpc	r19, r1
    2424:	89 f1       	breq	.+98     	; 0x2488 <DIO_enuSetPinValue+0x1ae>
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	83 30       	cpi	r24, 0x03	; 3
    242c:	91 05       	cpc	r25, r1
    242e:	09 f4       	brne	.+2      	; 0x2432 <DIO_enuSetPinValue+0x158>
    2430:	40 c0       	rjmp	.+128    	; 0x24b2 <DIO_enuSetPinValue+0x1d8>
    2432:	56 c0       	rjmp	.+172    	; 0x24e0 <DIO_enuSetPinValue+0x206>

				case DIO_u8_PORTA : CLR_BIT(PORTA_Register,Copy_u8PinId); break;
    2434:	ab e3       	ldi	r26, 0x3B	; 59
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	eb e3       	ldi	r30, 0x3B	; 59
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	48 2f       	mov	r20, r24
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	02 2e       	mov	r0, r18
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <DIO_enuSetPinValue+0x178>
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	0a 94       	dec	r0
    2454:	e2 f7       	brpl	.-8      	; 0x244e <DIO_enuSetPinValue+0x174>
    2456:	80 95       	com	r24
    2458:	84 23       	and	r24, r20
    245a:	8c 93       	st	X, r24
    245c:	41 c0       	rjmp	.+130    	; 0x24e0 <DIO_enuSetPinValue+0x206>
				case DIO_u8_PORTB : CLR_BIT(PORTB_Register,Copy_u8PinId);break;
    245e:	a8 e3       	ldi	r26, 0x38	; 56
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e8 e3       	ldi	r30, 0x38	; 56
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	48 2f       	mov	r20, r24
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	02 2e       	mov	r0, r18
    2476:	02 c0       	rjmp	.+4      	; 0x247c <DIO_enuSetPinValue+0x1a2>
    2478:	88 0f       	add	r24, r24
    247a:	99 1f       	adc	r25, r25
    247c:	0a 94       	dec	r0
    247e:	e2 f7       	brpl	.-8      	; 0x2478 <DIO_enuSetPinValue+0x19e>
    2480:	80 95       	com	r24
    2482:	84 23       	and	r24, r20
    2484:	8c 93       	st	X, r24
    2486:	2c c0       	rjmp	.+88     	; 0x24e0 <DIO_enuSetPinValue+0x206>
				case DIO_u8_PORTC : CLR_BIT(PORTC_Register,Copy_u8PinId);break;
    2488:	a5 e3       	ldi	r26, 0x35	; 53
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e5 e3       	ldi	r30, 0x35	; 53
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	48 2f       	mov	r20, r24
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	02 2e       	mov	r0, r18
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <DIO_enuSetPinValue+0x1cc>
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	0a 94       	dec	r0
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <DIO_enuSetPinValue+0x1c8>
    24aa:	80 95       	com	r24
    24ac:	84 23       	and	r24, r20
    24ae:	8c 93       	st	X, r24
    24b0:	17 c0       	rjmp	.+46     	; 0x24e0 <DIO_enuSetPinValue+0x206>
				case DIO_u8_PORTD : CLR_BIT(PORTD_Register,Copy_u8PinId); break;
    24b2:	a2 e3       	ldi	r26, 0x32	; 50
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	e2 e3       	ldi	r30, 0x32	; 50
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	48 2f       	mov	r20, r24
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	02 2e       	mov	r0, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <DIO_enuSetPinValue+0x1f6>
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	0a 94       	dec	r0
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <DIO_enuSetPinValue+0x1f2>
    24d4:	80 95       	com	r24
    24d6:	84 23       	and	r24, r20
    24d8:	8c 93       	st	X, r24
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <DIO_enuSetPinValue+0x206>


    }

	else{
		 LOC_enErrorStatus =Dio_enInvalidInput;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	89 83       	std	Y+1, r24	; 0x01

	}

	return LOC_enErrorStatus;
    24e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    24e2:	28 96       	adiw	r28, 0x08	; 8
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	de bf       	out	0x3e, r29	; 62
    24ea:	0f be       	out	0x3f, r0	; 63
    24ec:	cd bf       	out	0x3d, r28	; 61
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <DIO_enuSetPinDirection>:

////////////////////////////////DDR function//////////////////////////////////////////////

 Dio_tenuErrorStatus DIO_enuSetPinDirection (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDir){
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	cd b7       	in	r28, 0x3d	; 61
    24fa:	de b7       	in	r29, 0x3e	; 62
    24fc:	28 97       	sbiw	r28, 0x08	; 8
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	8a 83       	std	Y+2, r24	; 0x02
    250a:	6b 83       	std	Y+3, r22	; 0x03
    250c:	4c 83       	std	Y+4, r20	; 0x04

	 // check
	 	Dio_tenuErrorStatus LOC_enErrorStatus =Dio_enOk;
    250e:	19 82       	std	Y+1, r1	; 0x01
	 	if( (Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)){
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	84 30       	cpi	r24, 0x04	; 4
    2514:	08 f0       	brcs	.+2      	; 0x2518 <DIO_enuSetPinDirection+0x24>
    2516:	ef c0       	rjmp	.+478    	; 0x26f6 <DIO_enuSetPinDirection+0x202>
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	88 30       	cpi	r24, 0x08	; 8
    251c:	08 f0       	brcs	.+2      	; 0x2520 <DIO_enuSetPinDirection+0x2c>
    251e:	eb c0       	rjmp	.+470    	; 0x26f6 <DIO_enuSetPinDirection+0x202>

	 		if(Copy_u8PinDir==DIO_u8_OUTPUT){
    2520:	8c 81       	ldd	r24, Y+4	; 0x04
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	09 f0       	breq	.+2      	; 0x2528 <DIO_enuSetPinDirection+0x34>
    2526:	6f c0       	rjmp	.+222    	; 0x2606 <DIO_enuSetPinDirection+0x112>
	 			switch (Copy_u8PortId){
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	38 87       	std	Y+8, r19	; 0x08
    2530:	2f 83       	std	Y+7, r18	; 0x07
    2532:	8f 81       	ldd	r24, Y+7	; 0x07
    2534:	98 85       	ldd	r25, Y+8	; 0x08
    2536:	81 30       	cpi	r24, 0x01	; 1
    2538:	91 05       	cpc	r25, r1
    253a:	49 f1       	breq	.+82     	; 0x258e <DIO_enuSetPinDirection+0x9a>
    253c:	2f 81       	ldd	r18, Y+7	; 0x07
    253e:	38 85       	ldd	r19, Y+8	; 0x08
    2540:	22 30       	cpi	r18, 0x02	; 2
    2542:	31 05       	cpc	r19, r1
    2544:	2c f4       	brge	.+10     	; 0x2550 <DIO_enuSetPinDirection+0x5c>
    2546:	8f 81       	ldd	r24, Y+7	; 0x07
    2548:	98 85       	ldd	r25, Y+8	; 0x08
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	61 f0       	breq	.+24     	; 0x2566 <DIO_enuSetPinDirection+0x72>
    254e:	d5 c0       	rjmp	.+426    	; 0x26fa <DIO_enuSetPinDirection+0x206>
    2550:	2f 81       	ldd	r18, Y+7	; 0x07
    2552:	38 85       	ldd	r19, Y+8	; 0x08
    2554:	22 30       	cpi	r18, 0x02	; 2
    2556:	31 05       	cpc	r19, r1
    2558:	71 f1       	breq	.+92     	; 0x25b6 <DIO_enuSetPinDirection+0xc2>
    255a:	8f 81       	ldd	r24, Y+7	; 0x07
    255c:	98 85       	ldd	r25, Y+8	; 0x08
    255e:	83 30       	cpi	r24, 0x03	; 3
    2560:	91 05       	cpc	r25, r1
    2562:	e9 f1       	breq	.+122    	; 0x25de <DIO_enuSetPinDirection+0xea>
    2564:	ca c0       	rjmp	.+404    	; 0x26fa <DIO_enuSetPinDirection+0x206>

	 			case DIO_u8_PORTA : SET_BIT(DDRA_Register,Copy_u8PinId); break;
    2566:	aa e3       	ldi	r26, 0x3A	; 58
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	ea e3       	ldi	r30, 0x3A	; 58
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	48 2f       	mov	r20, r24
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	28 2f       	mov	r18, r24
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	02 2e       	mov	r0, r18
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <DIO_enuSetPinDirection+0x90>
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	0a 94       	dec	r0
    2586:	e2 f7       	brpl	.-8      	; 0x2580 <DIO_enuSetPinDirection+0x8c>
    2588:	84 2b       	or	r24, r20
    258a:	8c 93       	st	X, r24
    258c:	b6 c0       	rjmp	.+364    	; 0x26fa <DIO_enuSetPinDirection+0x206>
	 			case DIO_u8_PORTB : SET_BIT(DDRB_Register,Copy_u8PinId); break;
    258e:	a7 e3       	ldi	r26, 0x37	; 55
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e7 e3       	ldi	r30, 0x37	; 55
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	48 2f       	mov	r20, r24
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	02 2e       	mov	r0, r18
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <DIO_enuSetPinDirection+0xb8>
    25a8:	88 0f       	add	r24, r24
    25aa:	99 1f       	adc	r25, r25
    25ac:	0a 94       	dec	r0
    25ae:	e2 f7       	brpl	.-8      	; 0x25a8 <DIO_enuSetPinDirection+0xb4>
    25b0:	84 2b       	or	r24, r20
    25b2:	8c 93       	st	X, r24
    25b4:	a2 c0       	rjmp	.+324    	; 0x26fa <DIO_enuSetPinDirection+0x206>
	 			case DIO_u8_PORTC : SET_BIT(DDRC_Register,Copy_u8PinId); break;
    25b6:	a4 e3       	ldi	r26, 0x34	; 52
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e4 e3       	ldi	r30, 0x34	; 52
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	48 2f       	mov	r20, r24
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	28 2f       	mov	r18, r24
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	02 2e       	mov	r0, r18
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <DIO_enuSetPinDirection+0xe0>
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	0a 94       	dec	r0
    25d6:	e2 f7       	brpl	.-8      	; 0x25d0 <DIO_enuSetPinDirection+0xdc>
    25d8:	84 2b       	or	r24, r20
    25da:	8c 93       	st	X, r24
    25dc:	8e c0       	rjmp	.+284    	; 0x26fa <DIO_enuSetPinDirection+0x206>
	 			case DIO_u8_PORTD : SET_BIT(DDRD_Register,Copy_u8PinId); break;
    25de:	a1 e3       	ldi	r26, 0x31	; 49
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e1 e3       	ldi	r30, 0x31	; 49
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	48 2f       	mov	r20, r24
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <DIO_enuSetPinDirection+0x108>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <DIO_enuSetPinDirection+0x104>
    2600:	84 2b       	or	r24, r20
    2602:	8c 93       	st	X, r24
    2604:	7a c0       	rjmp	.+244    	; 0x26fa <DIO_enuSetPinDirection+0x206>
	 			}


	 			}

	 		else if(Copy_u8PinDir==DIO_u8_INPUT){
    2606:	8c 81       	ldd	r24, Y+4	; 0x04
    2608:	88 23       	and	r24, r24
    260a:	09 f0       	breq	.+2      	; 0x260e <DIO_enuSetPinDirection+0x11a>
    260c:	76 c0       	rjmp	.+236    	; 0x26fa <DIO_enuSetPinDirection+0x206>

	 			switch (Copy_u8PortId){
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	3e 83       	std	Y+6, r19	; 0x06
    2616:	2d 83       	std	Y+5, r18	; 0x05
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	81 30       	cpi	r24, 0x01	; 1
    261e:	91 05       	cpc	r25, r1
    2620:	59 f1       	breq	.+86     	; 0x2678 <DIO_enuSetPinDirection+0x184>
    2622:	2d 81       	ldd	r18, Y+5	; 0x05
    2624:	3e 81       	ldd	r19, Y+6	; 0x06
    2626:	22 30       	cpi	r18, 0x02	; 2
    2628:	31 05       	cpc	r19, r1
    262a:	2c f4       	brge	.+10     	; 0x2636 <DIO_enuSetPinDirection+0x142>
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	69 f0       	breq	.+26     	; 0x264e <DIO_enuSetPinDirection+0x15a>
    2634:	62 c0       	rjmp	.+196    	; 0x26fa <DIO_enuSetPinDirection+0x206>
    2636:	2d 81       	ldd	r18, Y+5	; 0x05
    2638:	3e 81       	ldd	r19, Y+6	; 0x06
    263a:	22 30       	cpi	r18, 0x02	; 2
    263c:	31 05       	cpc	r19, r1
    263e:	89 f1       	breq	.+98     	; 0x26a2 <DIO_enuSetPinDirection+0x1ae>
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	9e 81       	ldd	r25, Y+6	; 0x06
    2644:	83 30       	cpi	r24, 0x03	; 3
    2646:	91 05       	cpc	r25, r1
    2648:	09 f4       	brne	.+2      	; 0x264c <DIO_enuSetPinDirection+0x158>
    264a:	40 c0       	rjmp	.+128    	; 0x26cc <DIO_enuSetPinDirection+0x1d8>
    264c:	56 c0       	rjmp	.+172    	; 0x26fa <DIO_enuSetPinDirection+0x206>

	 		  case DIO_u8_PORTA : CLR_BIT(DDRA_Register,Copy_u8PinId); break;
    264e:	aa e3       	ldi	r26, 0x3A	; 58
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	ea e3       	ldi	r30, 0x3A	; 58
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	48 2f       	mov	r20, r24
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	02 2e       	mov	r0, r18
    2666:	02 c0       	rjmp	.+4      	; 0x266c <DIO_enuSetPinDirection+0x178>
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	0a 94       	dec	r0
    266e:	e2 f7       	brpl	.-8      	; 0x2668 <DIO_enuSetPinDirection+0x174>
    2670:	80 95       	com	r24
    2672:	84 23       	and	r24, r20
    2674:	8c 93       	st	X, r24
    2676:	41 c0       	rjmp	.+130    	; 0x26fa <DIO_enuSetPinDirection+0x206>
	 		  case DIO_u8_PORTB : CLR_BIT(DDRB_Register,Copy_u8PinId);break;
    2678:	a7 e3       	ldi	r26, 0x37	; 55
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e7 e3       	ldi	r30, 0x37	; 55
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	48 2f       	mov	r20, r24
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	28 2f       	mov	r18, r24
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	02 2e       	mov	r0, r18
    2690:	02 c0       	rjmp	.+4      	; 0x2696 <DIO_enuSetPinDirection+0x1a2>
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	0a 94       	dec	r0
    2698:	e2 f7       	brpl	.-8      	; 0x2692 <DIO_enuSetPinDirection+0x19e>
    269a:	80 95       	com	r24
    269c:	84 23       	and	r24, r20
    269e:	8c 93       	st	X, r24
    26a0:	2c c0       	rjmp	.+88     	; 0x26fa <DIO_enuSetPinDirection+0x206>
	 		  case DIO_u8_PORTC : CLR_BIT(DDRC_Register,Copy_u8PinId);break;
    26a2:	a4 e3       	ldi	r26, 0x34	; 52
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e4 e3       	ldi	r30, 0x34	; 52
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	48 2f       	mov	r20, r24
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	28 2f       	mov	r18, r24
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	02 2e       	mov	r0, r18
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <DIO_enuSetPinDirection+0x1cc>
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	0a 94       	dec	r0
    26c2:	e2 f7       	brpl	.-8      	; 0x26bc <DIO_enuSetPinDirection+0x1c8>
    26c4:	80 95       	com	r24
    26c6:	84 23       	and	r24, r20
    26c8:	8c 93       	st	X, r24
    26ca:	17 c0       	rjmp	.+46     	; 0x26fa <DIO_enuSetPinDirection+0x206>
	 		  case DIO_u8_PORTD : CLR_BIT(DDRD_Register,Copy_u8PinId); break;
    26cc:	a1 e3       	ldi	r26, 0x31	; 49
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e1 e3       	ldi	r30, 0x31	; 49
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	48 2f       	mov	r20, r24
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	02 2e       	mov	r0, r18
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <DIO_enuSetPinDirection+0x1f6>
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	0a 94       	dec	r0
    26ec:	e2 f7       	brpl	.-8      	; 0x26e6 <DIO_enuSetPinDirection+0x1f2>
    26ee:	80 95       	com	r24
    26f0:	84 23       	and	r24, r20
    26f2:	8c 93       	st	X, r24
    26f4:	02 c0       	rjmp	.+4      	; 0x26fa <DIO_enuSetPinDirection+0x206>


	     }

	 	else{
	 		 LOC_enErrorStatus =Dio_enInvalidInput;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	89 83       	std	Y+1, r24	; 0x01

	 	}

	 	return LOC_enErrorStatus;
    26fa:	89 81       	ldd	r24, Y+1	; 0x01

 }
    26fc:	28 96       	adiw	r28, 0x08	; 8
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	cf 91       	pop	r28
    270a:	df 91       	pop	r29
    270c:	08 95       	ret

0000270e <DIO_u8GetPinValue>:

///////////////////////////////get pin value >> PIN REG /////////////////////////////////////////

 u8 DIO_u8GetPinValue(u8 Copy_u8PortId , u8 Copy_u8PinId){
    270e:	df 93       	push	r29
    2710:	cf 93       	push	r28
    2712:	00 d0       	rcall	.+0      	; 0x2714 <DIO_u8GetPinValue+0x6>
    2714:	00 d0       	rcall	.+0      	; 0x2716 <DIO_u8GetPinValue+0x8>
    2716:	0f 92       	push	r0
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	8a 83       	std	Y+2, r24	; 0x02
    271e:	6b 83       	std	Y+3, r22	; 0x03

	 u8 LOC_u8ResultLocal;
	 if( (Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)){
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	84 30       	cpi	r24, 0x04	; 4
    2724:	08 f0       	brcs	.+2      	; 0x2728 <DIO_u8GetPinValue+0x1a>
    2726:	6c c0       	rjmp	.+216    	; 0x2800 <DIO_u8GetPinValue+0xf2>
    2728:	8b 81       	ldd	r24, Y+3	; 0x03
    272a:	88 30       	cpi	r24, 0x08	; 8
    272c:	08 f0       	brcs	.+2      	; 0x2730 <DIO_u8GetPinValue+0x22>
    272e:	68 c0       	rjmp	.+208    	; 0x2800 <DIO_u8GetPinValue+0xf2>

		 switch (Copy_u8PortId)
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	28 2f       	mov	r18, r24
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	3d 83       	std	Y+5, r19	; 0x05
    2738:	2c 83       	std	Y+4, r18	; 0x04
    273a:	4c 81       	ldd	r20, Y+4	; 0x04
    273c:	5d 81       	ldd	r21, Y+5	; 0x05
    273e:	41 30       	cpi	r20, 0x01	; 1
    2740:	51 05       	cpc	r21, r1
    2742:	41 f1       	breq	.+80     	; 0x2794 <DIO_u8GetPinValue+0x86>
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	9d 81       	ldd	r25, Y+5	; 0x05
    2748:	82 30       	cpi	r24, 0x02	; 2
    274a:	91 05       	cpc	r25, r1
    274c:	34 f4       	brge	.+12     	; 0x275a <DIO_u8GetPinValue+0x4c>
    274e:	2c 81       	ldd	r18, Y+4	; 0x04
    2750:	3d 81       	ldd	r19, Y+5	; 0x05
    2752:	21 15       	cp	r18, r1
    2754:	31 05       	cpc	r19, r1
    2756:	61 f0       	breq	.+24     	; 0x2770 <DIO_u8GetPinValue+0x62>
    2758:	55 c0       	rjmp	.+170    	; 0x2804 <DIO_u8GetPinValue+0xf6>
    275a:	4c 81       	ldd	r20, Y+4	; 0x04
    275c:	5d 81       	ldd	r21, Y+5	; 0x05
    275e:	42 30       	cpi	r20, 0x02	; 2
    2760:	51 05       	cpc	r21, r1
    2762:	51 f1       	breq	.+84     	; 0x27b8 <DIO_u8GetPinValue+0xaa>
    2764:	8c 81       	ldd	r24, Y+4	; 0x04
    2766:	9d 81       	ldd	r25, Y+5	; 0x05
    2768:	83 30       	cpi	r24, 0x03	; 3
    276a:	91 05       	cpc	r25, r1
    276c:	b9 f1       	breq	.+110    	; 0x27dc <DIO_u8GetPinValue+0xce>
    276e:	4a c0       	rjmp	.+148    	; 0x2804 <DIO_u8GetPinValue+0xf6>
		 {
		 case DIO_u8_PORTA: LOC_u8ResultLocal=GET_BIT(PINA_Register,Copy_u8PinId) ; break;
    2770:	e9 e3       	ldi	r30, 0x39	; 57
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	8b 81       	ldd	r24, Y+3	; 0x03
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	a9 01       	movw	r20, r18
    2782:	02 c0       	rjmp	.+4      	; 0x2788 <DIO_u8GetPinValue+0x7a>
    2784:	55 95       	asr	r21
    2786:	47 95       	ror	r20
    2788:	8a 95       	dec	r24
    278a:	e2 f7       	brpl	.-8      	; 0x2784 <DIO_u8GetPinValue+0x76>
    278c:	ca 01       	movw	r24, r20
    278e:	81 70       	andi	r24, 0x01	; 1
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	38 c0       	rjmp	.+112    	; 0x2804 <DIO_u8GetPinValue+0xf6>
		 case DIO_u8_PORTB: LOC_u8ResultLocal=GET_BIT(PINB_Register,Copy_u8PinId) ; break;
    2794:	e6 e3       	ldi	r30, 0x36	; 54
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a9 01       	movw	r20, r18
    27a6:	02 c0       	rjmp	.+4      	; 0x27ac <DIO_u8GetPinValue+0x9e>
    27a8:	55 95       	asr	r21
    27aa:	47 95       	ror	r20
    27ac:	8a 95       	dec	r24
    27ae:	e2 f7       	brpl	.-8      	; 0x27a8 <DIO_u8GetPinValue+0x9a>
    27b0:	ca 01       	movw	r24, r20
    27b2:	81 70       	andi	r24, 0x01	; 1
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	26 c0       	rjmp	.+76     	; 0x2804 <DIO_u8GetPinValue+0xf6>
		 case DIO_u8_PORTC: LOC_u8ResultLocal=GET_BIT(PINC_Register,Copy_u8PinId) ; break;
    27b8:	e3 e3       	ldi	r30, 0x33	; 51
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	28 2f       	mov	r18, r24
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	a9 01       	movw	r20, r18
    27ca:	02 c0       	rjmp	.+4      	; 0x27d0 <DIO_u8GetPinValue+0xc2>
    27cc:	55 95       	asr	r21
    27ce:	47 95       	ror	r20
    27d0:	8a 95       	dec	r24
    27d2:	e2 f7       	brpl	.-8      	; 0x27cc <DIO_u8GetPinValue+0xbe>
    27d4:	ca 01       	movw	r24, r20
    27d6:	81 70       	andi	r24, 0x01	; 1
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	14 c0       	rjmp	.+40     	; 0x2804 <DIO_u8GetPinValue+0xf6>
		 case DIO_u8_PORTD: LOC_u8ResultLocal=GET_BIT(PIND_Register,Copy_u8PinId) ; break;
    27dc:	e0 e3       	ldi	r30, 0x30	; 48
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	28 2f       	mov	r18, r24
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	8b 81       	ldd	r24, Y+3	; 0x03
    27e8:	88 2f       	mov	r24, r24
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a9 01       	movw	r20, r18
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <DIO_u8GetPinValue+0xe6>
    27f0:	55 95       	asr	r21
    27f2:	47 95       	ror	r20
    27f4:	8a 95       	dec	r24
    27f6:	e2 f7       	brpl	.-8      	; 0x27f0 <DIO_u8GetPinValue+0xe2>
    27f8:	ca 01       	movw	r24, r20
    27fa:	81 70       	andi	r24, 0x01	; 1
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <DIO_u8GetPinValue+0xf6>

		 }

	 }
	 else
		 LOC_u8ResultLocal=0xff;
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    2802:	89 83       	std	Y+1, r24	; 0x01
return
    2804:	89 81       	ldd	r24, Y+1	; 0x01
		 LOC_u8ResultLocal;

 }
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <DIO_enuSetPortDirection>:

//////////////////////////////////////////port set whole output or whole input////////////////////////
 Dio_tenuErrorStatus DIO_enuSetPortDirection (u8 Copy_u8PortId , u8 Copy_u8PortDir){
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	00 d0       	rcall	.+0      	; 0x281c <DIO_enuSetPortDirection+0x6>
    281c:	00 d0       	rcall	.+0      	; 0x281e <DIO_enuSetPortDirection+0x8>
    281e:	0f 92       	push	r0
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	8a 83       	std	Y+2, r24	; 0x02
    2826:	6b 83       	std	Y+3, r22	; 0x03

	 Dio_tenuErrorStatus LOC_enErrorStatus =Dio_enOk;
    2828:	19 82       	std	Y+1, r1	; 0x01
	 	 	if( Copy_u8PortId <= DIO_u8_PORTD ){
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	84 30       	cpi	r24, 0x04	; 4
    282e:	98 f5       	brcc	.+102    	; 0x2896 <DIO_enuSetPortDirection+0x80>


	 	 			 			switch (Copy_u8PortId){
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	28 2f       	mov	r18, r24
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	3d 83       	std	Y+5, r19	; 0x05
    2838:	2c 83       	std	Y+4, r18	; 0x04
    283a:	8c 81       	ldd	r24, Y+4	; 0x04
    283c:	9d 81       	ldd	r25, Y+5	; 0x05
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	91 05       	cpc	r25, r1
    2842:	d1 f0       	breq	.+52     	; 0x2878 <DIO_enuSetPortDirection+0x62>
    2844:	2c 81       	ldd	r18, Y+4	; 0x04
    2846:	3d 81       	ldd	r19, Y+5	; 0x05
    2848:	22 30       	cpi	r18, 0x02	; 2
    284a:	31 05       	cpc	r19, r1
    284c:	2c f4       	brge	.+10     	; 0x2858 <DIO_enuSetPortDirection+0x42>
    284e:	8c 81       	ldd	r24, Y+4	; 0x04
    2850:	9d 81       	ldd	r25, Y+5	; 0x05
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	61 f0       	breq	.+24     	; 0x286e <DIO_enuSetPortDirection+0x58>
    2856:	21 c0       	rjmp	.+66     	; 0x289a <DIO_enuSetPortDirection+0x84>
    2858:	2c 81       	ldd	r18, Y+4	; 0x04
    285a:	3d 81       	ldd	r19, Y+5	; 0x05
    285c:	22 30       	cpi	r18, 0x02	; 2
    285e:	31 05       	cpc	r19, r1
    2860:	81 f0       	breq	.+32     	; 0x2882 <DIO_enuSetPortDirection+0x6c>
    2862:	8c 81       	ldd	r24, Y+4	; 0x04
    2864:	9d 81       	ldd	r25, Y+5	; 0x05
    2866:	83 30       	cpi	r24, 0x03	; 3
    2868:	91 05       	cpc	r25, r1
    286a:	81 f0       	breq	.+32     	; 0x288c <DIO_enuSetPortDirection+0x76>
    286c:	16 c0       	rjmp	.+44     	; 0x289a <DIO_enuSetPortDirection+0x84>

	 	 			 			case DIO_u8_PORTA : DDRA_Register=Copy_u8PortDir; break;
    286e:	ea e3       	ldi	r30, 0x3A	; 58
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	80 83       	st	Z, r24
    2876:	11 c0       	rjmp	.+34     	; 0x289a <DIO_enuSetPortDirection+0x84>

	 	 			 			case DIO_u8_PORTB : DDRB_Register=Copy_u8PortDir; break;
    2878:	e7 e3       	ldi	r30, 0x37	; 55
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	80 83       	st	Z, r24
    2880:	0c c0       	rjmp	.+24     	; 0x289a <DIO_enuSetPortDirection+0x84>

	 	 			 			case DIO_u8_PORTC : DDRC_Register=Copy_u8PortDir; break;
    2882:	e4 e3       	ldi	r30, 0x34	; 52
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	80 83       	st	Z, r24
    288a:	07 c0       	rjmp	.+14     	; 0x289a <DIO_enuSetPortDirection+0x84>

	 	 			 			case DIO_u8_PORTD : DDRD_Register=Copy_u8PortDir; break;
    288c:	e1 e3       	ldi	r30, 0x31	; 49
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	80 83       	st	Z, r24
    2894:	02 c0       	rjmp	.+4      	; 0x289a <DIO_enuSetPortDirection+0x84>
	 	 			 			}


	 	 			     }
	 	 	else
	 	 		LOC_enErrorStatus =Dio_enInvalidInput;
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	89 83       	std	Y+1, r24	; 0x01

	 	 	return  LOC_enErrorStatus;
    289a:	89 81       	ldd	r24, Y+1	; 0x01
	 	 	}
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <DIO_enuSetPortValue>:

	 ///////////////////////////////////play with output 5v or 0//////////////

 Dio_tenuErrorStatus DIO_enuSetPortValue (u8 Copy_u8PortId , u8 Copy_u8PortVal){  //for output
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <DIO_enuSetPortValue+0x6>
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <DIO_enuSetPortValue+0x8>
    28b4:	0f 92       	push	r0
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	8a 83       	std	Y+2, r24	; 0x02
    28bc:	6b 83       	std	Y+3, r22	; 0x03

	 Dio_tenuErrorStatus LOC_enErrorStatus =Dio_enOk;
    28be:	19 82       	std	Y+1, r1	; 0x01
	 	 	if( Copy_u8PortId <= DIO_u8_PORTD ){
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	84 30       	cpi	r24, 0x04	; 4
    28c4:	98 f5       	brcc	.+102    	; 0x292c <DIO_enuSetPortValue+0x80>


	 	 			 			switch (Copy_u8PortId){
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	3d 83       	std	Y+5, r19	; 0x05
    28ce:	2c 83       	std	Y+4, r18	; 0x04
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	9d 81       	ldd	r25, Y+5	; 0x05
    28d4:	81 30       	cpi	r24, 0x01	; 1
    28d6:	91 05       	cpc	r25, r1
    28d8:	d1 f0       	breq	.+52     	; 0x290e <DIO_enuSetPortValue+0x62>
    28da:	2c 81       	ldd	r18, Y+4	; 0x04
    28dc:	3d 81       	ldd	r19, Y+5	; 0x05
    28de:	22 30       	cpi	r18, 0x02	; 2
    28e0:	31 05       	cpc	r19, r1
    28e2:	2c f4       	brge	.+10     	; 0x28ee <DIO_enuSetPortValue+0x42>
    28e4:	8c 81       	ldd	r24, Y+4	; 0x04
    28e6:	9d 81       	ldd	r25, Y+5	; 0x05
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	61 f0       	breq	.+24     	; 0x2904 <DIO_enuSetPortValue+0x58>
    28ec:	21 c0       	rjmp	.+66     	; 0x2930 <DIO_enuSetPortValue+0x84>
    28ee:	2c 81       	ldd	r18, Y+4	; 0x04
    28f0:	3d 81       	ldd	r19, Y+5	; 0x05
    28f2:	22 30       	cpi	r18, 0x02	; 2
    28f4:	31 05       	cpc	r19, r1
    28f6:	81 f0       	breq	.+32     	; 0x2918 <DIO_enuSetPortValue+0x6c>
    28f8:	8c 81       	ldd	r24, Y+4	; 0x04
    28fa:	9d 81       	ldd	r25, Y+5	; 0x05
    28fc:	83 30       	cpi	r24, 0x03	; 3
    28fe:	91 05       	cpc	r25, r1
    2900:	81 f0       	breq	.+32     	; 0x2922 <DIO_enuSetPortValue+0x76>
    2902:	16 c0       	rjmp	.+44     	; 0x2930 <DIO_enuSetPortValue+0x84>

	 	 			 			case DIO_u8_PORTA : PORTA_Register=Copy_u8PortVal; break;
    2904:	eb e3       	ldi	r30, 0x3B	; 59
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	80 83       	st	Z, r24
    290c:	11 c0       	rjmp	.+34     	; 0x2930 <DIO_enuSetPortValue+0x84>

	 	 			 			case DIO_u8_PORTB : PORTB_Register=Copy_u8PortVal; break;
    290e:	e8 e3       	ldi	r30, 0x38	; 56
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	80 83       	st	Z, r24
    2916:	0c c0       	rjmp	.+24     	; 0x2930 <DIO_enuSetPortValue+0x84>

	 	 			 			case DIO_u8_PORTC : PORTC_Register=Copy_u8PortVal; break;
    2918:	e5 e3       	ldi	r30, 0x35	; 53
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	8b 81       	ldd	r24, Y+3	; 0x03
    291e:	80 83       	st	Z, r24
    2920:	07 c0       	rjmp	.+14     	; 0x2930 <DIO_enuSetPortValue+0x84>

	 	 			 			case DIO_u8_PORTD : PORTD_Register=Copy_u8PortVal; break;
    2922:	e2 e3       	ldi	r30, 0x32	; 50
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	80 83       	st	Z, r24
    292a:	02 c0       	rjmp	.+4      	; 0x2930 <DIO_enuSetPortValue+0x84>
	 	 			 			}


	 	 			     }
	 	 	else
	 	 	 LOC_enErrorStatus =Dio_enInvalidInput;
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	89 83       	std	Y+1, r24	; 0x01

	 	 	return  LOC_enErrorStatus;
    2930:	89 81       	ldd	r24, Y+1	; 0x01
	 	 	}
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <ADC_voidInit>:
#include "../../../INCLUDE/MCAL/ADC/ADC_prv.h"
#include "../../../INCLUDE/MCAL/DIO/Dio_prv.h"
#include "../../../SERVICES/bit_utilies.h"

void ADC_voidInit(ADC_str * Add_strPointerADC)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	cd b7       	in	r28, 0x3d	; 61
    2948:	de b7       	in	r29, 0x3e	; 62
    294a:	28 97       	sbiw	r28, 0x08	; 8
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01

switch( Add_strPointerADC->pin_Id)
    295a:	e9 81       	ldd	r30, Y+1	; 0x01
    295c:	fa 81       	ldd	r31, Y+2	; 0x02
    295e:	80 81       	ld	r24, Z
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	38 87       	std	Y+8, r19	; 0x08
    2966:	2f 83       	std	Y+7, r18	; 0x07
    2968:	8f 81       	ldd	r24, Y+7	; 0x07
    296a:	98 85       	ldd	r25, Y+8	; 0x08
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	91 05       	cpc	r25, r1
    2970:	c1 f0       	breq	.+48     	; 0x29a2 <ADC_voidInit+0x60>
    2972:	2f 81       	ldd	r18, Y+7	; 0x07
    2974:	38 85       	ldd	r19, Y+8	; 0x08
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	11 f1       	breq	.+68     	; 0x29c0 <ADC_voidInit+0x7e>
    297c:	8f 81       	ldd	r24, Y+7	; 0x07
    297e:	98 85       	ldd	r25, Y+8	; 0x08
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	61 f5       	brne	.+88     	; 0x29dc <ADC_voidInit+0x9a>
  {
case ADC_REF_SELECTION_AREF: CLR_BIT(ADMUX,7); CLR_BIT(ADMUX,6); break;
    2984:	a7 e2       	ldi	r26, 0x27	; 39
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e7 e2       	ldi	r30, 0x27	; 39
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	8f 77       	andi	r24, 0x7F	; 127
    2990:	8c 93       	st	X, r24
    2992:	a7 e2       	ldi	r26, 0x27	; 39
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e7 e2       	ldi	r30, 0x27	; 39
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	8f 7b       	andi	r24, 0xBF	; 191
    299e:	8c 93       	st	X, r24
    29a0:	1d c0       	rjmp	.+58     	; 0x29dc <ADC_voidInit+0x9a>
case ADC_REF_SELECTION_AVCC: CLR_BIT(ADMUX,7); SET_BIT(ADMUX,6); break;// Referance Voltage as AVCC with external capacitor
    29a2:	a7 e2       	ldi	r26, 0x27	; 39
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e7 e2       	ldi	r30, 0x27	; 39
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	8f 77       	andi	r24, 0x7F	; 127
    29ae:	8c 93       	st	X, r24
    29b0:	a7 e2       	ldi	r26, 0x27	; 39
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e7 e2       	ldi	r30, 0x27	; 39
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	80 64       	ori	r24, 0x40	; 64
    29bc:	8c 93       	st	X, r24
    29be:	0e c0       	rjmp	.+28     	; 0x29dc <ADC_voidInit+0x9a>
case ADC_REF_SELECTION_VREF: SET_BIT(ADMUX,7); SET_BIT(ADMUX,6); break;
    29c0:	a7 e2       	ldi	r26, 0x27	; 39
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e7 e2       	ldi	r30, 0x27	; 39
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	80 68       	ori	r24, 0x80	; 128
    29cc:	8c 93       	st	X, r24
    29ce:	a7 e2       	ldi	r26, 0x27	; 39
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e7 e2       	ldi	r30, 0x27	; 39
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	80 64       	ori	r24, 0x40	; 64
    29da:	8c 93       	st	X, r24
  }

switch( Add_strPointerADC->left_adjust)
    29dc:	e9 81       	ldd	r30, Y+1	; 0x01
    29de:	fa 81       	ldd	r31, Y+2	; 0x02
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	28 2f       	mov	r18, r24
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	3e 83       	std	Y+6, r19	; 0x06
    29e8:	2d 83       	std	Y+5, r18	; 0x05
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	00 97       	sbiw	r24, 0x00	; 0
    29f0:	31 f0       	breq	.+12     	; 0x29fe <ADC_voidInit+0xbc>
    29f2:	2d 81       	ldd	r18, Y+5	; 0x05
    29f4:	3e 81       	ldd	r19, Y+6	; 0x06
    29f6:	21 30       	cpi	r18, 0x01	; 1
    29f8:	31 05       	cpc	r19, r1
    29fa:	49 f0       	breq	.+18     	; 0x2a0e <ADC_voidInit+0xcc>
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <ADC_voidInit+0xda>
  {
case ADC_ADLAR_DISABLE: CLR_BIT(ADMUX,5); break;
    29fe:	a7 e2       	ldi	r26, 0x27	; 39
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e7 e2       	ldi	r30, 0x27	; 39
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	8f 7d       	andi	r24, 0xDF	; 223
    2a0a:	8c 93       	st	X, r24
    2a0c:	07 c0       	rjmp	.+14     	; 0x2a1c <ADC_voidInit+0xda>
case ADC_ADLAR_ENABLE: SET_BIT(ADMUX,5); break;
    2a0e:	a7 e2       	ldi	r26, 0x27	; 39
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	e7 e2       	ldi	r30, 0x27	; 39
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	80 62       	ori	r24, 0x20	; 32
    2a1a:	8c 93       	st	X, r24

  }

switch( Add_strPointerADC->devision_factor)
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	83 81       	ldd	r24, Z+3	; 0x03
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	3c 83       	std	Y+4, r19	; 0x04
    2a28:	2b 83       	std	Y+3, r18	; 0x03
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2e:	83 30       	cpi	r24, 0x03	; 3
    2a30:	91 05       	cpc	r25, r1
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <ADC_voidInit+0xf4>
    2a34:	6a c0       	rjmp	.+212    	; 0x2b0a <ADC_voidInit+0x1c8>
    2a36:	2b 81       	ldd	r18, Y+3	; 0x03
    2a38:	3c 81       	ldd	r19, Y+4	; 0x04
    2a3a:	24 30       	cpi	r18, 0x04	; 4
    2a3c:	31 05       	cpc	r19, r1
    2a3e:	84 f4       	brge	.+32     	; 0x2a60 <ADC_voidInit+0x11e>
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	9c 81       	ldd	r25, Y+4	; 0x04
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	91 05       	cpc	r25, r1
    2a48:	a1 f1       	breq	.+104    	; 0x2ab2 <ADC_voidInit+0x170>
    2a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a4e:	22 30       	cpi	r18, 0x02	; 2
    2a50:	31 05       	cpc	r19, r1
    2a52:	0c f0       	brlt	.+2      	; 0x2a56 <ADC_voidInit+0x114>
    2a54:	44 c0       	rjmp	.+136    	; 0x2ade <ADC_voidInit+0x19c>
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	a1 f0       	breq	.+40     	; 0x2a86 <ADC_voidInit+0x144>
    2a5e:	ac c0       	rjmp	.+344    	; 0x2bb8 <ADC_voidInit+0x276>
    2a60:	2b 81       	ldd	r18, Y+3	; 0x03
    2a62:	3c 81       	ldd	r19, Y+4	; 0x04
    2a64:	25 30       	cpi	r18, 0x05	; 5
    2a66:	31 05       	cpc	r19, r1
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <ADC_voidInit+0x12a>
    2a6a:	7b c0       	rjmp	.+246    	; 0x2b62 <ADC_voidInit+0x220>
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a70:	85 30       	cpi	r24, 0x05	; 5
    2a72:	91 05       	cpc	r25, r1
    2a74:	0c f4       	brge	.+2      	; 0x2a78 <ADC_voidInit+0x136>
    2a76:	5f c0       	rjmp	.+190    	; 0x2b36 <ADC_voidInit+0x1f4>
    2a78:	2b 81       	ldd	r18, Y+3	; 0x03
    2a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a7c:	26 30       	cpi	r18, 0x06	; 6
    2a7e:	31 05       	cpc	r19, r1
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <ADC_voidInit+0x142>
    2a82:	85 c0       	rjmp	.+266    	; 0x2b8e <ADC_voidInit+0x24c>
    2a84:	99 c0       	rjmp	.+306    	; 0x2bb8 <ADC_voidInit+0x276>
  {
case ADC_DEVISION_FACTOR_2: CLR_BIT(ADCSRA,2);CLR_BIT(ADCSRA,1);CLR_BIT(ADCSRA,0);break;
    2a86:	a6 e2       	ldi	r26, 0x26	; 38
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	e6 e2       	ldi	r30, 0x26	; 38
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	8b 7f       	andi	r24, 0xFB	; 251
    2a92:	8c 93       	st	X, r24
    2a94:	a6 e2       	ldi	r26, 0x26	; 38
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e6 e2       	ldi	r30, 0x26	; 38
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	8d 7f       	andi	r24, 0xFD	; 253
    2aa0:	8c 93       	st	X, r24
    2aa2:	a6 e2       	ldi	r26, 0x26	; 38
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	e6 e2       	ldi	r30, 0x26	; 38
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	8e 7f       	andi	r24, 0xFE	; 254
    2aae:	8c 93       	st	X, r24
    2ab0:	83 c0       	rjmp	.+262    	; 0x2bb8 <ADC_voidInit+0x276>
case ADC_DEVISION_FACTOR_4: CLR_BIT(ADCSRA,2);SET_BIT(ADCSRA,1);CLR_BIT(ADCSRA,0);break;
    2ab2:	a6 e2       	ldi	r26, 0x26	; 38
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e6 e2       	ldi	r30, 0x26	; 38
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	8b 7f       	andi	r24, 0xFB	; 251
    2abe:	8c 93       	st	X, r24
    2ac0:	a6 e2       	ldi	r26, 0x26	; 38
    2ac2:	b0 e0       	ldi	r27, 0x00	; 0
    2ac4:	e6 e2       	ldi	r30, 0x26	; 38
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	82 60       	ori	r24, 0x02	; 2
    2acc:	8c 93       	st	X, r24
    2ace:	a6 e2       	ldi	r26, 0x26	; 38
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e6 e2       	ldi	r30, 0x26	; 38
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	8e 7f       	andi	r24, 0xFE	; 254
    2ada:	8c 93       	st	X, r24
    2adc:	6d c0       	rjmp	.+218    	; 0x2bb8 <ADC_voidInit+0x276>
case ADC_DEVISION_FACTOR_8: CLR_BIT(ADCSRA,2);SET_BIT(ADCSRA,1);SET_BIT(ADCSRA,0);break;
    2ade:	a6 e2       	ldi	r26, 0x26	; 38
    2ae0:	b0 e0       	ldi	r27, 0x00	; 0
    2ae2:	e6 e2       	ldi	r30, 0x26	; 38
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	8b 7f       	andi	r24, 0xFB	; 251
    2aea:	8c 93       	st	X, r24
    2aec:	a6 e2       	ldi	r26, 0x26	; 38
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	e6 e2       	ldi	r30, 0x26	; 38
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	82 60       	ori	r24, 0x02	; 2
    2af8:	8c 93       	st	X, r24
    2afa:	a6 e2       	ldi	r26, 0x26	; 38
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	e6 e2       	ldi	r30, 0x26	; 38
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	81 60       	ori	r24, 0x01	; 1
    2b06:	8c 93       	st	X, r24
    2b08:	57 c0       	rjmp	.+174    	; 0x2bb8 <ADC_voidInit+0x276>
case ADC_DEVISION_FACTOR_16: SET_BIT(ADCSRA,2);CLR_BIT(ADCSRA,1);CLR_BIT(ADCSRA,0);break;
    2b0a:	a6 e2       	ldi	r26, 0x26	; 38
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	e6 e2       	ldi	r30, 0x26	; 38
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	84 60       	ori	r24, 0x04	; 4
    2b16:	8c 93       	st	X, r24
    2b18:	a6 e2       	ldi	r26, 0x26	; 38
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e6 e2       	ldi	r30, 0x26	; 38
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	8d 7f       	andi	r24, 0xFD	; 253
    2b24:	8c 93       	st	X, r24
    2b26:	a6 e2       	ldi	r26, 0x26	; 38
    2b28:	b0 e0       	ldi	r27, 0x00	; 0
    2b2a:	e6 e2       	ldi	r30, 0x26	; 38
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
    2b30:	8e 7f       	andi	r24, 0xFE	; 254
    2b32:	8c 93       	st	X, r24
    2b34:	41 c0       	rjmp	.+130    	; 0x2bb8 <ADC_voidInit+0x276>
case ADC_DEVISION_FACTOR_32: SET_BIT(ADCSRA,2);CLR_BIT(ADCSRA,1);SET_BIT(ADCSRA,0);break;
    2b36:	a6 e2       	ldi	r26, 0x26	; 38
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e6 e2       	ldi	r30, 0x26	; 38
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	84 60       	ori	r24, 0x04	; 4
    2b42:	8c 93       	st	X, r24
    2b44:	a6 e2       	ldi	r26, 0x26	; 38
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e6 e2       	ldi	r30, 0x26	; 38
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	8d 7f       	andi	r24, 0xFD	; 253
    2b50:	8c 93       	st	X, r24
    2b52:	a6 e2       	ldi	r26, 0x26	; 38
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e6 e2       	ldi	r30, 0x26	; 38
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	81 60       	ori	r24, 0x01	; 1
    2b5e:	8c 93       	st	X, r24
    2b60:	2b c0       	rjmp	.+86     	; 0x2bb8 <ADC_voidInit+0x276>
case ADC_DEVISION_FACTOR_64: SET_BIT(ADCSRA,2);SET_BIT(ADCSRA,1);CLR_BIT(ADCSRA,0);break;
    2b62:	a6 e2       	ldi	r26, 0x26	; 38
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e6 e2       	ldi	r30, 0x26	; 38
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	84 60       	ori	r24, 0x04	; 4
    2b6e:	8c 93       	st	X, r24
    2b70:	a6 e2       	ldi	r26, 0x26	; 38
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	e6 e2       	ldi	r30, 0x26	; 38
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	82 60       	ori	r24, 0x02	; 2
    2b7c:	8c 93       	st	X, r24
    2b7e:	a6 e2       	ldi	r26, 0x26	; 38
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e6 e2       	ldi	r30, 0x26	; 38
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	8e 7f       	andi	r24, 0xFE	; 254
    2b8a:	8c 93       	st	X, r24
    2b8c:	15 c0       	rjmp	.+42     	; 0x2bb8 <ADC_voidInit+0x276>
case ADC_DEVISION_FACTOR_128: SET_BIT(ADCSRA,2);SET_BIT(ADCSRA,1);SET_BIT(ADCSRA,0);break;
    2b8e:	a6 e2       	ldi	r26, 0x26	; 38
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e6 e2       	ldi	r30, 0x26	; 38
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	84 60       	ori	r24, 0x04	; 4
    2b9a:	8c 93       	st	X, r24
    2b9c:	a6 e2       	ldi	r26, 0x26	; 38
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e6 e2       	ldi	r30, 0x26	; 38
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	82 60       	ori	r24, 0x02	; 2
    2ba8:	8c 93       	st	X, r24
    2baa:	a6 e2       	ldi	r26, 0x26	; 38
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e6 e2       	ldi	r30, 0x26	; 38
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	81 60       	ori	r24, 0x01	; 1
    2bb6:	8c 93       	st	X, r24

  }


SET_BIT(ADCSRA,7); //enable ADC
    2bb8:	a6 e2       	ldi	r26, 0x26	; 38
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e6 e2       	ldi	r30, 0x26	; 38
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	80 68       	ori	r24, 0x80	; 128
    2bc4:	8c 93       	st	X, r24



}
    2bc6:	28 96       	adiw	r28, 0x08	; 8
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	de bf       	out	0x3e, r29	; 62
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	cf 91       	pop	r28
    2bd4:	df 91       	pop	r29
    2bd6:	08 95       	ret

00002bd8 <ADC_voidRead>:

void ADC_voidRead(ADC_str * Add_strPointerADC,u16 *Add_u16ADCvalue)
{
    2bd8:	df 93       	push	r29
    2bda:	cf 93       	push	r28
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <ADC_voidRead+0x6>
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <ADC_voidRead+0x8>
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <ADC_voidRead+0xa>
    2be2:	cd b7       	in	r28, 0x3d	; 61
    2be4:	de b7       	in	r29, 0x3e	; 62
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
    2bea:	7c 83       	std	Y+4, r23	; 0x04
    2bec:	6b 83       	std	Y+3, r22	; 0x03
	switch( Add_strPointerADC->pin_Id)
    2bee:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf2:	80 81       	ld	r24, Z
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	3e 83       	std	Y+6, r19	; 0x06
    2bfa:	2d 83       	std	Y+5, r18	; 0x05
    2bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2c00:	83 30       	cpi	r24, 0x03	; 3
    2c02:	91 05       	cpc	r25, r1
    2c04:	d9 f1       	breq	.+118    	; 0x2c7c <ADC_voidRead+0xa4>
    2c06:	2d 81       	ldd	r18, Y+5	; 0x05
    2c08:	3e 81       	ldd	r19, Y+6	; 0x06
    2c0a:	24 30       	cpi	r18, 0x04	; 4
    2c0c:	31 05       	cpc	r19, r1
    2c0e:	7c f4       	brge	.+30     	; 0x2c2e <ADC_voidRead+0x56>
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	81 30       	cpi	r24, 0x01	; 1
    2c16:	91 05       	cpc	r25, r1
    2c18:	09 f1       	breq	.+66     	; 0x2c5c <ADC_voidRead+0x84>
    2c1a:	2d 81       	ldd	r18, Y+5	; 0x05
    2c1c:	3e 81       	ldd	r19, Y+6	; 0x06
    2c1e:	22 30       	cpi	r18, 0x02	; 2
    2c20:	31 05       	cpc	r19, r1
    2c22:	24 f5       	brge	.+72     	; 0x2c6c <ADC_voidRead+0x94>
    2c24:	8d 81       	ldd	r24, Y+5	; 0x05
    2c26:	9e 81       	ldd	r25, Y+6	; 0x06
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	89 f0       	breq	.+34     	; 0x2c4e <ADC_voidRead+0x76>
    2c2c:	46 c0       	rjmp	.+140    	; 0x2cba <ADC_voidRead+0xe2>
    2c2e:	2d 81       	ldd	r18, Y+5	; 0x05
    2c30:	3e 81       	ldd	r19, Y+6	; 0x06
    2c32:	25 30       	cpi	r18, 0x05	; 5
    2c34:	31 05       	cpc	r19, r1
    2c36:	91 f1       	breq	.+100    	; 0x2c9c <ADC_voidRead+0xc4>
    2c38:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3c:	85 30       	cpi	r24, 0x05	; 5
    2c3e:	91 05       	cpc	r25, r1
    2c40:	2c f1       	brlt	.+74     	; 0x2c8c <ADC_voidRead+0xb4>
    2c42:	2d 81       	ldd	r18, Y+5	; 0x05
    2c44:	3e 81       	ldd	r19, Y+6	; 0x06
    2c46:	26 30       	cpi	r18, 0x06	; 6
    2c48:	31 05       	cpc	r19, r1
    2c4a:	81 f1       	breq	.+96     	; 0x2cac <ADC_voidRead+0xd4>
    2c4c:	36 c0       	rjmp	.+108    	; 0x2cba <ADC_voidRead+0xe2>
	  {
	case ADC_0: ADMUX|=ADC_0; break;
    2c4e:	e7 e2       	ldi	r30, 0x27	; 39
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	a7 e2       	ldi	r26, 0x27	; 39
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	8c 91       	ld	r24, X
    2c58:	80 83       	st	Z, r24
    2c5a:	2f c0       	rjmp	.+94     	; 0x2cba <ADC_voidRead+0xe2>
	case ADC_1: ADMUX|=ADC_1; break;
    2c5c:	a7 e2       	ldi	r26, 0x27	; 39
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e7 e2       	ldi	r30, 0x27	; 39
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	81 60       	ori	r24, 0x01	; 1
    2c68:	8c 93       	st	X, r24
    2c6a:	27 c0       	rjmp	.+78     	; 0x2cba <ADC_voidRead+0xe2>
	case ADC_2: ADMUX|=ADC_2; break;
    2c6c:	a7 e2       	ldi	r26, 0x27	; 39
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	e7 e2       	ldi	r30, 0x27	; 39
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	82 60       	ori	r24, 0x02	; 2
    2c78:	8c 93       	st	X, r24
    2c7a:	1f c0       	rjmp	.+62     	; 0x2cba <ADC_voidRead+0xe2>
	case ADC_3: ADMUX|=ADC_3; break;
    2c7c:	a7 e2       	ldi	r26, 0x27	; 39
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e7 e2       	ldi	r30, 0x27	; 39
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	83 60       	ori	r24, 0x03	; 3
    2c88:	8c 93       	st	X, r24
    2c8a:	17 c0       	rjmp	.+46     	; 0x2cba <ADC_voidRead+0xe2>
	case ADC_4: ADMUX|=ADC_4; break;
    2c8c:	a7 e2       	ldi	r26, 0x27	; 39
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	e7 e2       	ldi	r30, 0x27	; 39
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	84 60       	ori	r24, 0x04	; 4
    2c98:	8c 93       	st	X, r24
    2c9a:	0f c0       	rjmp	.+30     	; 0x2cba <ADC_voidRead+0xe2>
	case ADC_5: ADMUX|=ADC_5; break;
    2c9c:	a7 e2       	ldi	r26, 0x27	; 39
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e7 e2       	ldi	r30, 0x27	; 39
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	85 60       	ori	r24, 0x05	; 5
    2ca8:	8c 93       	st	X, r24
    2caa:	07 c0       	rjmp	.+14     	; 0x2cba <ADC_voidRead+0xe2>
	case ADC_6: ADMUX|=ADC_6; break;
    2cac:	a7 e2       	ldi	r26, 0x27	; 39
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e7 e2       	ldi	r30, 0x27	; 39
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	86 60       	ori	r24, 0x06	; 6
    2cb8:	8c 93       	st	X, r24

	  }

//to start single conversion

	SET_BIT(ADCSRA,6);
    2cba:	a6 e2       	ldi	r26, 0x26	; 38
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e6 e2       	ldi	r30, 0x26	; 38
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 64       	ori	r24, 0x40	; 64
    2cc6:	8c 93       	st	X, r24


	while(GET_BIT(ADCSRA,6)==1 )
    2cc8:	e6 e2       	ldi	r30, 0x26	; 38
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	82 95       	swap	r24
    2cd0:	86 95       	lsr	r24
    2cd2:	86 95       	lsr	r24
    2cd4:	83 70       	andi	r24, 0x03	; 3
    2cd6:	88 2f       	mov	r24, r24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	81 70       	andi	r24, 0x01	; 1
    2cdc:	90 70       	andi	r25, 0x00	; 0
    2cde:	88 23       	and	r24, r24
    2ce0:	99 f7       	brne	.-26     	; 0x2cc8 <ADC_voidRead+0xf0>


	}


		*Add_u16ADCvalue=ADC;
    2ce2:	e4 e2       	ldi	r30, 0x24	; 36
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	91 81       	ldd	r25, Z+1	; 0x01
    2cea:	eb 81       	ldd	r30, Y+3	; 0x03
    2cec:	fc 81       	ldd	r31, Y+4	; 0x04
    2cee:	91 83       	std	Z+1, r25	; 0x01
    2cf0:	80 83       	st	Z, r24


}
    2cf2:	26 96       	adiw	r28, 0x06	; 6
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <ADC_voidDisable>:
/////////
void ADC_voidDisable(void)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,7); //Disable ADC
    2d0c:	a6 e2       	ldi	r26, 0x26	; 38
    2d0e:	b0 e0       	ldi	r27, 0x00	; 0
    2d10:	e6 e2       	ldi	r30, 0x26	; 38
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	8f 77       	andi	r24, 0x7F	; 127
    2d18:	8c 93       	st	X, r24
}
    2d1a:	cf 91       	pop	r28
    2d1c:	df 91       	pop	r29
    2d1e:	08 95       	ret

00002d20 <SWITCH_voidSetSwitchDir>:
#include "../../../INCLUDE/HAL/SWITCH/Switch_prv.h"
#include "../../../SERVICES/bit_utilies.h"


void SWITCH_voidSetSwitchDir(Switch_str *Add_strPtrswitch)
{
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	00 d0       	rcall	.+0      	; 0x2d26 <SWITCH_voidSetSwitchDir+0x6>
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01

DIO_enuSetPinDirection(Add_strPtrswitch->portId,Add_strPtrswitch->pinId,DIO_u8_INPUT);
    2d2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d30:	fa 81       	ldd	r31, Y+2	; 0x02
    2d32:	80 81       	ld	r24, Z
    2d34:	e9 81       	ldd	r30, Y+1	; 0x01
    2d36:	fa 81       	ldd	r31, Y+2	; 0x02
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	69 2f       	mov	r22, r25
    2d3c:	40 e0       	ldi	r20, 0x00	; 0
    2d3e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <DIO_enuSetPinDirection>

DIO_enuSetPinValue(Add_strPtrswitch->portId,Add_strPtrswitch->pinId,DIO_u8_HIGH); //TO BECOME PULLUP
    2d42:	e9 81       	ldd	r30, Y+1	; 0x01
    2d44:	fa 81       	ldd	r31, Y+2	; 0x02
    2d46:	80 81       	ld	r24, Z
    2d48:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	69 2f       	mov	r22, r25
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>

}
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <SWITCH_voidSetSwitchRead>:



u8 SWITCH_voidSetSwitchRead(Switch_str *Add_strPtrswitch){
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <SWITCH_voidSetSwitchRead+0x6>
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	9a 83       	std	Y+2, r25	; 0x02
    2d6c:	89 83       	std	Y+1, r24	; 0x01




return DIO_u8GetPinValue(Add_strPtrswitch->portId,Add_strPtrswitch->pinId);
    2d6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d70:	fa 81       	ldd	r31, Y+2	; 0x02
    2d72:	80 81       	ld	r24, Z
    2d74:	e9 81       	ldd	r30, Y+1	; 0x01
    2d76:	fa 81       	ldd	r31, Y+2	; 0x02
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	69 2f       	mov	r22, r25
    2d7c:	0e 94 87 13 	call	0x270e	; 0x270e <DIO_u8GetPinValue>
}
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	08 95       	ret

00002d8a <SEGMENT_voidSetSegmentDir>:
#include "../../../INCLUDE/HAL/SEGMENT/Segment.h"
#include "../../../INCLUDE/MCAL/DIO/Dio.h"
#include "../../../INCLUDE/HAL/SEGMENT/Segment_prv.h"
#include "../../../SERVICES/bit_utilies.h"

void SEGMENT_voidSetSegmentDir(segment_str *Copy_segmentStrPointer){
    2d8a:	df 93       	push	r29
    2d8c:	cf 93       	push	r28
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <SEGMENT_voidSetSegmentDir+0x6>
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
    2d94:	9a 83       	std	Y+2, r25	; 0x02
    2d96:	89 83       	std	Y+1, r24	; 0x01

DIO_enuSetPortDirection(Copy_segmentStrPointer->portId,DIO_u8_PORT_OUTPUT);
    2d98:	e9 81       	ldd	r30, Y+1	; 0x01
    2d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9c:	80 81       	ld	r24, Z
    2d9e:	6f ef       	ldi	r22, 0xFF	; 255
    2da0:	0e 94 0b 14 	call	0x2816	; 0x2816 <DIO_enuSetPortDirection>


}
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <SEGMENT_voidSetSegmentVal>:

void SEGMENT_voidSetSegmentVal(segment_str *Add_segmentStrPointer,u8 Copy_segmentVal){
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	00 d0       	rcall	.+0      	; 0x2db4 <SEGMENT_voidSetSegmentVal+0x6>
    2db4:	0f 92       	push	r0
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	9a 83       	std	Y+2, r25	; 0x02
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    2dbe:	6b 83       	std	Y+3, r22	; 0x03

	if( Add_segmentStrPointer->segmentType == SEGMENT_COMMON_CATHOD)
    2dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc4:	81 81       	ldd	r24, Z+1	; 0x01
    2dc6:	81 30       	cpi	r24, 0x01	; 1
    2dc8:	39 f4       	brne	.+14     	; 0x2dd8 <SEGMENT_voidSetSegmentVal+0x2a>
	{
		DIO_enuSetPortValue(Add_segmentStrPointer->portId,Copy_segmentVal);
    2dca:	e9 81       	ldd	r30, Y+1	; 0x01
    2dcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2dce:	80 81       	ld	r24, Z
    2dd0:	6b 81       	ldd	r22, Y+3	; 0x03
    2dd2:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>
    2dd6:	0f c0       	rjmp	.+30     	; 0x2df6 <SEGMENT_voidSetSegmentVal+0x48>

	}

	else if(Add_segmentStrPointer->segmentType == SEGMENT_COMMON_ANODE)
    2dd8:	e9 81       	ldd	r30, Y+1	; 0x01
    2dda:	fa 81       	ldd	r31, Y+2	; 0x02
    2ddc:	81 81       	ldd	r24, Z+1	; 0x01
    2dde:	88 23       	and	r24, r24
    2de0:	51 f4       	brne	.+20     	; 0x2df6 <SEGMENT_voidSetSegmentVal+0x48>

	{

		DIO_enuSetPortValue(Add_segmentStrPointer->portId,~(Copy_segmentVal));
    2de2:	e9 81       	ldd	r30, Y+1	; 0x01
    2de4:	fa 81       	ldd	r31, Y+2	; 0x02
    2de6:	20 81       	ld	r18, Z
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	98 2f       	mov	r25, r24
    2dec:	90 95       	com	r25
    2dee:	82 2f       	mov	r24, r18
    2df0:	69 2f       	mov	r22, r25
    2df2:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>

	}


}
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <Led_voidSetLedDir>:
 */
#include "../../../INCLUDE/HAL/LED/Led.h"
#include "../../../INCLUDE/MCAL/DIO/Dio.h"
#include "../../../SERVICES/bit_utilies.h"

void Led_voidSetLedDir(Led_str * Add_ledStrPointer){
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <Led_voidSetLedDir+0x6>
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
 DIO_enuSetPinDirection(Add_ledStrPointer -> portId ,Add_ledStrPointer-> pinId,DIO_u8_OUTPUT);
    2e10:	e9 81       	ldd	r30, Y+1	; 0x01
    2e12:	fa 81       	ldd	r31, Y+2	; 0x02
    2e14:	80 81       	ld	r24, Z
    2e16:	e9 81       	ldd	r30, Y+1	; 0x01
    2e18:	fa 81       	ldd	r31, Y+2	; 0x02
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	69 2f       	mov	r22, r25
    2e1e:	41 e0       	ldi	r20, 0x01	; 1
    2e20:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <DIO_enuSetPinDirection>

}
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <Led_voidTurnOn>:


void Led_voidTurnOn(Led_str *Add_ledStrPointer){
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	00 d0       	rcall	.+0      	; 0x2e34 <Led_voidTurnOn+0x6>
    2e34:	cd b7       	in	r28, 0x3d	; 61
    2e36:	de b7       	in	r29, 0x3e	; 62
    2e38:	9a 83       	std	Y+2, r25	; 0x02
    2e3a:	89 83       	std	Y+1, r24	; 0x01

	if (Add_ledStrPointer->Active_State == LED_u8_Active_High)
    2e3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	81 30       	cpi	r24, 0x01	; 1
    2e44:	79 f4       	brne	.+30     	; 0x2e64 <Led_voidTurnOn+0x36>

	{

		DIO_enuSetPinValue(Add_ledStrPointer -> portId ,Add_ledStrPointer-> pinId, LED_u8_Active_High_H);
    2e46:	e9 81       	ldd	r30, Y+1	; 0x01
    2e48:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4a:	80 81       	ld	r24, Z
    2e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e50:	91 81       	ldd	r25, Z+1	; 0x01
    2e52:	69 2f       	mov	r22, r25
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>
				Add_ledStrPointer->Curent_State=LED_u8_Active_High_H;
    2e5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	83 83       	std	Z+3, r24	; 0x03
    2e62:	12 c0       	rjmp	.+36     	; 0x2e88 <Led_voidTurnOn+0x5a>

	}


	else if(Add_ledStrPointer->Active_State == LED_u8_Active_Low)
    2e64:	e9 81       	ldd	r30, Y+1	; 0x01
    2e66:	fa 81       	ldd	r31, Y+2	; 0x02
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	88 23       	and	r24, r24
    2e6c:	69 f4       	brne	.+26     	; 0x2e88 <Led_voidTurnOn+0x5a>
	{

		DIO_enuSetPinValue(Add_ledStrPointer -> portId ,Add_ledStrPointer-> pinId, LED_u8_Active_Low_H);
    2e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2e70:	fa 81       	ldd	r31, Y+2	; 0x02
    2e72:	80 81       	ld	r24, Z
    2e74:	e9 81       	ldd	r30, Y+1	; 0x01
    2e76:	fa 81       	ldd	r31, Y+2	; 0x02
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	69 2f       	mov	r22, r25
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>
						Add_ledStrPointer->Curent_State=LED_u8_Active_Low_H;
    2e82:	e9 81       	ldd	r30, Y+1	; 0x01
    2e84:	fa 81       	ldd	r31, Y+2	; 0x02
    2e86:	13 82       	std	Z+3, r1	; 0x03


	}

}
    2e88:	0f 90       	pop	r0
    2e8a:	0f 90       	pop	r0
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <Led_voidTurnOff>:



void Led_voidTurnOff(Led_str *Add_ledStrPointer){
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	00 d0       	rcall	.+0      	; 0x2e98 <Led_voidTurnOff+0x6>
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	9a 83       	std	Y+2, r25	; 0x02
    2e9e:	89 83       	std	Y+1, r24	; 0x01

	if (Add_ledStrPointer->Active_State == LED_u8_Active_High)
    2ea0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea4:	82 81       	ldd	r24, Z+2	; 0x02
    2ea6:	81 30       	cpi	r24, 0x01	; 1
    2ea8:	71 f4       	brne	.+28     	; 0x2ec6 <Led_voidTurnOff+0x34>

	{

		DIO_enuSetPinValue(Add_ledStrPointer -> portId ,Add_ledStrPointer-> pinId, LED_u8_Active_High_L);
    2eaa:	e9 81       	ldd	r30, Y+1	; 0x01
    2eac:	fa 81       	ldd	r31, Y+2	; 0x02
    2eae:	80 81       	ld	r24, Z
    2eb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb4:	91 81       	ldd	r25, Z+1	; 0x01
    2eb6:	69 2f       	mov	r22, r25
    2eb8:	40 e0       	ldi	r20, 0x00	; 0
    2eba:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>
				Add_ledStrPointer->Curent_State=LED_u8_Active_High_L ;
    2ebe:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec2:	13 82       	std	Z+3, r1	; 0x03
    2ec4:	13 c0       	rjmp	.+38     	; 0x2eec <Led_voidTurnOff+0x5a>

	}


	else if(Add_ledStrPointer->Active_State == LED_u8_Active_Low)
    2ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eca:	82 81       	ldd	r24, Z+2	; 0x02
    2ecc:	88 23       	and	r24, r24
    2ece:	71 f4       	brne	.+28     	; 0x2eec <Led_voidTurnOff+0x5a>
	{

		DIO_enuSetPinValue(Add_ledStrPointer -> portId ,Add_ledStrPointer-> pinId, LED_u8_Active_Low_L);
    2ed0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed4:	80 81       	ld	r24, Z
    2ed6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	69 2f       	mov	r22, r25
    2ede:	41 e0       	ldi	r20, 0x01	; 1
    2ee0:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>
						Add_ledStrPointer->Curent_State=LED_u8_Active_Low_L;
    2ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	83 83       	std	Z+3, r24	; 0x03


	}

}
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <Led_voidToggle>:


void Led_voidToggle(Led_str *Add_ledStrPointer){
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <Led_voidToggle+0x6>
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	9a 83       	std	Y+2, r25	; 0x02
    2f02:	89 83       	std	Y+1, r24	; 0x01


	if (Add_ledStrPointer->Active_State == LED_u8_Active_High)
    2f04:	e9 81       	ldd	r30, Y+1	; 0x01
    2f06:	fa 81       	ldd	r31, Y+2	; 0x02
    2f08:	82 81       	ldd	r24, Z+2	; 0x02
    2f0a:	81 30       	cpi	r24, 0x01	; 1
    2f0c:	39 f5       	brne	.+78     	; 0x2f5c <Led_voidToggle+0x66>

	{

		if(Add_ledStrPointer->Curent_State==LED_u8_Active_High_L)
    2f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f10:	fa 81       	ldd	r31, Y+2	; 0x02
    2f12:	83 81       	ldd	r24, Z+3	; 0x03
    2f14:	88 23       	and	r24, r24
    2f16:	79 f4       	brne	.+30     	; 0x2f36 <Led_voidToggle+0x40>


		{

			DIO_enuSetPinValue(Add_ledStrPointer -> portId ,Add_ledStrPointer-> pinId, LED_u8_Active_High_H);
    2f18:	e9 81       	ldd	r30, Y+1	; 0x01
    2f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1c:	80 81       	ld	r24, Z
    2f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f20:	fa 81       	ldd	r31, Y+2	; 0x02
    2f22:	91 81       	ldd	r25, Z+1	; 0x01
    2f24:	69 2f       	mov	r22, r25
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>


									Add_ledStrPointer->Curent_State=LED_u8_Active_High_H;
    2f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	83 83       	std	Z+3, r24	; 0x03
    2f34:	3e c0       	rjmp	.+124    	; 0x2fb2 <Led_voidToggle+0xbc>

		}



   else if(Add_ledStrPointer->Curent_State==LED_u8_Active_High_H)
    2f36:	e9 81       	ldd	r30, Y+1	; 0x01
    2f38:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3a:	83 81       	ldd	r24, Z+3	; 0x03
    2f3c:	81 30       	cpi	r24, 0x01	; 1
    2f3e:	c9 f5       	brne	.+114    	; 0x2fb2 <Led_voidToggle+0xbc>


				{

					DIO_enuSetPinValue(Add_ledStrPointer -> portId ,Add_ledStrPointer-> pinId, LED_u8_Active_High_L);
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	80 81       	ld	r24, Z
    2f46:	e9 81       	ldd	r30, Y+1	; 0x01
    2f48:	fa 81       	ldd	r31, Y+2	; 0x02
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	69 2f       	mov	r22, r25
    2f4e:	40 e0       	ldi	r20, 0x00	; 0
    2f50:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>


											Add_ledStrPointer->Curent_State=LED_u8_Active_High_L;
    2f54:	e9 81       	ldd	r30, Y+1	; 0x01
    2f56:	fa 81       	ldd	r31, Y+2	; 0x02
    2f58:	13 82       	std	Z+3, r1	; 0x03
    2f5a:	2b c0       	rjmp	.+86     	; 0x2fb2 <Led_voidToggle+0xbc>


	}

	/// FOR ACTIVE LOW
	else if (Add_ledStrPointer->Active_State == LED_u8_Active_Low)
    2f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f60:	82 81       	ldd	r24, Z+2	; 0x02
    2f62:	88 23       	and	r24, r24
    2f64:	31 f5       	brne	.+76     	; 0x2fb2 <Led_voidToggle+0xbc>

		{

			if(Add_ledStrPointer->Curent_State==LED_u8_Active_Low_L)
    2f66:	e9 81       	ldd	r30, Y+1	; 0x01
    2f68:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6a:	83 81       	ldd	r24, Z+3	; 0x03
    2f6c:	81 30       	cpi	r24, 0x01	; 1
    2f6e:	71 f4       	brne	.+28     	; 0x2f8c <Led_voidToggle+0x96>


			{

				DIO_enuSetPinValue(Add_ledStrPointer -> portId ,Add_ledStrPointer-> pinId, LED_u8_Active_Low_H);
    2f70:	e9 81       	ldd	r30, Y+1	; 0x01
    2f72:	fa 81       	ldd	r31, Y+2	; 0x02
    2f74:	80 81       	ld	r24, Z
    2f76:	e9 81       	ldd	r30, Y+1	; 0x01
    2f78:	fa 81       	ldd	r31, Y+2	; 0x02
    2f7a:	91 81       	ldd	r25, Z+1	; 0x01
    2f7c:	69 2f       	mov	r22, r25
    2f7e:	40 e0       	ldi	r20, 0x00	; 0
    2f80:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>


										Add_ledStrPointer->Curent_State=LED_u8_Active_Low_H;
    2f84:	e9 81       	ldd	r30, Y+1	; 0x01
    2f86:	fa 81       	ldd	r31, Y+2	; 0x02
    2f88:	13 82       	std	Z+3, r1	; 0x03
    2f8a:	13 c0       	rjmp	.+38     	; 0x2fb2 <Led_voidToggle+0xbc>

			}



			else if(Add_ledStrPointer->Curent_State==LED_u8_Active_Low_H)
    2f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f90:	83 81       	ldd	r24, Z+3	; 0x03
    2f92:	88 23       	and	r24, r24
    2f94:	71 f4       	brne	.+28     	; 0x2fb2 <Led_voidToggle+0xbc>


					{

						DIO_enuSetPinValue(Add_ledStrPointer -> portId ,Add_ledStrPointer-> pinId, LED_u8_Active_Low_L);
    2f96:	e9 81       	ldd	r30, Y+1	; 0x01
    2f98:	fa 81       	ldd	r31, Y+2	; 0x02
    2f9a:	80 81       	ld	r24, Z
    2f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa0:	91 81       	ldd	r25, Z+1	; 0x01
    2fa2:	69 2f       	mov	r22, r25
    2fa4:	41 e0       	ldi	r20, 0x01	; 1
    2fa6:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>


												Add_ledStrPointer->Curent_State=LED_u8_Active_Low_L;
    2faa:	e9 81       	ldd	r30, Y+1	; 0x01
    2fac:	fa 81       	ldd	r31, Y+2	; 0x02
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	83 83       	std	Z+3, r24	; 0x03





}
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <Lcd_vidEnablePulse>:
 */
#include "../../../INCLUDE/HAL/Lcd/Lcd.h"
#include "../../../INCLUDE/MCAL/DIO/DIO.h"
#include"../../../SERVICES/std_types.h"
#include "util/delay.h"
void Lcd_vidEnablePulse(Lcd_tstrucCfg*Add_strucLcd){
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	60 97       	sbiw	r28, 0x10	; 16
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	98 8b       	std	Y+16, r25	; 0x10
    2fd2:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->EN_Pin,DIO_u8_HIGH);
    2fd4:	ef 85       	ldd	r30, Y+15	; 0x0f
    2fd6:	f8 89       	ldd	r31, Y+16	; 0x10
    2fd8:	81 81       	ldd	r24, Z+1	; 0x01
    2fda:	ef 85       	ldd	r30, Y+15	; 0x0f
    2fdc:	f8 89       	ldd	r31, Y+16	; 0x10
    2fde:	94 81       	ldd	r25, Z+4	; 0x04
    2fe0:	69 2f       	mov	r22, r25
    2fe2:	41 e0       	ldi	r20, 0x01	; 1
    2fe4:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	a0 e0       	ldi	r26, 0x00	; 0
    2fee:	b0 e4       	ldi	r27, 0x40	; 64
    2ff0:	8b 87       	std	Y+11, r24	; 0x0b
    2ff2:	9c 87       	std	Y+12, r25	; 0x0c
    2ff4:	ad 87       	std	Y+13, r26	; 0x0d
    2ff6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	4a ef       	ldi	r20, 0xFA	; 250
    3006:	54 e4       	ldi	r21, 0x44	; 68
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	8f 83       	std	Y+7, r24	; 0x07
    3012:	98 87       	std	Y+8, r25	; 0x08
    3014:	a9 87       	std	Y+9, r26	; 0x09
    3016:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e8       	ldi	r20, 0x80	; 128
    3026:	5f e3       	ldi	r21, 0x3F	; 63
    3028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    302c:	88 23       	and	r24, r24
    302e:	2c f4       	brge	.+10     	; 0x303a <Lcd_vidEnablePulse+0x7e>
		__ticks = 1;
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	9e 83       	std	Y+6, r25	; 0x06
    3036:	8d 83       	std	Y+5, r24	; 0x05
    3038:	3f c0       	rjmp	.+126    	; 0x30b8 <Lcd_vidEnablePulse+0xfc>
	else if (__tmp > 65535)
    303a:	6f 81       	ldd	r22, Y+7	; 0x07
    303c:	78 85       	ldd	r23, Y+8	; 0x08
    303e:	89 85       	ldd	r24, Y+9	; 0x09
    3040:	9a 85       	ldd	r25, Y+10	; 0x0a
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	3f ef       	ldi	r19, 0xFF	; 255
    3046:	4f e7       	ldi	r20, 0x7F	; 127
    3048:	57 e4       	ldi	r21, 0x47	; 71
    304a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    304e:	18 16       	cp	r1, r24
    3050:	4c f5       	brge	.+82     	; 0x30a4 <Lcd_vidEnablePulse+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3052:	6b 85       	ldd	r22, Y+11	; 0x0b
    3054:	7c 85       	ldd	r23, Y+12	; 0x0c
    3056:	8d 85       	ldd	r24, Y+13	; 0x0d
    3058:	9e 85       	ldd	r25, Y+14	; 0x0e
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e2       	ldi	r20, 0x20	; 32
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	bc 01       	movw	r22, r24
    306c:	cd 01       	movw	r24, r26
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	9e 83       	std	Y+6, r25	; 0x06
    3078:	8d 83       	std	Y+5, r24	; 0x05
    307a:	0f c0       	rjmp	.+30     	; 0x309a <Lcd_vidEnablePulse+0xde>
    307c:	88 ec       	ldi	r24, 0xC8	; 200
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9c 83       	std	Y+4, r25	; 0x04
    3082:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3084:	8b 81       	ldd	r24, Y+3	; 0x03
    3086:	9c 81       	ldd	r25, Y+4	; 0x04
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <Lcd_vidEnablePulse+0xcc>
    308c:	9c 83       	std	Y+4, r25	; 0x04
    308e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	01 97       	sbiw	r24, 0x01	; 1
    3096:	9e 83       	std	Y+6, r25	; 0x06
    3098:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309a:	8d 81       	ldd	r24, Y+5	; 0x05
    309c:	9e 81       	ldd	r25, Y+6	; 0x06
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	69 f7       	brne	.-38     	; 0x307c <Lcd_vidEnablePulse+0xc0>
    30a2:	14 c0       	rjmp	.+40     	; 0x30cc <Lcd_vidEnablePulse+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a4:	6f 81       	ldd	r22, Y+7	; 0x07
    30a6:	78 85       	ldd	r23, Y+8	; 0x08
    30a8:	89 85       	ldd	r24, Y+9	; 0x09
    30aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9e 83       	std	Y+6, r25	; 0x06
    30b6:	8d 83       	std	Y+5, r24	; 0x05
    30b8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ba:	9e 81       	ldd	r25, Y+6	; 0x06
    30bc:	9a 83       	std	Y+2, r25	; 0x02
    30be:	89 83       	std	Y+1, r24	; 0x01
    30c0:	89 81       	ldd	r24, Y+1	; 0x01
    30c2:	9a 81       	ldd	r25, Y+2	; 0x02
    30c4:	01 97       	sbiw	r24, 0x01	; 1
    30c6:	f1 f7       	brne	.-4      	; 0x30c4 <Lcd_vidEnablePulse+0x108>
    30c8:	9a 83       	std	Y+2, r25	; 0x02
    30ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->EN_Pin,DIO_u8_LOW);
    30cc:	ef 85       	ldd	r30, Y+15	; 0x0f
    30ce:	f8 89       	ldd	r31, Y+16	; 0x10
    30d0:	81 81       	ldd	r24, Z+1	; 0x01
    30d2:	ef 85       	ldd	r30, Y+15	; 0x0f
    30d4:	f8 89       	ldd	r31, Y+16	; 0x10
    30d6:	94 81       	ldd	r25, Z+4	; 0x04
    30d8:	69 2f       	mov	r22, r25
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>
}
    30e0:	60 96       	adiw	r28, 0x10	; 16
    30e2:	0f b6       	in	r0, 0x3f	; 63
    30e4:	f8 94       	cli
    30e6:	de bf       	out	0x3e, r29	; 62
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	cd bf       	out	0x3d, r28	; 61
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <Lcd_vidSendCommand>:

//Send Command
void Lcd_vidSendCommand(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_CommandVal){
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <Lcd_vidSendCommand+0x6>
    30f8:	0f 92       	push	r0
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	9a 83       	std	Y+2, r25	; 0x02
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	6b 83       	std	Y+3, r22	; 0x03
	//RS
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->RS_Pin,DIO_u8_LOW);
    3104:	e9 81       	ldd	r30, Y+1	; 0x01
    3106:	fa 81       	ldd	r31, Y+2	; 0x02
    3108:	81 81       	ldd	r24, Z+1	; 0x01
    310a:	e9 81       	ldd	r30, Y+1	; 0x01
    310c:	fa 81       	ldd	r31, Y+2	; 0x02
    310e:	92 81       	ldd	r25, Z+2	; 0x02
    3110:	69 2f       	mov	r22, r25
    3112:	40 e0       	ldi	r20, 0x00	; 0
    3114:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>
	// Send Command
	DIO_enuSetPortValue(Add_strucLcd->DataPortId,Copy_CommandVal);
    3118:	e9 81       	ldd	r30, Y+1	; 0x01
    311a:	fa 81       	ldd	r31, Y+2	; 0x02
    311c:	80 81       	ld	r24, Z
    311e:	6b 81       	ldd	r22, Y+3	; 0x03
    3120:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>
	Lcd_vidEnablePulse(Add_strucLcd);
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	9a 81       	ldd	r25, Y+2	; 0x02
    3128:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <Lcd_vidEnablePulse>
}
    312c:	0f 90       	pop	r0
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <Lcd_vidSendData>:

//Send Data
void Lcd_vidSendData(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_DataVal){
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	00 d0       	rcall	.+0      	; 0x313e <Lcd_vidSendData+0x6>
    313e:	0f 92       	push	r0
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	9a 83       	std	Y+2, r25	; 0x02
    3146:	89 83       	std	Y+1, r24	; 0x01
    3148:	6b 83       	std	Y+3, r22	; 0x03
	//RS
	DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->RS_Pin,DIO_u8_HIGH);
    314a:	e9 81       	ldd	r30, Y+1	; 0x01
    314c:	fa 81       	ldd	r31, Y+2	; 0x02
    314e:	81 81       	ldd	r24, Z+1	; 0x01
    3150:	e9 81       	ldd	r30, Y+1	; 0x01
    3152:	fa 81       	ldd	r31, Y+2	; 0x02
    3154:	92 81       	ldd	r25, Z+2	; 0x02
    3156:	69 2f       	mov	r22, r25
    3158:	41 e0       	ldi	r20, 0x01	; 1
    315a:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>
	// Send Data
	DIO_enuSetPortValue(Add_strucLcd->DataPortId,Copy_DataVal);
    315e:	e9 81       	ldd	r30, Y+1	; 0x01
    3160:	fa 81       	ldd	r31, Y+2	; 0x02
    3162:	80 81       	ld	r24, Z
    3164:	6b 81       	ldd	r22, Y+3	; 0x03
    3166:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>
	Lcd_vidEnablePulse(Add_strucLcd);
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	9a 81       	ldd	r25, Y+2	; 0x02
    316e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <Lcd_vidEnablePulse>
}
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <Lcd_vidInit>:
// Init
void Lcd_vidInit(Lcd_tstrucCfg*Add_strucLcd){
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	ac 97       	sbiw	r28, 0x2c	; 44
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	9c a7       	std	Y+44, r25	; 0x2c
    3194:	8b a7       	std	Y+43, r24	; 0x2b
	///////////////////////////////////////////////////////////////////////////////////////////
	DIO_enuSetPinDirection(Add_strucLcd->CtrlPortId,Add_strucLcd->EN_Pin,DIO_u8_OUTPUT);//EN
    3196:	eb a5       	ldd	r30, Y+43	; 0x2b
    3198:	fc a5       	ldd	r31, Y+44	; 0x2c
    319a:	81 81       	ldd	r24, Z+1	; 0x01
    319c:	eb a5       	ldd	r30, Y+43	; 0x2b
    319e:	fc a5       	ldd	r31, Y+44	; 0x2c
    31a0:	94 81       	ldd	r25, Z+4	; 0x04
    31a2:	69 2f       	mov	r22, r25
    31a4:	41 e0       	ldi	r20, 0x01	; 1
    31a6:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(Add_strucLcd->CtrlPortId,Add_strucLcd->RS_Pin,DIO_u8_OUTPUT);//RS
    31aa:	eb a5       	ldd	r30, Y+43	; 0x2b
    31ac:	fc a5       	ldd	r31, Y+44	; 0x2c
    31ae:	81 81       	ldd	r24, Z+1	; 0x01
    31b0:	eb a5       	ldd	r30, Y+43	; 0x2b
    31b2:	fc a5       	ldd	r31, Y+44	; 0x2c
    31b4:	92 81       	ldd	r25, Z+2	; 0x02
    31b6:	69 2f       	mov	r22, r25
    31b8:	41 e0       	ldi	r20, 0x01	; 1
    31ba:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <DIO_enuSetPinDirection>
	//DIO_enuSetPinDirection(Add_strucLcd->CtrlPortId,Add_strucLcd->RW_Pin,DIO_u8_OUTPUT);//RW
	//DIO_enuSetPinValue(Add_strucLcd->CtrlPortId,Add_strucLcd->RW_Pin,DIO_u8_LOW);      // always write
	DIO_enuSetPortDirection(Add_strucLcd->DataPortId,DIO_u8_PORT_OUTPUT);//DataPort Direction
    31be:	eb a5       	ldd	r30, Y+43	; 0x2b
    31c0:	fc a5       	ldd	r31, Y+44	; 0x2c
    31c2:	80 81       	ld	r24, Z
    31c4:	6f ef       	ldi	r22, 0xFF	; 255
    31c6:	0e 94 0b 14 	call	0x2816	; 0x2816 <DIO_enuSetPortDirection>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a0 ef       	ldi	r26, 0xF0	; 240
    31d0:	b1 e4       	ldi	r27, 0x41	; 65
    31d2:	8f a3       	std	Y+39, r24	; 0x27
    31d4:	98 a7       	std	Y+40, r25	; 0x28
    31d6:	a9 a7       	std	Y+41, r26	; 0x29
    31d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	6f a1       	ldd	r22, Y+39	; 0x27
    31dc:	78 a5       	ldd	r23, Y+40	; 0x28
    31de:	89 a5       	ldd	r24, Y+41	; 0x29
    31e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4a ef       	ldi	r20, 0xFA	; 250
    31e8:	54 e4       	ldi	r21, 0x44	; 68
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8b a3       	std	Y+35, r24	; 0x23
    31f4:	9c a3       	std	Y+36, r25	; 0x24
    31f6:	ad a3       	std	Y+37, r26	; 0x25
    31f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31fa:	6b a1       	ldd	r22, Y+35	; 0x23
    31fc:	7c a1       	ldd	r23, Y+36	; 0x24
    31fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3200:	9e a1       	ldd	r25, Y+38	; 0x26
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <Lcd_vidInit+0x9e>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9a a3       	std	Y+34, r25	; 0x22
    3218:	89 a3       	std	Y+33, r24	; 0x21
    321a:	3f c0       	rjmp	.+126    	; 0x329a <Lcd_vidInit+0x11c>
	else if (__tmp > 65535)
    321c:	6b a1       	ldd	r22, Y+35	; 0x23
    321e:	7c a1       	ldd	r23, Y+36	; 0x24
    3220:	8d a1       	ldd	r24, Y+37	; 0x25
    3222:	9e a1       	ldd	r25, Y+38	; 0x26
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <Lcd_vidInit+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	6f a1       	ldd	r22, Y+39	; 0x27
    3236:	78 a5       	ldd	r23, Y+40	; 0x28
    3238:	89 a5       	ldd	r24, Y+41	; 0x29
    323a:	9a a5       	ldd	r25, Y+42	; 0x2a
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9a a3       	std	Y+34, r25	; 0x22
    325a:	89 a3       	std	Y+33, r24	; 0x21
    325c:	0f c0       	rjmp	.+30     	; 0x327c <Lcd_vidInit+0xfe>
    325e:	88 ec       	ldi	r24, 0xC8	; 200
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	98 a3       	std	Y+32, r25	; 0x20
    3264:	8f 8f       	std	Y+31, r24	; 0x1f
    3266:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3268:	98 a1       	ldd	r25, Y+32	; 0x20
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <Lcd_vidInit+0xec>
    326e:	98 a3       	std	Y+32, r25	; 0x20
    3270:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	89 a1       	ldd	r24, Y+33	; 0x21
    3274:	9a a1       	ldd	r25, Y+34	; 0x22
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9a a3       	std	Y+34, r25	; 0x22
    327a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	89 a1       	ldd	r24, Y+33	; 0x21
    327e:	9a a1       	ldd	r25, Y+34	; 0x22
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <Lcd_vidInit+0xe0>
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <Lcd_vidInit+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6b a1       	ldd	r22, Y+35	; 0x23
    3288:	7c a1       	ldd	r23, Y+36	; 0x24
    328a:	8d a1       	ldd	r24, Y+37	; 0x25
    328c:	9e a1       	ldd	r25, Y+38	; 0x26
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9a a3       	std	Y+34, r25	; 0x22
    3298:	89 a3       	std	Y+33, r24	; 0x21
    329a:	89 a1       	ldd	r24, Y+33	; 0x21
    329c:	9a a1       	ldd	r25, Y+34	; 0x22
    329e:	9e 8f       	std	Y+30, r25	; 0x1e
    32a0:	8d 8f       	std	Y+29, r24	; 0x1d
    32a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <Lcd_vidInit+0x128>
    32aa:	9e 8f       	std	Y+30, r25	; 0x1e
    32ac:	8d 8f       	std	Y+29, r24	; 0x1d
	///////////////////////////////////////////////////////////////////////////////////////////
	_delay_ms(30);
	//set
	Lcd_vidSendCommand(Add_strucLcd,0b00111000);
    32ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    32b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    32b2:	68 e3       	ldi	r22, 0x38	; 56
    32b4:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Lcd_vidSendCommand>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a0 e8       	ldi	r26, 0x80	; 128
    32be:	bf e3       	ldi	r27, 0x3F	; 63
    32c0:	89 8f       	std	Y+25, r24	; 0x19
    32c2:	9a 8f       	std	Y+26, r25	; 0x1a
    32c4:	ab 8f       	std	Y+27, r26	; 0x1b
    32c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c8:	69 8d       	ldd	r22, Y+25	; 0x19
    32ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a ef       	ldi	r20, 0xFA	; 250
    32d6:	54 e4       	ldi	r21, 0x44	; 68
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	8d 8b       	std	Y+21, r24	; 0x15
    32e2:	9e 8b       	std	Y+22, r25	; 0x16
    32e4:	af 8b       	std	Y+23, r26	; 0x17
    32e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ea:	7e 89       	ldd	r23, Y+22	; 0x16
    32ec:	8f 89       	ldd	r24, Y+23	; 0x17
    32ee:	98 8d       	ldd	r25, Y+24	; 0x18
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e8       	ldi	r20, 0x80	; 128
    32f6:	5f e3       	ldi	r21, 0x3F	; 63
    32f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32fc:	88 23       	and	r24, r24
    32fe:	2c f4       	brge	.+10     	; 0x330a <Lcd_vidInit+0x18c>
		__ticks = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	9c 8b       	std	Y+20, r25	; 0x14
    3306:	8b 8b       	std	Y+19, r24	; 0x13
    3308:	3f c0       	rjmp	.+126    	; 0x3388 <Lcd_vidInit+0x20a>
	else if (__tmp > 65535)
    330a:	6d 89       	ldd	r22, Y+21	; 0x15
    330c:	7e 89       	ldd	r23, Y+22	; 0x16
    330e:	8f 89       	ldd	r24, Y+23	; 0x17
    3310:	98 8d       	ldd	r25, Y+24	; 0x18
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	4f e7       	ldi	r20, 0x7F	; 127
    3318:	57 e4       	ldi	r21, 0x47	; 71
    331a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    331e:	18 16       	cp	r1, r24
    3320:	4c f5       	brge	.+82     	; 0x3374 <Lcd_vidInit+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3322:	69 8d       	ldd	r22, Y+25	; 0x19
    3324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e2       	ldi	r20, 0x20	; 32
    3330:	51 e4       	ldi	r21, 0x41	; 65
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9c 8b       	std	Y+20, r25	; 0x14
    3348:	8b 8b       	std	Y+19, r24	; 0x13
    334a:	0f c0       	rjmp	.+30     	; 0x336a <Lcd_vidInit+0x1ec>
    334c:	88 ec       	ldi	r24, 0xC8	; 200
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	9a 8b       	std	Y+18, r25	; 0x12
    3352:	89 8b       	std	Y+17, r24	; 0x11
    3354:	89 89       	ldd	r24, Y+17	; 0x11
    3356:	9a 89       	ldd	r25, Y+18	; 0x12
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <Lcd_vidInit+0x1da>
    335c:	9a 8b       	std	Y+18, r25	; 0x12
    335e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3360:	8b 89       	ldd	r24, Y+19	; 0x13
    3362:	9c 89       	ldd	r25, Y+20	; 0x14
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	9c 8b       	std	Y+20, r25	; 0x14
    3368:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336a:	8b 89       	ldd	r24, Y+19	; 0x13
    336c:	9c 89       	ldd	r25, Y+20	; 0x14
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	69 f7       	brne	.-38     	; 0x334c <Lcd_vidInit+0x1ce>
    3372:	14 c0       	rjmp	.+40     	; 0x339c <Lcd_vidInit+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3374:	6d 89       	ldd	r22, Y+21	; 0x15
    3376:	7e 89       	ldd	r23, Y+22	; 0x16
    3378:	8f 89       	ldd	r24, Y+23	; 0x17
    337a:	98 8d       	ldd	r25, Y+24	; 0x18
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9c 8b       	std	Y+20, r25	; 0x14
    3386:	8b 8b       	std	Y+19, r24	; 0x13
    3388:	8b 89       	ldd	r24, Y+19	; 0x13
    338a:	9c 89       	ldd	r25, Y+20	; 0x14
    338c:	98 8b       	std	Y+16, r25	; 0x10
    338e:	8f 87       	std	Y+15, r24	; 0x0f
    3390:	8f 85       	ldd	r24, Y+15	; 0x0f
    3392:	98 89       	ldd	r25, Y+16	; 0x10
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <Lcd_vidInit+0x216>
    3398:	98 8b       	std	Y+16, r25	; 0x10
    339a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	// Display On / Off
	Lcd_vidSendCommand(Add_strucLcd,0b00001100);
    339c:	8b a5       	ldd	r24, Y+43	; 0x2b
    339e:	9c a5       	ldd	r25, Y+44	; 0x2c
    33a0:	6c e0       	ldi	r22, 0x0C	; 12
    33a2:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Lcd_vidSendCommand>
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	a0 e8       	ldi	r26, 0x80	; 128
    33ac:	bf e3       	ldi	r27, 0x3F	; 63
    33ae:	8b 87       	std	Y+11, r24	; 0x0b
    33b0:	9c 87       	std	Y+12, r25	; 0x0c
    33b2:	ad 87       	std	Y+13, r26	; 0x0d
    33b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    33bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	4a ef       	ldi	r20, 0xFA	; 250
    33c4:	54 e4       	ldi	r21, 0x44	; 68
    33c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	8f 83       	std	Y+7, r24	; 0x07
    33d0:	98 87       	std	Y+8, r25	; 0x08
    33d2:	a9 87       	std	Y+9, r26	; 0x09
    33d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d6:	6f 81       	ldd	r22, Y+7	; 0x07
    33d8:	78 85       	ldd	r23, Y+8	; 0x08
    33da:	89 85       	ldd	r24, Y+9	; 0x09
    33dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e8       	ldi	r20, 0x80	; 128
    33e4:	5f e3       	ldi	r21, 0x3F	; 63
    33e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33ea:	88 23       	and	r24, r24
    33ec:	2c f4       	brge	.+10     	; 0x33f8 <Lcd_vidInit+0x27a>
		__ticks = 1;
    33ee:	81 e0       	ldi	r24, 0x01	; 1
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	9e 83       	std	Y+6, r25	; 0x06
    33f4:	8d 83       	std	Y+5, r24	; 0x05
    33f6:	3f c0       	rjmp	.+126    	; 0x3476 <Lcd_vidInit+0x2f8>
	else if (__tmp > 65535)
    33f8:	6f 81       	ldd	r22, Y+7	; 0x07
    33fa:	78 85       	ldd	r23, Y+8	; 0x08
    33fc:	89 85       	ldd	r24, Y+9	; 0x09
    33fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3400:	20 e0       	ldi	r18, 0x00	; 0
    3402:	3f ef       	ldi	r19, 0xFF	; 255
    3404:	4f e7       	ldi	r20, 0x7F	; 127
    3406:	57 e4       	ldi	r21, 0x47	; 71
    3408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    340c:	18 16       	cp	r1, r24
    340e:	4c f5       	brge	.+82     	; 0x3462 <Lcd_vidInit+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3410:	6b 85       	ldd	r22, Y+11	; 0x0b
    3412:	7c 85       	ldd	r23, Y+12	; 0x0c
    3414:	8d 85       	ldd	r24, Y+13	; 0x0d
    3416:	9e 85       	ldd	r25, Y+14	; 0x0e
    3418:	20 e0       	ldi	r18, 0x00	; 0
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	40 e2       	ldi	r20, 0x20	; 32
    341e:	51 e4       	ldi	r21, 0x41	; 65
    3420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3424:	dc 01       	movw	r26, r24
    3426:	cb 01       	movw	r24, r22
    3428:	bc 01       	movw	r22, r24
    342a:	cd 01       	movw	r24, r26
    342c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	9e 83       	std	Y+6, r25	; 0x06
    3436:	8d 83       	std	Y+5, r24	; 0x05
    3438:	0f c0       	rjmp	.+30     	; 0x3458 <Lcd_vidInit+0x2da>
    343a:	88 ec       	ldi	r24, 0xC8	; 200
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9c 83       	std	Y+4, r25	; 0x04
    3440:	8b 83       	std	Y+3, r24	; 0x03
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	9c 81       	ldd	r25, Y+4	; 0x04
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	f1 f7       	brne	.-4      	; 0x3446 <Lcd_vidInit+0x2c8>
    344a:	9c 83       	std	Y+4, r25	; 0x04
    344c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344e:	8d 81       	ldd	r24, Y+5	; 0x05
    3450:	9e 81       	ldd	r25, Y+6	; 0x06
    3452:	01 97       	sbiw	r24, 0x01	; 1
    3454:	9e 83       	std	Y+6, r25	; 0x06
    3456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3458:	8d 81       	ldd	r24, Y+5	; 0x05
    345a:	9e 81       	ldd	r25, Y+6	; 0x06
    345c:	00 97       	sbiw	r24, 0x00	; 0
    345e:	69 f7       	brne	.-38     	; 0x343a <Lcd_vidInit+0x2bc>
    3460:	14 c0       	rjmp	.+40     	; 0x348a <Lcd_vidInit+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3462:	6f 81       	ldd	r22, Y+7	; 0x07
    3464:	78 85       	ldd	r23, Y+8	; 0x08
    3466:	89 85       	ldd	r24, Y+9	; 0x09
    3468:	9a 85       	ldd	r25, Y+10	; 0x0a
    346a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346e:	dc 01       	movw	r26, r24
    3470:	cb 01       	movw	r24, r22
    3472:	9e 83       	std	Y+6, r25	; 0x06
    3474:	8d 83       	std	Y+5, r24	; 0x05
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	9a 83       	std	Y+2, r25	; 0x02
    347c:	89 83       	std	Y+1, r24	; 0x01
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	9a 81       	ldd	r25, Y+2	; 0x02
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	f1 f7       	brne	.-4      	; 0x3482 <Lcd_vidInit+0x304>
    3486:	9a 83       	std	Y+2, r25	; 0x02
    3488:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	Lcd_vidSendCommand(Add_strucLcd,0b00000001);
    348a:	8b a5       	ldd	r24, Y+43	; 0x2b
    348c:	9c a5       	ldd	r25, Y+44	; 0x2c
    348e:	61 e0       	ldi	r22, 0x01	; 1
    3490:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Lcd_vidSendCommand>

}
    3494:	ac 96       	adiw	r28, 0x2c	; 44
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <Lcd_WriteString>:
/////////////////////////////////////
void Lcd_WriteString(Lcd_tstrucCfg*Add_strucLcd,u8*Add_u8LcdString){
    34a6:	df 93       	push	r29
    34a8:	cf 93       	push	r28
    34aa:	00 d0       	rcall	.+0      	; 0x34ac <Lcd_WriteString+0x6>
    34ac:	00 d0       	rcall	.+0      	; 0x34ae <Lcd_WriteString+0x8>
    34ae:	0f 92       	push	r0
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
    34b4:	9b 83       	std	Y+3, r25	; 0x03
    34b6:	8a 83       	std	Y+2, r24	; 0x02
    34b8:	7d 83       	std	Y+5, r23	; 0x05
    34ba:	6c 83       	std	Y+4, r22	; 0x04

	for(u8 StringCounter=0;Add_u8LcdString[StringCounter]!='\0';StringCounter++){
    34bc:	19 82       	std	Y+1, r1	; 0x01
    34be:	11 c0       	rjmp	.+34     	; 0x34e2 <Lcd_WriteString+0x3c>

		Lcd_vidSendData(Add_strucLcd,Add_u8LcdString[StringCounter]);
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	28 2f       	mov	r18, r24
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	8c 81       	ldd	r24, Y+4	; 0x04
    34c8:	9d 81       	ldd	r25, Y+5	; 0x05
    34ca:	fc 01       	movw	r30, r24
    34cc:	e2 0f       	add	r30, r18
    34ce:	f3 1f       	adc	r31, r19
    34d0:	20 81       	ld	r18, Z
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	9b 81       	ldd	r25, Y+3	; 0x03
    34d6:	62 2f       	mov	r22, r18
    34d8:	0e 94 9c 18 	call	0x3138	; 0x3138 <Lcd_vidSendData>

}
/////////////////////////////////////
void Lcd_WriteString(Lcd_tstrucCfg*Add_strucLcd,u8*Add_u8LcdString){

	for(u8 StringCounter=0;Add_u8LcdString[StringCounter]!='\0';StringCounter++){
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	8f 5f       	subi	r24, 0xFF	; 255
    34e0:	89 83       	std	Y+1, r24	; 0x01
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	28 2f       	mov	r18, r24
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	8c 81       	ldd	r24, Y+4	; 0x04
    34ea:	9d 81       	ldd	r25, Y+5	; 0x05
    34ec:	fc 01       	movw	r30, r24
    34ee:	e2 0f       	add	r30, r18
    34f0:	f3 1f       	adc	r31, r19
    34f2:	80 81       	ld	r24, Z
    34f4:	88 23       	and	r24, r24
    34f6:	21 f7       	brne	.-56     	; 0x34c0 <Lcd_WriteString+0x1a>

		Lcd_vidSendData(Add_strucLcd,Add_u8LcdString[StringCounter]);
	}
}
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	0f 90       	pop	r0
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	08 95       	ret

00003508 <Lcd_WriteNumber>:

////////////////////////////////////////////////
void Lcd_WriteNumber(Lcd_tstrucCfg*Add_strucLcd,u16*Add_u8LcdNumber){
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	6a 97       	sbiw	r28, 0x1a	; 26
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	98 8f       	std	Y+24, r25	; 0x18
    3522:	8f 8b       	std	Y+23, r24	; 0x17
    3524:	7a 8f       	std	Y+26, r23	; 0x1a
    3526:	69 8f       	std	Y+25, r22	; 0x19
	if(*Add_u8LcdNumber<10)
    3528:	e9 8d       	ldd	r30, Y+25	; 0x19
    352a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    352c:	80 81       	ld	r24, Z
    352e:	91 81       	ldd	r25, Z+1	; 0x01
    3530:	8a 30       	cpi	r24, 0x0A	; 10
    3532:	91 05       	cpc	r25, r1
    3534:	60 f4       	brcc	.+24     	; 0x354e <Lcd_WriteNumber+0x46>
		Lcd_vidSendData(Add_strucLcd,(*Add_u8LcdNumber)+48);
    3536:	e9 8d       	ldd	r30, Y+25	; 0x19
    3538:	fa 8d       	ldd	r31, Y+26	; 0x1a
    353a:	80 81       	ld	r24, Z
    353c:	91 81       	ldd	r25, Z+1	; 0x01
    353e:	28 2f       	mov	r18, r24
    3540:	20 5d       	subi	r18, 0xD0	; 208
    3542:	8f 89       	ldd	r24, Y+23	; 0x17
    3544:	98 8d       	ldd	r25, Y+24	; 0x18
    3546:	62 2f       	mov	r22, r18
    3548:	0e 94 9c 18 	call	0x3138	; 0x3138 <Lcd_vidSendData>
    354c:	64 c0       	rjmp	.+200    	; 0x3616 <Lcd_WriteNumber+0x10e>

	//for operations
	else if(*Add_u8LcdNumber>=10)
    354e:	e9 8d       	ldd	r30, Y+25	; 0x19
    3550:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3552:	80 81       	ld	r24, Z
    3554:	91 81       	ldd	r25, Z+1	; 0x01
    3556:	8a 30       	cpi	r24, 0x0A	; 10
    3558:	91 05       	cpc	r25, r1
    355a:	08 f4       	brcc	.+2      	; 0x355e <Lcd_WriteNumber+0x56>
    355c:	5c c0       	rjmp	.+184    	; 0x3616 <Lcd_WriteNumber+0x10e>
	{
		u8 arrSaveDigitOfNum[16];
		u8 size=0;
    355e:	1e 82       	std	Y+6, r1	; 0x06
		u32 value=*Add_u8LcdNumber;
    3560:	e9 8d       	ldd	r30, Y+25	; 0x19
    3562:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3564:	80 81       	ld	r24, Z
    3566:	91 81       	ldd	r25, Z+1	; 0x01
    3568:	cc 01       	movw	r24, r24
    356a:	a0 e0       	ldi	r26, 0x00	; 0
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	8a 83       	std	Y+2, r24	; 0x02
    3570:	9b 83       	std	Y+3, r25	; 0x03
    3572:	ac 83       	std	Y+4, r26	; 0x04
    3574:	bd 83       	std	Y+5, r27	; 0x05
    3576:	2d c0       	rjmp	.+90     	; 0x35d2 <Lcd_WriteNumber+0xca>
		while(value!=0)
		{
			arrSaveDigitOfNum[size]=value % 10;
    3578:	8e 81       	ldd	r24, Y+6	; 0x06
    357a:	08 2f       	mov	r16, r24
    357c:	10 e0       	ldi	r17, 0x00	; 0
    357e:	8a 81       	ldd	r24, Y+2	; 0x02
    3580:	9b 81       	ldd	r25, Y+3	; 0x03
    3582:	ac 81       	ldd	r26, Y+4	; 0x04
    3584:	bd 81       	ldd	r27, Y+5	; 0x05
    3586:	2a e0       	ldi	r18, 0x0A	; 10
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	40 e0       	ldi	r20, 0x00	; 0
    358c:	50 e0       	ldi	r21, 0x00	; 0
    358e:	bc 01       	movw	r22, r24
    3590:	cd 01       	movw	r24, r26
    3592:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
    3596:	dc 01       	movw	r26, r24
    3598:	cb 01       	movw	r24, r22
    359a:	28 2f       	mov	r18, r24
    359c:	ce 01       	movw	r24, r28
    359e:	07 96       	adiw	r24, 0x07	; 7
    35a0:	fc 01       	movw	r30, r24
    35a2:	e0 0f       	add	r30, r16
    35a4:	f1 1f       	adc	r31, r17
    35a6:	20 83       	st	Z, r18
			value/=10;
    35a8:	8a 81       	ldd	r24, Y+2	; 0x02
    35aa:	9b 81       	ldd	r25, Y+3	; 0x03
    35ac:	ac 81       	ldd	r26, Y+4	; 0x04
    35ae:	bd 81       	ldd	r27, Y+5	; 0x05
    35b0:	2a e0       	ldi	r18, 0x0A	; 10
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	40 e0       	ldi	r20, 0x00	; 0
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	bc 01       	movw	r22, r24
    35ba:	cd 01       	movw	r24, r26
    35bc:	0e 94 0d 23 	call	0x461a	; 0x461a <__udivmodsi4>
    35c0:	da 01       	movw	r26, r20
    35c2:	c9 01       	movw	r24, r18
    35c4:	8a 83       	std	Y+2, r24	; 0x02
    35c6:	9b 83       	std	Y+3, r25	; 0x03
    35c8:	ac 83       	std	Y+4, r26	; 0x04
    35ca:	bd 83       	std	Y+5, r27	; 0x05

			size++;
    35cc:	8e 81       	ldd	r24, Y+6	; 0x06
    35ce:	8f 5f       	subi	r24, 0xFF	; 255
    35d0:	8e 83       	std	Y+6, r24	; 0x06
	else if(*Add_u8LcdNumber>=10)
	{
		u8 arrSaveDigitOfNum[16];
		u8 size=0;
		u32 value=*Add_u8LcdNumber;
		while(value!=0)
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	9b 81       	ldd	r25, Y+3	; 0x03
    35d6:	ac 81       	ldd	r26, Y+4	; 0x04
    35d8:	bd 81       	ldd	r27, Y+5	; 0x05
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	a1 05       	cpc	r26, r1
    35de:	b1 05       	cpc	r27, r1
    35e0:	59 f6       	brne	.-106    	; 0x3578 <Lcd_WriteNumber+0x70>
			value/=10;

			size++;
		}

		for(u8 counter=size-1;counter>=0;counter--)
    35e2:	8e 81       	ldd	r24, Y+6	; 0x06
    35e4:	81 50       	subi	r24, 0x01	; 1
    35e6:	89 83       	std	Y+1, r24	; 0x01
		{

			Lcd_vidSendData(Add_strucLcd,(arrSaveDigitOfNum[counter])+48);
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	28 2f       	mov	r18, r24
    35ec:	30 e0       	ldi	r19, 0x00	; 0
    35ee:	ce 01       	movw	r24, r28
    35f0:	07 96       	adiw	r24, 0x07	; 7
    35f2:	fc 01       	movw	r30, r24
    35f4:	e2 0f       	add	r30, r18
    35f6:	f3 1f       	adc	r31, r19
    35f8:	80 81       	ld	r24, Z
    35fa:	28 2f       	mov	r18, r24
    35fc:	20 5d       	subi	r18, 0xD0	; 208
    35fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3600:	98 8d       	ldd	r25, Y+24	; 0x18
    3602:	62 2f       	mov	r22, r18
    3604:	0e 94 9c 18 	call	0x3138	; 0x3138 <Lcd_vidSendData>
              if(counter==0)
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	88 23       	and	r24, r24
    360c:	21 f0       	breq	.+8      	; 0x3616 <Lcd_WriteNumber+0x10e>
			value/=10;

			size++;
		}

		for(u8 counter=size-1;counter>=0;counter--)
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	81 50       	subi	r24, 0x01	; 1
    3612:	89 83       	std	Y+1, r24	; 0x01
    3614:	e9 cf       	rjmp	.-46     	; 0x35e8 <Lcd_WriteNumber+0xe0>
		}


	}

}
    3616:	6a 96       	adiw	r28, 0x1a	; 26
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	cf 91       	pop	r28
    3624:	df 91       	pop	r29
    3626:	1f 91       	pop	r17
    3628:	0f 91       	pop	r16
    362a:	08 95       	ret

0000362c <Lcd_gotoPosition>:
/////////////////////////////////////////
void Lcd_gotoPosition(Lcd_tstrucCfg*Add_strucLcd,u8 Copy_u8linePosition,u8 Copy_u8digitPosition)
{
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	00 d0       	rcall	.+0      	; 0x3632 <Lcd_gotoPosition+0x6>
    3632:	00 d0       	rcall	.+0      	; 0x3634 <Lcd_gotoPosition+0x8>
    3634:	00 d0       	rcall	.+0      	; 0x3636 <Lcd_gotoPosition+0xa>
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	9a 83       	std	Y+2, r25	; 0x02
    363c:	89 83       	std	Y+1, r24	; 0x01
    363e:	6b 83       	std	Y+3, r22	; 0x03
    3640:	4c 83       	std	Y+4, r20	; 0x04

switch(Copy_u8linePosition)
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	28 2f       	mov	r18, r24
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	3e 83       	std	Y+6, r19	; 0x06
    364a:	2d 83       	std	Y+5, r18	; 0x05
    364c:	8d 81       	ldd	r24, Y+5	; 0x05
    364e:	9e 81       	ldd	r25, Y+6	; 0x06
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	31 f0       	breq	.+12     	; 0x3660 <Lcd_gotoPosition+0x34>
    3654:	2d 81       	ldd	r18, Y+5	; 0x05
    3656:	3e 81       	ldd	r19, Y+6	; 0x06
    3658:	21 30       	cpi	r18, 0x01	; 1
    365a:	31 05       	cpc	r19, r1
    365c:	51 f0       	breq	.+20     	; 0x3672 <Lcd_gotoPosition+0x46>
    365e:	11 c0       	rjmp	.+34     	; 0x3682 <Lcd_gotoPosition+0x56>
 {

case 0:Lcd_vidSendCommand(Add_strucLcd,LCD_LINE1+Copy_u8digitPosition); break; //LCD line 1 >>> default address
    3660:	8c 81       	ldd	r24, Y+4	; 0x04
    3662:	28 2f       	mov	r18, r24
    3664:	20 58       	subi	r18, 0x80	; 128
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	9a 81       	ldd	r25, Y+2	; 0x02
    366a:	62 2f       	mov	r22, r18
    366c:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Lcd_vidSendCommand>
    3670:	08 c0       	rjmp	.+16     	; 0x3682 <Lcd_gotoPosition+0x56>

case 1:Lcd_vidSendCommand(Add_strucLcd,LCD_LINE2+Copy_u8digitPosition); break;
    3672:	8c 81       	ldd	r24, Y+4	; 0x04
    3674:	28 2f       	mov	r18, r24
    3676:	20 54       	subi	r18, 0x40	; 64
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	9a 81       	ldd	r25, Y+2	; 0x02
    367c:	62 2f       	mov	r22, r18
    367e:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Lcd_vidSendCommand>


 }

}
    3682:	26 96       	adiw	r28, 0x06	; 6
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	08 95       	ret

00003694 <Keypad_voidGetPressedKey>:
		{'o',0,'=','+'}
};


u8 Keypad_voidGetPressedKey(void)
{
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	61 97       	sbiw	r28, 0x11	; 17
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61

u8 KeyPadResult=0xff;
    36a8:	8f ef       	ldi	r24, 0xFF	; 255
    36aa:	89 8b       	std	Y+17, r24	; 0x11



for(u8 col=0;col<4;col++)
    36ac:	18 8a       	std	Y+16, r1	; 0x10
    36ae:	ad c0       	rjmp	.+346    	; 0x380a <Keypad_voidGetPressedKey+0x176>
 {
	DIO_enuSetPinValue(DIO_u8_PORTD,col,DIO_u8_LOW); //to activate  col
    36b0:	83 e0       	ldi	r24, 0x03	; 3
    36b2:	68 89       	ldd	r22, Y+16	; 0x10
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>
  for(u8 row=0 ;row<4;row++)
    36ba:	1f 86       	std	Y+15, r1	; 0x0f
    36bc:	9a c0       	rjmp	.+308    	; 0x37f2 <Keypad_voidGetPressedKey+0x15e>
  {

	  if(DIO_u8GetPinValue(DIO_u8_PORTD,row+4)==0)
    36be:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c0:	98 2f       	mov	r25, r24
    36c2:	9c 5f       	subi	r25, 0xFC	; 252
    36c4:	83 e0       	ldi	r24, 0x03	; 3
    36c6:	69 2f       	mov	r22, r25
    36c8:	0e 94 87 13 	call	0x270e	; 0x270e <DIO_u8GetPinValue>
    36cc:	88 23       	and	r24, r24
    36ce:	09 f0       	breq	.+2      	; 0x36d2 <Keypad_voidGetPressedKey+0x3e>
    36d0:	8d c0       	rjmp	.+282    	; 0x37ec <Keypad_voidGetPressedKey+0x158>
	  {


		  while(DIO_u8GetPinValue(DIO_u8_PORTD,row+4)==0); // to save value after press
    36d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d4:	98 2f       	mov	r25, r24
    36d6:	9c 5f       	subi	r25, 0xFC	; 252
    36d8:	83 e0       	ldi	r24, 0x03	; 3
    36da:	69 2f       	mov	r22, r25
    36dc:	0e 94 87 13 	call	0x270e	; 0x270e <DIO_u8GetPinValue>
    36e0:	88 23       	and	r24, r24
    36e2:	b9 f3       	breq	.-18     	; 0x36d2 <Keypad_voidGetPressedKey+0x3e>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	a0 e2       	ldi	r26, 0x20	; 32
    36ea:	b1 e4       	ldi	r27, 0x41	; 65
    36ec:	8b 87       	std	Y+11, r24	; 0x0b
    36ee:	9c 87       	std	Y+12, r25	; 0x0c
    36f0:	ad 87       	std	Y+13, r26	; 0x0d
    36f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	4a ef       	ldi	r20, 0xFA	; 250
    3702:	54 e4       	ldi	r21, 0x44	; 68
    3704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3708:	dc 01       	movw	r26, r24
    370a:	cb 01       	movw	r24, r22
    370c:	8f 83       	std	Y+7, r24	; 0x07
    370e:	98 87       	std	Y+8, r25	; 0x08
    3710:	a9 87       	std	Y+9, r26	; 0x09
    3712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3714:	6f 81       	ldd	r22, Y+7	; 0x07
    3716:	78 85       	ldd	r23, Y+8	; 0x08
    3718:	89 85       	ldd	r24, Y+9	; 0x09
    371a:	9a 85       	ldd	r25, Y+10	; 0x0a
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	40 e8       	ldi	r20, 0x80	; 128
    3722:	5f e3       	ldi	r21, 0x3F	; 63
    3724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3728:	88 23       	and	r24, r24
    372a:	2c f4       	brge	.+10     	; 0x3736 <Keypad_voidGetPressedKey+0xa2>
		__ticks = 1;
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	9e 83       	std	Y+6, r25	; 0x06
    3732:	8d 83       	std	Y+5, r24	; 0x05
    3734:	3f c0       	rjmp	.+126    	; 0x37b4 <Keypad_voidGetPressedKey+0x120>
	else if (__tmp > 65535)
    3736:	6f 81       	ldd	r22, Y+7	; 0x07
    3738:	78 85       	ldd	r23, Y+8	; 0x08
    373a:	89 85       	ldd	r24, Y+9	; 0x09
    373c:	9a 85       	ldd	r25, Y+10	; 0x0a
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	3f ef       	ldi	r19, 0xFF	; 255
    3742:	4f e7       	ldi	r20, 0x7F	; 127
    3744:	57 e4       	ldi	r21, 0x47	; 71
    3746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374a:	18 16       	cp	r1, r24
    374c:	4c f5       	brge	.+82     	; 0x37a0 <Keypad_voidGetPressedKey+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3750:	7c 85       	ldd	r23, Y+12	; 0x0c
    3752:	8d 85       	ldd	r24, Y+13	; 0x0d
    3754:	9e 85       	ldd	r25, Y+14	; 0x0e
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	40 e2       	ldi	r20, 0x20	; 32
    375c:	51 e4       	ldi	r21, 0x41	; 65
    375e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	9e 83       	std	Y+6, r25	; 0x06
    3774:	8d 83       	std	Y+5, r24	; 0x05
    3776:	0f c0       	rjmp	.+30     	; 0x3796 <Keypad_voidGetPressedKey+0x102>
    3778:	88 ec       	ldi	r24, 0xC8	; 200
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	9c 83       	std	Y+4, r25	; 0x04
    377e:	8b 83       	std	Y+3, r24	; 0x03
    3780:	8b 81       	ldd	r24, Y+3	; 0x03
    3782:	9c 81       	ldd	r25, Y+4	; 0x04
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <Keypad_voidGetPressedKey+0xf0>
    3788:	9c 83       	std	Y+4, r25	; 0x04
    378a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378c:	8d 81       	ldd	r24, Y+5	; 0x05
    378e:	9e 81       	ldd	r25, Y+6	; 0x06
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	9e 83       	std	Y+6, r25	; 0x06
    3794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3796:	8d 81       	ldd	r24, Y+5	; 0x05
    3798:	9e 81       	ldd	r25, Y+6	; 0x06
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	69 f7       	brne	.-38     	; 0x3778 <Keypad_voidGetPressedKey+0xe4>
    379e:	14 c0       	rjmp	.+40     	; 0x37c8 <Keypad_voidGetPressedKey+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a0:	6f 81       	ldd	r22, Y+7	; 0x07
    37a2:	78 85       	ldd	r23, Y+8	; 0x08
    37a4:	89 85       	ldd	r24, Y+9	; 0x09
    37a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	9e 83       	std	Y+6, r25	; 0x06
    37b2:	8d 83       	std	Y+5, r24	; 0x05
    37b4:	8d 81       	ldd	r24, Y+5	; 0x05
    37b6:	9e 81       	ldd	r25, Y+6	; 0x06
    37b8:	9a 83       	std	Y+2, r25	; 0x02
    37ba:	89 83       	std	Y+1, r24	; 0x01
    37bc:	89 81       	ldd	r24, Y+1	; 0x01
    37be:	9a 81       	ldd	r25, Y+2	; 0x02
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <Keypad_voidGetPressedKey+0x12c>
    37c4:	9a 83       	std	Y+2, r25	; 0x02
    37c6:	89 83       	std	Y+1, r24	; 0x01

	         _delay_ms(10);

	         KeyPadResult=KeyPadValues[col][row];
    37c8:	88 89       	ldd	r24, Y+16	; 0x10
    37ca:	48 2f       	mov	r20, r24
    37cc:	50 e0       	ldi	r21, 0x00	; 0
    37ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d0:	28 2f       	mov	r18, r24
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	ca 01       	movw	r24, r20
    37d6:	88 0f       	add	r24, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	88 0f       	add	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	82 0f       	add	r24, r18
    37e0:	93 1f       	adc	r25, r19
    37e2:	fc 01       	movw	r30, r24
    37e4:	e2 55       	subi	r30, 0x52	; 82
    37e6:	ff 4f       	sbci	r31, 0xFF	; 255
    37e8:	80 81       	ld	r24, Z
    37ea:	89 8b       	std	Y+17, r24	; 0x11


for(u8 col=0;col<4;col++)
 {
	DIO_enuSetPinValue(DIO_u8_PORTD,col,DIO_u8_LOW); //to activate  col
  for(u8 row=0 ;row<4;row++)
    37ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ee:	8f 5f       	subi	r24, 0xFF	; 255
    37f0:	8f 87       	std	Y+15, r24	; 0x0f
    37f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37f4:	84 30       	cpi	r24, 0x04	; 4
    37f6:	08 f4       	brcc	.+2      	; 0x37fa <Keypad_voidGetPressedKey+0x166>
    37f8:	62 cf       	rjmp	.-316    	; 0x36be <Keypad_voidGetPressedKey+0x2a>

	  }


  }
  DIO_enuSetPinValue(DIO_u8_PORTD,col,DIO_u8_HIGH); //to close colmon
    37fa:	83 e0       	ldi	r24, 0x03	; 3
    37fc:	68 89       	ldd	r22, Y+16	; 0x10
    37fe:	41 e0       	ldi	r20, 0x01	; 1
    3800:	0e 94 6d 11 	call	0x22da	; 0x22da <DIO_enuSetPinValue>

u8 KeyPadResult=0xff;



for(u8 col=0;col<4;col++)
    3804:	88 89       	ldd	r24, Y+16	; 0x10
    3806:	8f 5f       	subi	r24, 0xFF	; 255
    3808:	88 8b       	std	Y+16, r24	; 0x10
    380a:	88 89       	ldd	r24, Y+16	; 0x10
    380c:	84 30       	cpi	r24, 0x04	; 4
    380e:	08 f4       	brcc	.+2      	; 0x3812 <Keypad_voidGetPressedKey+0x17e>
    3810:	4f cf       	rjmp	.-354    	; 0x36b0 <Keypad_voidGetPressedKey+0x1c>

  }
  DIO_enuSetPinValue(DIO_u8_PORTD,col,DIO_u8_HIGH); //to close colmon

 }
return KeyPadResult;
    3812:	89 89       	ldd	r24, Y+17	; 0x11
}
    3814:	61 96       	adiw	r28, 0x11	; 17
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	cf 91       	pop	r28
    3822:	df 91       	pop	r29
    3824:	08 95       	ret

00003826 <Keypad_voidSetKeyPadDir>:
////////////////////////////////////////////////
void Keypad_voidSetKeyPadDir(){
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62


	DIO_enuSetPortDirection(DIO_u8_PORTD,0x0f);
    382e:	83 e0       	ldi	r24, 0x03	; 3
    3830:	6f e0       	ldi	r22, 0x0F	; 15
    3832:	0e 94 0b 14 	call	0x2816	; 0x2816 <DIO_enuSetPortDirection>
	DIO_enuSetPortValue(DIO_u8_PORTD,0xff); // F for 1111 of coulms and F for pull up
    3836:	83 e0       	ldi	r24, 0x03	; 3
    3838:	6f ef       	ldi	r22, 0xFF	; 255
    383a:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>



}
    383e:	cf 91       	pop	r28
    3840:	df 91       	pop	r29
    3842:	08 95       	ret

00003844 <__vector_9>:



/************************** Timer1 INT **************************/

ISR(TIMER1_OVF_vect){
    3844:	1f 92       	push	r1
    3846:	0f 92       	push	r0
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	0f 92       	push	r0
    384c:	11 24       	eor	r1, r1
    384e:	8f 93       	push	r24
    3850:	9f 93       	push	r25
    3852:	ef 93       	push	r30
    3854:	ff 93       	push	r31
    3856:	df 93       	push	r29
    3858:	cf 93       	push	r28
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 34286;   // for 1 sec at 8 MHz
    385e:	ec e4       	ldi	r30, 0x4C	; 76
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	8e ee       	ldi	r24, 0xEE	; 238
    3864:	95 e8       	ldi	r25, 0x85	; 133
    3866:	91 83       	std	Z+1, r25	; 0x01
    3868:	80 83       	st	Z, r24
	sec1++;
    386a:	80 91 d5 00 	lds	r24, 0x00D5
    386e:	8f 5f       	subi	r24, 0xFF	; 255
    3870:	80 93 d5 00 	sts	0x00D5, r24
	if (sec1>9)
    3874:	80 91 d5 00 	lds	r24, 0x00D5
    3878:	8a 30       	cpi	r24, 0x0A	; 10
    387a:	38 f0       	brcs	.+14     	; 0x388a <__vector_9+0x46>
	{
		sec1=0;
    387c:	10 92 d5 00 	sts	0x00D5, r1
	  sec2+=1;
    3880:	80 91 d6 00 	lds	r24, 0x00D6
    3884:	8f 5f       	subi	r24, 0xFF	; 255
    3886:	80 93 d6 00 	sts	0x00D6, r24

	}

	if (sec2>5)
    388a:	80 91 d6 00 	lds	r24, 0x00D6
    388e:	86 30       	cpi	r24, 0x06	; 6
    3890:	48 f0       	brcs	.+18     	; 0x38a4 <__vector_9+0x60>
		{
		 sec1=0;
    3892:	10 92 d5 00 	sts	0x00D5, r1
		 sec2=0;
    3896:	10 92 d6 00 	sts	0x00D6, r1
		 min1+=1;
    389a:	80 91 d7 00 	lds	r24, 0x00D7
    389e:	8f 5f       	subi	r24, 0xFF	; 255
    38a0:	80 93 d7 00 	sts	0x00D7, r24

		}
	if (min1>9)
    38a4:	80 91 d7 00 	lds	r24, 0x00D7
    38a8:	8a 30       	cpi	r24, 0x0A	; 10
    38aa:	58 f0       	brcs	.+22     	; 0x38c2 <__vector_9+0x7e>
		{
		sec1=0;
    38ac:	10 92 d5 00 	sts	0x00D5, r1
		sec2=0;
    38b0:	10 92 d6 00 	sts	0x00D6, r1
		min1=0;
    38b4:	10 92 d7 00 	sts	0x00D7, r1
		min2+=1;
    38b8:	80 91 d8 00 	lds	r24, 0x00D8
    38bc:	8f 5f       	subi	r24, 0xFF	; 255
    38be:	80 93 d8 00 	sts	0x00D8, r24


		}

	if (min2>5)
    38c2:	80 91 d8 00 	lds	r24, 0x00D8
    38c6:	86 30       	cpi	r24, 0x06	; 6
    38c8:	68 f0       	brcs	.+26     	; 0x38e4 <__vector_9+0xa0>
			{
			sec1=0;
    38ca:	10 92 d5 00 	sts	0x00D5, r1
			sec2=0;
    38ce:	10 92 d6 00 	sts	0x00D6, r1
			min1=0;
    38d2:	10 92 d7 00 	sts	0x00D7, r1
			min2=0;
    38d6:	10 92 d8 00 	sts	0x00D8, r1
			hrs1+=1;
    38da:	80 91 d9 00 	lds	r24, 0x00D9
    38de:	8f 5f       	subi	r24, 0xFF	; 255
    38e0:	80 93 d9 00 	sts	0x00D9, r24


			}
	if (hrs1>9)
    38e4:	80 91 d9 00 	lds	r24, 0x00D9
    38e8:	8a 30       	cpi	r24, 0x0A	; 10
    38ea:	78 f0       	brcs	.+30     	; 0x390a <__vector_9+0xc6>
				{
			sec1=0;
    38ec:	10 92 d5 00 	sts	0x00D5, r1
			sec2=0;
    38f0:	10 92 d6 00 	sts	0x00D6, r1
			min1=0;
    38f4:	10 92 d7 00 	sts	0x00D7, r1
			min2=0;
    38f8:	10 92 d8 00 	sts	0x00D8, r1
			hrs1=0;
    38fc:	10 92 d9 00 	sts	0x00D9, r1
			hrs2+=1;
    3900:	80 91 da 00 	lds	r24, 0x00DA
    3904:	8f 5f       	subi	r24, 0xFF	; 255
    3906:	80 93 da 00 	sts	0x00DA, r24


				}
	if (hrs2>1)
    390a:	80 91 da 00 	lds	r24, 0x00DA
    390e:	82 30       	cpi	r24, 0x02	; 2
    3910:	80 f0       	brcs	.+32     	; 0x3932 <__vector_9+0xee>

  {
		if(hrs1>3){
    3912:	80 91 d9 00 	lds	r24, 0x00D9
    3916:	84 30       	cpi	r24, 0x04	; 4
    3918:	60 f0       	brcs	.+24     	; 0x3932 <__vector_9+0xee>
				sec1=0;
    391a:	10 92 d5 00 	sts	0x00D5, r1
				sec2=0;
    391e:	10 92 d6 00 	sts	0x00D6, r1
				min1=0;
    3922:	10 92 d7 00 	sts	0x00D7, r1
				min2=0;
    3926:	10 92 d8 00 	sts	0x00D8, r1
				hrs1=0;
    392a:	10 92 d9 00 	sts	0x00D9, r1
				hrs2=0;
    392e:	10 92 da 00 	sts	0x00DA, r1
		}

	}


}
    3932:	cf 91       	pop	r28
    3934:	df 91       	pop	r29
    3936:	ff 91       	pop	r31
    3938:	ef 91       	pop	r30
    393a:	9f 91       	pop	r25
    393c:	8f 91       	pop	r24
    393e:	0f 90       	pop	r0
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	0f 90       	pop	r0
    3944:	1f 90       	pop	r1
    3946:	18 95       	reti

00003948 <__vector_1>:

/************************* External INT *************************/

ISR(INT0_vect){
    3948:	1f 92       	push	r1
    394a:	0f 92       	push	r0
    394c:	0f b6       	in	r0, 0x3f	; 63
    394e:	0f 92       	push	r0
    3950:	11 24       	eor	r1, r1
    3952:	df 93       	push	r29
    3954:	cf 93       	push	r28
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
			  sec1=0;
    395a:	10 92 d5 00 	sts	0x00D5, r1
			  sec2=0;
    395e:	10 92 d6 00 	sts	0x00D6, r1
			  min1=0;   // to reset the timer
    3962:	10 92 d7 00 	sts	0x00D7, r1
			  min2=0;
    3966:	10 92 d8 00 	sts	0x00D8, r1
			  hrs1=0;
    396a:	10 92 d9 00 	sts	0x00D9, r1
			  hrs2=0;
    396e:	10 92 da 00 	sts	0x00DA, r1

}
    3972:	cf 91       	pop	r28
    3974:	df 91       	pop	r29
    3976:	0f 90       	pop	r0
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	0f 90       	pop	r0
    397c:	1f 90       	pop	r1
    397e:	18 95       	reti

00003980 <__vector_2>:


ISR(INT1_vect){
    3980:	1f 92       	push	r1
    3982:	0f 92       	push	r0
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	0f 92       	push	r0
    3988:	11 24       	eor	r1, r1
    398a:	8f 93       	push	r24
    398c:	af 93       	push	r26
    398e:	bf 93       	push	r27
    3990:	ef 93       	push	r30
    3992:	ff 93       	push	r31
    3994:	df 93       	push	r29
    3996:	cf 93       	push	r28
    3998:	cd b7       	in	r28, 0x3d	; 61
    399a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B,2); CLR_BIT(TCCR1B,1); CLR_BIT(TCCR1B,0); //to stop timer
    399c:	ae e4       	ldi	r26, 0x4E	; 78
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	ee e4       	ldi	r30, 0x4E	; 78
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	8b 7f       	andi	r24, 0xFB	; 251
    39a8:	8c 93       	st	X, r24
    39aa:	ae e4       	ldi	r26, 0x4E	; 78
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	ee e4       	ldi	r30, 0x4E	; 78
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z
    39b4:	8d 7f       	andi	r24, 0xFD	; 253
    39b6:	8c 93       	st	X, r24
    39b8:	ae e4       	ldi	r26, 0x4E	; 78
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	ee e4       	ldi	r30, 0x4E	; 78
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	8e 7f       	andi	r24, 0xFE	; 254
    39c4:	8c 93       	st	X, r24
}
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	ff 91       	pop	r31
    39cc:	ef 91       	pop	r30
    39ce:	bf 91       	pop	r27
    39d0:	af 91       	pop	r26
    39d2:	8f 91       	pop	r24
    39d4:	0f 90       	pop	r0
    39d6:	0f be       	out	0x3f, r0	; 63
    39d8:	0f 90       	pop	r0
    39da:	1f 90       	pop	r1
    39dc:	18 95       	reti

000039de <__vector_3>:


ISR(INT2_vect){
    39de:	1f 92       	push	r1
    39e0:	0f 92       	push	r0
    39e2:	0f b6       	in	r0, 0x3f	; 63
    39e4:	0f 92       	push	r0
    39e6:	11 24       	eor	r1, r1
    39e8:	8f 93       	push	r24
    39ea:	af 93       	push	r26
    39ec:	bf 93       	push	r27
    39ee:	ef 93       	push	r30
    39f0:	ff 93       	push	r31
    39f2:	df 93       	push	r29
    39f4:	cf 93       	push	r28
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
	 SET_BIT(TCCR1B,2); CLR_BIT(TCCR1B,1); CLR_BIT(TCCR1B,0); //to start
    39fa:	ae e4       	ldi	r26, 0x4E	; 78
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	ee e4       	ldi	r30, 0x4E	; 78
    3a00:	f0 e0       	ldi	r31, 0x00	; 0
    3a02:	80 81       	ld	r24, Z
    3a04:	84 60       	ori	r24, 0x04	; 4
    3a06:	8c 93       	st	X, r24
    3a08:	ae e4       	ldi	r26, 0x4E	; 78
    3a0a:	b0 e0       	ldi	r27, 0x00	; 0
    3a0c:	ee e4       	ldi	r30, 0x4E	; 78
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
    3a12:	8d 7f       	andi	r24, 0xFD	; 253
    3a14:	8c 93       	st	X, r24
    3a16:	ae e4       	ldi	r26, 0x4E	; 78
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	ee e4       	ldi	r30, 0x4E	; 78
    3a1c:	f0 e0       	ldi	r31, 0x00	; 0
    3a1e:	80 81       	ld	r24, Z
    3a20:	8e 7f       	andi	r24, 0xFE	; 254
    3a22:	8c 93       	st	X, r24
}
    3a24:	cf 91       	pop	r28
    3a26:	df 91       	pop	r29
    3a28:	ff 91       	pop	r31
    3a2a:	ef 91       	pop	r30
    3a2c:	bf 91       	pop	r27
    3a2e:	af 91       	pop	r26
    3a30:	8f 91       	pop	r24
    3a32:	0f 90       	pop	r0
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	0f 90       	pop	r0
    3a38:	1f 90       	pop	r1
    3a3a:	18 95       	reti

00003a3c <main>:




int main(void)
{
    3a3c:	df 93       	push	r29
    3a3e:	cf 93       	push	r28
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	c8 57       	subi	r28, 0x78	; 120
    3a46:	d0 40       	sbci	r29, 0x00	; 0
    3a48:	0f b6       	in	r0, 0x3f	; 63
    3a4a:	f8 94       	cli
    3a4c:	de bf       	out	0x3e, r29	; 62
    3a4e:	0f be       	out	0x3f, r0	; 63
    3a50:	cd bf       	out	0x3d, r28	; 61
		.WGM=TIMER_NORMAL_MODE,
		.overflowINT=TIMER_OVERFLOW_ENABEL,
		.channel=TIMER_CHANNEL_A,
		.COM=TIMER_COM_NORMAL_OPERATION,
		.prescale=TIMER_CLK_DEVIDED_BY_256
	};
    3a52:	ce 01       	movw	r24, r28
    3a54:	04 96       	adiw	r24, 0x04	; 4
    3a56:	6d 96       	adiw	r28, 0x1d	; 29
    3a58:	9f af       	std	Y+63, r25	; 0x3f
    3a5a:	8e af       	std	Y+62, r24	; 0x3e
    3a5c:	6d 97       	sbiw	r28, 0x1d	; 29
    3a5e:	ef ec       	ldi	r30, 0xCF	; 207
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	6f 96       	adiw	r28, 0x1f	; 31
    3a64:	ff af       	std	Y+63, r31	; 0x3f
    3a66:	ee af       	std	Y+62, r30	; 0x3e
    3a68:	6f 97       	sbiw	r28, 0x1f	; 31
    3a6a:	f5 e0       	ldi	r31, 0x05	; 5
    3a6c:	a0 96       	adiw	r28, 0x20	; 32
    3a6e:	ff af       	std	Y+63, r31	; 0x3f
    3a70:	a0 97       	sbiw	r28, 0x20	; 32
    3a72:	6f 96       	adiw	r28, 0x1f	; 31
    3a74:	ee ad       	ldd	r30, Y+62	; 0x3e
    3a76:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a78:	6f 97       	sbiw	r28, 0x1f	; 31
    3a7a:	00 80       	ld	r0, Z
    3a7c:	6f 96       	adiw	r28, 0x1f	; 31
    3a7e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a80:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a82:	6f 97       	sbiw	r28, 0x1f	; 31
    3a84:	01 96       	adiw	r24, 0x01	; 1
    3a86:	6f 96       	adiw	r28, 0x1f	; 31
    3a88:	9f af       	std	Y+63, r25	; 0x3f
    3a8a:	8e af       	std	Y+62, r24	; 0x3e
    3a8c:	6f 97       	sbiw	r28, 0x1f	; 31
    3a8e:	6d 96       	adiw	r28, 0x1d	; 29
    3a90:	ee ad       	ldd	r30, Y+62	; 0x3e
    3a92:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a94:	6d 97       	sbiw	r28, 0x1d	; 29
    3a96:	00 82       	st	Z, r0
    3a98:	6d 96       	adiw	r28, 0x1d	; 29
    3a9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a9e:	6d 97       	sbiw	r28, 0x1d	; 29
    3aa0:	01 96       	adiw	r24, 0x01	; 1
    3aa2:	6d 96       	adiw	r28, 0x1d	; 29
    3aa4:	9f af       	std	Y+63, r25	; 0x3f
    3aa6:	8e af       	std	Y+62, r24	; 0x3e
    3aa8:	6d 97       	sbiw	r28, 0x1d	; 29
    3aaa:	a0 96       	adiw	r28, 0x20	; 32
    3aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    3aae:	a0 97       	sbiw	r28, 0x20	; 32
    3ab0:	91 50       	subi	r25, 0x01	; 1
    3ab2:	a0 96       	adiw	r28, 0x20	; 32
    3ab4:	9f af       	std	Y+63, r25	; 0x3f
    3ab6:	a0 97       	sbiw	r28, 0x20	; 32
    3ab8:	a0 96       	adiw	r28, 0x20	; 32
    3aba:	ef ad       	ldd	r30, Y+63	; 0x3f
    3abc:	a0 97       	sbiw	r28, 0x20	; 32
    3abe:	ee 23       	and	r30, r30
    3ac0:	c1 f6       	brne	.-80     	; 0x3a72 <main+0x36>
		Switch_str sw0={

			.portId=DIO_u8_PORTD,
			.pinId=DIO_u8_PIN2

			};
    3ac2:	83 e0       	ldi	r24, 0x03	; 3
    3ac4:	89 87       	std	Y+9, r24	; 0x09
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	8a 87       	std	Y+10, r24	; 0x0a
		Switch_str sw1={

					.portId=DIO_u8_PORTD,
					.pinId=DIO_u8_PIN3

					};
    3aca:	83 e0       	ldi	r24, 0x03	; 3
    3acc:	8b 87       	std	Y+11, r24	; 0x0b
    3ace:	83 e0       	ldi	r24, 0x03	; 3
    3ad0:	8c 87       	std	Y+12, r24	; 0x0c
		Switch_str sw2={

					.portId=DIO_u8_PORTB,
					.pinId=DIO_u8_PIN2

					};
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	8d 87       	std	Y+13, r24	; 0x0d
    3ad6:	82 e0       	ldi	r24, 0x02	; 2
    3ad8:	8e 87       	std	Y+14, r24	; 0x0e

SEGMENT_voidSetSegmentDir(&segments);
    3ada:	88 ec       	ldi	r24, 0xC8	; 200
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <SEGMENT_voidSetSegmentDir>

Keypad_voidSetKeyPadDir();
    3ae2:	0e 94 13 1c 	call	0x3826	; 0x3826 <Keypad_voidSetKeyPadDir>

Lcd_vidInit(&Lcd1);
    3ae6:	8a ec       	ldi	r24, 0xCA	; 202
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	0e 94 bf 18 	call	0x317e	; 0x317e <Lcd_vidInit>

SWITCH_voidSetSwitchDir(&sw0);
    3aee:	ce 01       	movw	r24, r28
    3af0:	09 96       	adiw	r24, 0x09	; 9
    3af2:	0e 94 90 16 	call	0x2d20	; 0x2d20 <SWITCH_voidSetSwitchDir>
SWITCH_voidSetSwitchDir(&sw1);
    3af6:	ce 01       	movw	r24, r28
    3af8:	0b 96       	adiw	r24, 0x0b	; 11
    3afa:	0e 94 90 16 	call	0x2d20	; 0x2d20 <SWITCH_voidSetSwitchDir>
SWITCH_voidSetSwitchDir(&sw2);
    3afe:	ce 01       	movw	r24, r28
    3b00:	0d 96       	adiw	r24, 0x0d	; 13
    3b02:	0e 94 90 16 	call	0x2d20	; 0x2d20 <SWITCH_voidSetSwitchDir>



GIE_voidGlobalInterruptEnable();
    3b06:	0e 94 05 10 	call	0x200a	; 0x200a <GIE_voidGlobalInterruptEnable>

EXTI_voidEnable(EXTI_INT_0,EXTI_INT_0_FALLING_EDGE);
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	62 e0       	ldi	r22, 0x02	; 2
    3b0e:	0e 94 21 10 	call	0x2042	; 0x2042 <EXTI_voidEnable>
EXTI_voidEnable(EXTI_INT_1,EXTI_INT_0_FALLING_EDGE);
    3b12:	81 e0       	ldi	r24, 0x01	; 1
    3b14:	62 e0       	ldi	r22, 0x02	; 2
    3b16:	0e 94 21 10 	call	0x2042	; 0x2042 <EXTI_voidEnable>
EXTI_voidEnable(EXTI_INT_2,EXTI_INT_0_FALLING_EDGE);
    3b1a:	82 e0       	ldi	r24, 0x02	; 2
    3b1c:	62 e0       	ldi	r22, 0x02	; 2
    3b1e:	0e 94 21 10 	call	0x2042	; 0x2042 <EXTI_voidEnable>

TIMER_voidInit(&timer1);
    3b22:	ce 01       	movw	r24, r28
    3b24:	04 96       	adiw	r24, 0x04	; 4
    3b26:	0e 94 60 09 	call	0x12c0	; 0x12c0 <TIMER_voidInit>

DIO_enuSetPortDirection(DIO_u8_PORTA,DIO_u8_PORT_OUTPUT);
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	6f ef       	ldi	r22, 0xFF	; 255
    3b2e:	0e 94 0b 14 	call	0x2816	; 0x2816 <DIO_enuSetPortDirection>

TCNT1 = 34286;   // for 1 sec at 8 MHz and 256 prescale
    3b32:	ec e4       	ldi	r30, 0x4C	; 76
    3b34:	f0 e0       	ldi	r31, 0x00	; 0
    3b36:	8e ee       	ldi	r24, 0xEE	; 238
    3b38:	95 e8       	ldi	r25, 0x85	; 133
    3b3a:	91 83       	std	Z+1, r25	; 0x01
    3b3c:	80 83       	st	Z, r24


//u8 mode;

u8 digit=0;
    3b3e:	1b 82       	std	Y+3, r1	; 0x03
u8 clkDigits[6]={hrs2,hrs1,min2,min1,sec2,sec1};
    3b40:	80 91 da 00 	lds	r24, 0x00DA
    3b44:	90 91 d9 00 	lds	r25, 0x00D9
    3b48:	20 91 d8 00 	lds	r18, 0x00D8
    3b4c:	30 91 d7 00 	lds	r19, 0x00D7
    3b50:	40 91 d6 00 	lds	r20, 0x00D6
    3b54:	50 91 d5 00 	lds	r21, 0x00D5
    3b58:	8f 87       	std	Y+15, r24	; 0x0f
    3b5a:	98 8b       	std	Y+16, r25	; 0x10
    3b5c:	29 8b       	std	Y+17, r18	; 0x11
    3b5e:	3a 8b       	std	Y+18, r19	; 0x12
    3b60:	4b 8b       	std	Y+19, r20	; 0x13
    3b62:	5c 8b       	std	Y+20, r21	; 0x14

u8 Welcome_Massage[]="Welcome";
    3b64:	ce 01       	movw	r24, r28
    3b66:	45 96       	adiw	r24, 0x15	; 21
    3b68:	a2 96       	adiw	r28, 0x22	; 34
    3b6a:	9f af       	std	Y+63, r25	; 0x3f
    3b6c:	8e af       	std	Y+62, r24	; 0x3e
    3b6e:	a2 97       	sbiw	r28, 0x22	; 34
    3b70:	e0 e6       	ldi	r30, 0x60	; 96
    3b72:	f0 e0       	ldi	r31, 0x00	; 0
    3b74:	a4 96       	adiw	r28, 0x24	; 36
    3b76:	ff af       	std	Y+63, r31	; 0x3f
    3b78:	ee af       	std	Y+62, r30	; 0x3e
    3b7a:	a4 97       	sbiw	r28, 0x24	; 36
    3b7c:	f8 e0       	ldi	r31, 0x08	; 8
    3b7e:	a5 96       	adiw	r28, 0x25	; 37
    3b80:	ff af       	std	Y+63, r31	; 0x3f
    3b82:	a5 97       	sbiw	r28, 0x25	; 37
    3b84:	a4 96       	adiw	r28, 0x24	; 36
    3b86:	ee ad       	ldd	r30, Y+62	; 0x3e
    3b88:	ff ad       	ldd	r31, Y+63	; 0x3f
    3b8a:	a4 97       	sbiw	r28, 0x24	; 36
    3b8c:	00 80       	ld	r0, Z
    3b8e:	a4 96       	adiw	r28, 0x24	; 36
    3b90:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b92:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b94:	a4 97       	sbiw	r28, 0x24	; 36
    3b96:	01 96       	adiw	r24, 0x01	; 1
    3b98:	a4 96       	adiw	r28, 0x24	; 36
    3b9a:	9f af       	std	Y+63, r25	; 0x3f
    3b9c:	8e af       	std	Y+62, r24	; 0x3e
    3b9e:	a4 97       	sbiw	r28, 0x24	; 36
    3ba0:	a2 96       	adiw	r28, 0x22	; 34
    3ba2:	ee ad       	ldd	r30, Y+62	; 0x3e
    3ba4:	ff ad       	ldd	r31, Y+63	; 0x3f
    3ba6:	a2 97       	sbiw	r28, 0x22	; 34
    3ba8:	00 82       	st	Z, r0
    3baa:	a2 96       	adiw	r28, 0x22	; 34
    3bac:	8e ad       	ldd	r24, Y+62	; 0x3e
    3bae:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bb0:	a2 97       	sbiw	r28, 0x22	; 34
    3bb2:	01 96       	adiw	r24, 0x01	; 1
    3bb4:	a2 96       	adiw	r28, 0x22	; 34
    3bb6:	9f af       	std	Y+63, r25	; 0x3f
    3bb8:	8e af       	std	Y+62, r24	; 0x3e
    3bba:	a2 97       	sbiw	r28, 0x22	; 34
    3bbc:	a5 96       	adiw	r28, 0x25	; 37
    3bbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bc0:	a5 97       	sbiw	r28, 0x25	; 37
    3bc2:	91 50       	subi	r25, 0x01	; 1
    3bc4:	a5 96       	adiw	r28, 0x25	; 37
    3bc6:	9f af       	std	Y+63, r25	; 0x3f
    3bc8:	a5 97       	sbiw	r28, 0x25	; 37
    3bca:	a5 96       	adiw	r28, 0x25	; 37
    3bcc:	ef ad       	ldd	r30, Y+63	; 0x3f
    3bce:	a5 97       	sbiw	r28, 0x25	; 37
    3bd0:	ee 23       	and	r30, r30
    3bd2:	c1 f6       	brne	.-80     	; 0x3b84 <main+0x148>
u8 Set_Massage[]="Set the clock";
    3bd4:	ce 01       	movw	r24, r28
    3bd6:	4d 96       	adiw	r24, 0x1d	; 29
    3bd8:	a7 96       	adiw	r28, 0x27	; 39
    3bda:	9f af       	std	Y+63, r25	; 0x3f
    3bdc:	8e af       	std	Y+62, r24	; 0x3e
    3bde:	a7 97       	sbiw	r28, 0x27	; 39
    3be0:	e8 e6       	ldi	r30, 0x68	; 104
    3be2:	f0 e0       	ldi	r31, 0x00	; 0
    3be4:	a9 96       	adiw	r28, 0x29	; 41
    3be6:	ff af       	std	Y+63, r31	; 0x3f
    3be8:	ee af       	std	Y+62, r30	; 0x3e
    3bea:	a9 97       	sbiw	r28, 0x29	; 41
    3bec:	fe e0       	ldi	r31, 0x0E	; 14
    3bee:	aa 96       	adiw	r28, 0x2a	; 42
    3bf0:	ff af       	std	Y+63, r31	; 0x3f
    3bf2:	aa 97       	sbiw	r28, 0x2a	; 42
    3bf4:	a9 96       	adiw	r28, 0x29	; 41
    3bf6:	ee ad       	ldd	r30, Y+62	; 0x3e
    3bf8:	ff ad       	ldd	r31, Y+63	; 0x3f
    3bfa:	a9 97       	sbiw	r28, 0x29	; 41
    3bfc:	00 80       	ld	r0, Z
    3bfe:	a9 96       	adiw	r28, 0x29	; 41
    3c00:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c02:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c04:	a9 97       	sbiw	r28, 0x29	; 41
    3c06:	01 96       	adiw	r24, 0x01	; 1
    3c08:	a9 96       	adiw	r28, 0x29	; 41
    3c0a:	9f af       	std	Y+63, r25	; 0x3f
    3c0c:	8e af       	std	Y+62, r24	; 0x3e
    3c0e:	a9 97       	sbiw	r28, 0x29	; 41
    3c10:	a7 96       	adiw	r28, 0x27	; 39
    3c12:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c14:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c16:	a7 97       	sbiw	r28, 0x27	; 39
    3c18:	00 82       	st	Z, r0
    3c1a:	a7 96       	adiw	r28, 0x27	; 39
    3c1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c20:	a7 97       	sbiw	r28, 0x27	; 39
    3c22:	01 96       	adiw	r24, 0x01	; 1
    3c24:	a7 96       	adiw	r28, 0x27	; 39
    3c26:	9f af       	std	Y+63, r25	; 0x3f
    3c28:	8e af       	std	Y+62, r24	; 0x3e
    3c2a:	a7 97       	sbiw	r28, 0x27	; 39
    3c2c:	aa 96       	adiw	r28, 0x2a	; 42
    3c2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c30:	aa 97       	sbiw	r28, 0x2a	; 42
    3c32:	91 50       	subi	r25, 0x01	; 1
    3c34:	aa 96       	adiw	r28, 0x2a	; 42
    3c36:	9f af       	std	Y+63, r25	; 0x3f
    3c38:	aa 97       	sbiw	r28, 0x2a	; 42
    3c3a:	aa 96       	adiw	r28, 0x2a	; 42
    3c3c:	ef ad       	ldd	r30, Y+63	; 0x3f
    3c3e:	aa 97       	sbiw	r28, 0x2a	; 42
    3c40:	ee 23       	and	r30, r30
    3c42:	c1 f6       	brne	.-80     	; 0x3bf4 <main+0x1b8>
u8 clock_Massage[]="The Clock mode";
    3c44:	ce 01       	movw	r24, r28
    3c46:	8b 96       	adiw	r24, 0x2b	; 43
    3c48:	ac 96       	adiw	r28, 0x2c	; 44
    3c4a:	9f af       	std	Y+63, r25	; 0x3f
    3c4c:	8e af       	std	Y+62, r24	; 0x3e
    3c4e:	ac 97       	sbiw	r28, 0x2c	; 44
    3c50:	e6 e7       	ldi	r30, 0x76	; 118
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	ae 96       	adiw	r28, 0x2e	; 46
    3c56:	ff af       	std	Y+63, r31	; 0x3f
    3c58:	ee af       	std	Y+62, r30	; 0x3e
    3c5a:	ae 97       	sbiw	r28, 0x2e	; 46
    3c5c:	ff e0       	ldi	r31, 0x0F	; 15
    3c5e:	af 96       	adiw	r28, 0x2f	; 47
    3c60:	ff af       	std	Y+63, r31	; 0x3f
    3c62:	af 97       	sbiw	r28, 0x2f	; 47
    3c64:	ae 96       	adiw	r28, 0x2e	; 46
    3c66:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c68:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c6a:	ae 97       	sbiw	r28, 0x2e	; 46
    3c6c:	00 80       	ld	r0, Z
    3c6e:	ae 96       	adiw	r28, 0x2e	; 46
    3c70:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c72:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c74:	ae 97       	sbiw	r28, 0x2e	; 46
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	ae 96       	adiw	r28, 0x2e	; 46
    3c7a:	9f af       	std	Y+63, r25	; 0x3f
    3c7c:	8e af       	std	Y+62, r24	; 0x3e
    3c7e:	ae 97       	sbiw	r28, 0x2e	; 46
    3c80:	ac 96       	adiw	r28, 0x2c	; 44
    3c82:	ee ad       	ldd	r30, Y+62	; 0x3e
    3c84:	ff ad       	ldd	r31, Y+63	; 0x3f
    3c86:	ac 97       	sbiw	r28, 0x2c	; 44
    3c88:	00 82       	st	Z, r0
    3c8a:	ac 96       	adiw	r28, 0x2c	; 44
    3c8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c90:	ac 97       	sbiw	r28, 0x2c	; 44
    3c92:	01 96       	adiw	r24, 0x01	; 1
    3c94:	ac 96       	adiw	r28, 0x2c	; 44
    3c96:	9f af       	std	Y+63, r25	; 0x3f
    3c98:	8e af       	std	Y+62, r24	; 0x3e
    3c9a:	ac 97       	sbiw	r28, 0x2c	; 44
    3c9c:	af 96       	adiw	r28, 0x2f	; 47
    3c9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ca0:	af 97       	sbiw	r28, 0x2f	; 47
    3ca2:	91 50       	subi	r25, 0x01	; 1
    3ca4:	af 96       	adiw	r28, 0x2f	; 47
    3ca6:	9f af       	std	Y+63, r25	; 0x3f
    3ca8:	af 97       	sbiw	r28, 0x2f	; 47
    3caa:	af 96       	adiw	r28, 0x2f	; 47
    3cac:	ef ad       	ldd	r30, Y+63	; 0x3f
    3cae:	af 97       	sbiw	r28, 0x2f	; 47
    3cb0:	ee 23       	and	r30, r30
    3cb2:	c1 f6       	brne	.-80     	; 0x3c64 <main+0x228>
u8 timer_Massage[]="The Timer mode";
    3cb4:	ce 01       	movw	r24, r28
    3cb6:	ca 96       	adiw	r24, 0x3a	; 58
    3cb8:	e1 96       	adiw	r28, 0x31	; 49
    3cba:	9f af       	std	Y+63, r25	; 0x3f
    3cbc:	8e af       	std	Y+62, r24	; 0x3e
    3cbe:	e1 97       	sbiw	r28, 0x31	; 49
    3cc0:	e5 e8       	ldi	r30, 0x85	; 133
    3cc2:	f0 e0       	ldi	r31, 0x00	; 0
    3cc4:	e3 96       	adiw	r28, 0x33	; 51
    3cc6:	ff af       	std	Y+63, r31	; 0x3f
    3cc8:	ee af       	std	Y+62, r30	; 0x3e
    3cca:	e3 97       	sbiw	r28, 0x33	; 51
    3ccc:	ff e0       	ldi	r31, 0x0F	; 15
    3cce:	e4 96       	adiw	r28, 0x34	; 52
    3cd0:	ff af       	std	Y+63, r31	; 0x3f
    3cd2:	e4 97       	sbiw	r28, 0x34	; 52
    3cd4:	e3 96       	adiw	r28, 0x33	; 51
    3cd6:	ee ad       	ldd	r30, Y+62	; 0x3e
    3cd8:	ff ad       	ldd	r31, Y+63	; 0x3f
    3cda:	e3 97       	sbiw	r28, 0x33	; 51
    3cdc:	00 80       	ld	r0, Z
    3cde:	e3 96       	adiw	r28, 0x33	; 51
    3ce0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ce2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ce4:	e3 97       	sbiw	r28, 0x33	; 51
    3ce6:	01 96       	adiw	r24, 0x01	; 1
    3ce8:	e3 96       	adiw	r28, 0x33	; 51
    3cea:	9f af       	std	Y+63, r25	; 0x3f
    3cec:	8e af       	std	Y+62, r24	; 0x3e
    3cee:	e3 97       	sbiw	r28, 0x33	; 51
    3cf0:	e1 96       	adiw	r28, 0x31	; 49
    3cf2:	ee ad       	ldd	r30, Y+62	; 0x3e
    3cf4:	ff ad       	ldd	r31, Y+63	; 0x3f
    3cf6:	e1 97       	sbiw	r28, 0x31	; 49
    3cf8:	00 82       	st	Z, r0
    3cfa:	e1 96       	adiw	r28, 0x31	; 49
    3cfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d00:	e1 97       	sbiw	r28, 0x31	; 49
    3d02:	01 96       	adiw	r24, 0x01	; 1
    3d04:	e1 96       	adiw	r28, 0x31	; 49
    3d06:	9f af       	std	Y+63, r25	; 0x3f
    3d08:	8e af       	std	Y+62, r24	; 0x3e
    3d0a:	e1 97       	sbiw	r28, 0x31	; 49
    3d0c:	e4 96       	adiw	r28, 0x34	; 52
    3d0e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d10:	e4 97       	sbiw	r28, 0x34	; 52
    3d12:	91 50       	subi	r25, 0x01	; 1
    3d14:	e4 96       	adiw	r28, 0x34	; 52
    3d16:	9f af       	std	Y+63, r25	; 0x3f
    3d18:	e4 97       	sbiw	r28, 0x34	; 52
    3d1a:	e4 96       	adiw	r28, 0x34	; 52
    3d1c:	ef ad       	ldd	r30, Y+63	; 0x3f
    3d1e:	e4 97       	sbiw	r28, 0x34	; 52
    3d20:	ee 23       	and	r30, r30
    3d22:	c1 f6       	brne	.-80     	; 0x3cd4 <main+0x298>
u8 clock_selection_Massage[]="Clk mode:Press + ";
    3d24:	ce 01       	movw	r24, r28
    3d26:	87 5b       	subi	r24, 0xB7	; 183
    3d28:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2a:	e6 96       	adiw	r28, 0x36	; 54
    3d2c:	9f af       	std	Y+63, r25	; 0x3f
    3d2e:	8e af       	std	Y+62, r24	; 0x3e
    3d30:	e6 97       	sbiw	r28, 0x36	; 54
    3d32:	84 e9       	ldi	r24, 0x94	; 148
    3d34:	90 e0       	ldi	r25, 0x00	; 0
    3d36:	e8 96       	adiw	r28, 0x38	; 56
    3d38:	9f af       	std	Y+63, r25	; 0x3f
    3d3a:	8e af       	std	Y+62, r24	; 0x3e
    3d3c:	e8 97       	sbiw	r28, 0x38	; 56
    3d3e:	92 e1       	ldi	r25, 0x12	; 18
    3d40:	e9 96       	adiw	r28, 0x39	; 57
    3d42:	9f af       	std	Y+63, r25	; 0x3f
    3d44:	e9 97       	sbiw	r28, 0x39	; 57
    3d46:	e8 96       	adiw	r28, 0x38	; 56
    3d48:	ee ad       	ldd	r30, Y+62	; 0x3e
    3d4a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d4c:	e8 97       	sbiw	r28, 0x38	; 56
    3d4e:	00 80       	ld	r0, Z
    3d50:	e8 96       	adiw	r28, 0x38	; 56
    3d52:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d54:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d56:	e8 97       	sbiw	r28, 0x38	; 56
    3d58:	01 96       	adiw	r24, 0x01	; 1
    3d5a:	e8 96       	adiw	r28, 0x38	; 56
    3d5c:	9f af       	std	Y+63, r25	; 0x3f
    3d5e:	8e af       	std	Y+62, r24	; 0x3e
    3d60:	e8 97       	sbiw	r28, 0x38	; 56
    3d62:	e6 96       	adiw	r28, 0x36	; 54
    3d64:	ee ad       	ldd	r30, Y+62	; 0x3e
    3d66:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d68:	e6 97       	sbiw	r28, 0x36	; 54
    3d6a:	00 82       	st	Z, r0
    3d6c:	e6 96       	adiw	r28, 0x36	; 54
    3d6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d70:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d72:	e6 97       	sbiw	r28, 0x36	; 54
    3d74:	01 96       	adiw	r24, 0x01	; 1
    3d76:	e6 96       	adiw	r28, 0x36	; 54
    3d78:	9f af       	std	Y+63, r25	; 0x3f
    3d7a:	8e af       	std	Y+62, r24	; 0x3e
    3d7c:	e6 97       	sbiw	r28, 0x36	; 54
    3d7e:	e9 96       	adiw	r28, 0x39	; 57
    3d80:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d82:	e9 97       	sbiw	r28, 0x39	; 57
    3d84:	91 50       	subi	r25, 0x01	; 1
    3d86:	e9 96       	adiw	r28, 0x39	; 57
    3d88:	9f af       	std	Y+63, r25	; 0x3f
    3d8a:	e9 97       	sbiw	r28, 0x39	; 57
    3d8c:	e9 96       	adiw	r28, 0x39	; 57
    3d8e:	ef ad       	ldd	r30, Y+63	; 0x3f
    3d90:	e9 97       	sbiw	r28, 0x39	; 57
    3d92:	ee 23       	and	r30, r30
    3d94:	c1 f6       	brne	.-80     	; 0x3d46 <main+0x30a>

Lcd_WriteString(&Lcd1,Welcome_Massage);
    3d96:	8a ec       	ldi	r24, 0xCA	; 202
    3d98:	90 e0       	ldi	r25, 0x00	; 0
    3d9a:	9e 01       	movw	r18, r28
    3d9c:	2b 5e       	subi	r18, 0xEB	; 235
    3d9e:	3f 4f       	sbci	r19, 0xFF	; 255
    3da0:	b9 01       	movw	r22, r18
    3da2:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <Lcd_WriteString>

while (1)
  {


u16 locVarPressedKey=Keypad_voidGetPressedKey();
    3da6:	0e 94 4a 1b 	call	0x3694	; 0x3694 <Keypad_voidGetPressedKey>
    3daa:	9a 83       	std	Y+2, r25	; 0x02
    3dac:	89 83       	std	Y+1, r24	; 0x01

 if(locVarPressedKey!=KEY_NOT_PRESSED)
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
    3db0:	9a 81       	ldd	r25, Y+2	; 0x02
    3db2:	8f 3f       	cpi	r24, 0xFF	; 255
    3db4:	91 05       	cpc	r25, r1
    3db6:	b9 f3       	breq	.-18     	; 0x3da6 <main+0x36a>
  {
	 //Lcd_WriteString(&Lcd1,clock_selection_Massage);

	if(locVarPressedKey==5)
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
    3dba:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbc:	85 30       	cpi	r24, 0x05	; 5
    3dbe:	91 05       	cpc	r25, r1
    3dc0:	09 f0       	breq	.+2      	; 0x3dc4 <main+0x388>
    3dc2:	7b c0       	rjmp	.+246    	; 0x3eba <main+0x47e>
	{
		CLR_BIT(TCCR1B,2); CLR_BIT(TCCR1B,1); CLR_BIT(TCCR1B,0); //to stop timer
    3dc4:	ae e4       	ldi	r26, 0x4E	; 78
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	ee e4       	ldi	r30, 0x4E	; 78
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
    3dce:	8b 7f       	andi	r24, 0xFB	; 251
    3dd0:	8c 93       	st	X, r24
    3dd2:	ae e4       	ldi	r26, 0x4E	; 78
    3dd4:	b0 e0       	ldi	r27, 0x00	; 0
    3dd6:	ee e4       	ldi	r30, 0x4E	; 78
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	80 81       	ld	r24, Z
    3ddc:	8d 7f       	andi	r24, 0xFD	; 253
    3dde:	8c 93       	st	X, r24
    3de0:	ae e4       	ldi	r26, 0x4E	; 78
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	ee e4       	ldi	r30, 0x4E	; 78
    3de6:	f0 e0       	ldi	r31, 0x00	; 0
    3de8:	80 81       	ld	r24, Z
    3dea:	8e 7f       	andi	r24, 0xFE	; 254
    3dec:	8c 93       	st	X, r24
		Lcd_vidSendCommand(&Lcd1,CLEAR_THE_SCREEN);
    3dee:	8a ec       	ldi	r24, 0xCA	; 202
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	61 e0       	ldi	r22, 0x01	; 1
    3df4:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Lcd_vidSendCommand>
		Lcd_WriteString(&Lcd1,clock_Massage);
    3df8:	8a ec       	ldi	r24, 0xCA	; 202
    3dfa:	90 e0       	ldi	r25, 0x00	; 0
    3dfc:	9e 01       	movw	r18, r28
    3dfe:	25 5d       	subi	r18, 0xD5	; 213
    3e00:	3f 4f       	sbci	r19, 0xFF	; 255
    3e02:	b9 01       	movw	r22, r18
    3e04:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <Lcd_WriteString>
		Lcd_gotoPosition(&Lcd1,1,0);
    3e08:	8a ec       	ldi	r24, 0xCA	; 202
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	61 e0       	ldi	r22, 0x01	; 1
    3e0e:	40 e0       	ldi	r20, 0x00	; 0
    3e10:	0e 94 16 1b 	call	0x362c	; 0x362c <Lcd_gotoPosition>
		Lcd_WriteString(&Lcd1,Set_Massage);
    3e14:	8a ec       	ldi	r24, 0xCA	; 202
    3e16:	90 e0       	ldi	r25, 0x00	; 0
    3e18:	9e 01       	movw	r18, r28
    3e1a:	23 5e       	subi	r18, 0xE3	; 227
    3e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e1e:	b9 01       	movw	r22, r18
    3e20:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <Lcd_WriteString>
		segClearAllDigits();
    3e24:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <segClearAllDigits>
    3e28:	43 c0       	rjmp	.+134    	; 0x3eb0 <main+0x474>

		while(digit<=5){

			segDataDisplay();
    3e2a:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <segDataDisplay>

		do{
					locVarPressedKey=Keypad_voidGetPressedKey();
    3e2e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <Keypad_voidGetPressedKey>
    3e32:	9a 83       	std	Y+2, r25	; 0x02
    3e34:	89 83       	std	Y+1, r24	; 0x01
		  }while (locVarPressedKey==KEY_NOT_PRESSED);
    3e36:	89 81       	ldd	r24, Y+1	; 0x01
    3e38:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e3c:	91 05       	cpc	r25, r1
    3e3e:	b9 f3       	breq	.-18     	; 0x3e2e <main+0x3f2>


		if(locVarPressedKey!=KEY_NOT_PRESSED &&(locVarPressedKey>=0&&locVarPressedKey<=9))
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	9a 81       	ldd	r25, Y+2	; 0x02
    3e44:	8f 3f       	cpi	r24, 0xFF	; 255
    3e46:	91 05       	cpc	r25, r1
    3e48:	81 f1       	breq	.+96     	; 0x3eaa <main+0x46e>
    3e4a:	89 81       	ldd	r24, Y+1	; 0x01
    3e4c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4e:	8a 30       	cpi	r24, 0x0A	; 10
    3e50:	91 05       	cpc	r25, r1
    3e52:	58 f5       	brcc	.+86     	; 0x3eaa <main+0x46e>
		  {
			clkDigits[digit]=locVarPressedKey;
    3e54:	8b 81       	ldd	r24, Y+3	; 0x03
    3e56:	28 2f       	mov	r18, r24
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	49 81       	ldd	r20, Y+1	; 0x01
    3e5c:	ce 01       	movw	r24, r28
    3e5e:	0f 96       	adiw	r24, 0x0f	; 15
    3e60:	fc 01       	movw	r30, r24
    3e62:	e2 0f       	add	r30, r18
    3e64:	f3 1f       	adc	r31, r19
    3e66:	40 83       	st	Z, r20
			digit++;
    3e68:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6a:	8f 5f       	subi	r24, 0xFF	; 255
    3e6c:	8b 83       	std	Y+3, r24	; 0x03
    3e6e:	1d c0       	rjmp	.+58     	; 0x3eaa <main+0x46e>

		  }

		while(digit==6)
		  {
			TCNT1 = 34286;
    3e70:	ec e4       	ldi	r30, 0x4C	; 76
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	8e ee       	ldi	r24, 0xEE	; 238
    3e76:	95 e8       	ldi	r25, 0x85	; 133
    3e78:	91 83       	std	Z+1, r25	; 0x01
    3e7a:	80 83       	st	Z, r24
			 SET_BIT(TCCR1B,2); CLR_BIT(TCCR1B,1); CLR_BIT(TCCR1B,0); //to start
    3e7c:	ae e4       	ldi	r26, 0x4E	; 78
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	ee e4       	ldi	r30, 0x4E	; 78
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	80 81       	ld	r24, Z
    3e86:	84 60       	ori	r24, 0x04	; 4
    3e88:	8c 93       	st	X, r24
    3e8a:	ae e4       	ldi	r26, 0x4E	; 78
    3e8c:	b0 e0       	ldi	r27, 0x00	; 0
    3e8e:	ee e4       	ldi	r30, 0x4E	; 78
    3e90:	f0 e0       	ldi	r31, 0x00	; 0
    3e92:	80 81       	ld	r24, Z
    3e94:	8d 7f       	andi	r24, 0xFD	; 253
    3e96:	8c 93       	st	X, r24
    3e98:	ae e4       	ldi	r26, 0x4E	; 78
    3e9a:	b0 e0       	ldi	r27, 0x00	; 0
    3e9c:	ee e4       	ldi	r30, 0x4E	; 78
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	8e 7f       	andi	r24, 0xFE	; 254
    3ea4:	8c 93       	st	X, r24
			segDataDisplay();
    3ea6:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <segDataDisplay>



		  }

		while(digit==6)
    3eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3eac:	86 30       	cpi	r24, 0x06	; 6
    3eae:	01 f3       	breq	.-64     	; 0x3e70 <main+0x434>
		Lcd_WriteString(&Lcd1,clock_Massage);
		Lcd_gotoPosition(&Lcd1,1,0);
		Lcd_WriteString(&Lcd1,Set_Massage);
		segClearAllDigits();

		while(digit<=5){
    3eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb2:	86 30       	cpi	r24, 0x06	; 6
    3eb4:	08 f4       	brcc	.+2      	; 0x3eb8 <main+0x47c>
    3eb6:	b9 cf       	rjmp	.-142    	; 0x3e2a <main+0x3ee>
    3eb8:	76 cf       	rjmp	.-276    	; 0x3da6 <main+0x36a>

	 }



	else if(locVarPressedKey==6)
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
    3ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ebe:	86 30       	cpi	r24, 0x06	; 6
    3ec0:	91 05       	cpc	r25, r1
    3ec2:	09 f0       	breq	.+2      	; 0x3ec6 <main+0x48a>
    3ec4:	70 cf       	rjmp	.-288    	; 0x3da6 <main+0x36a>
	{
		Lcd_vidSendCommand(&Lcd1,CLEAR_THE_SCREEN);
    3ec6:	8a ec       	ldi	r24, 0xCA	; 202
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	61 e0       	ldi	r22, 0x01	; 1
    3ecc:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Lcd_vidSendCommand>
				Lcd_WriteString(&Lcd1,timer_Massage);
    3ed0:	8a ec       	ldi	r24, 0xCA	; 202
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	9e 01       	movw	r18, r28
    3ed6:	26 5c       	subi	r18, 0xC6	; 198
    3ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eda:	b9 01       	movw	r22, r18
    3edc:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <Lcd_WriteString>

		segClearAllDigits();
    3ee0:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <segClearAllDigits>

		while(1)
		{
			segDataDisplay();
    3ee4:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <segDataDisplay>

			if(Keypad_voidGetPressedKey()==5){
    3ee8:	0e 94 4a 1b 	call	0x3694	; 0x3694 <Keypad_voidGetPressedKey>
    3eec:	85 30       	cpi	r24, 0x05	; 5
    3eee:	91 05       	cpc	r25, r1
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <main+0x4b8>
    3ef2:	59 cf       	rjmp	.-334    	; 0x3da6 <main+0x36a>
    3ef4:	f7 cf       	rjmp	.-18     	; 0x3ee4 <main+0x4a8>

00003ef6 <segDataDisplay>:
}
}

void segDataDisplay(void)

			{   DIO_enuSetPortValue(DIO_u8_PORTA,0b11111110);
    3ef6:	0f 93       	push	r16
    3ef8:	1f 93       	push	r17
    3efa:	df 93       	push	r29
    3efc:	cf 93       	push	r28
    3efe:	cd b7       	in	r28, 0x3d	; 61
    3f00:	de b7       	in	r29, 0x3e	; 62
    3f02:	c4 55       	subi	r28, 0x54	; 84
    3f04:	d0 40       	sbci	r29, 0x00	; 0
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	f8 94       	cli
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	6e ef       	ldi	r22, 0xFE	; 254
    3f14:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>
				SEGMENT_voidSetSegmentVal(&segments,seven_segmentArray[sec1]);
    3f18:	80 91 d5 00 	lds	r24, 0x00D5
    3f1c:	88 2f       	mov	r24, r24
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	fc 01       	movw	r30, r24
    3f22:	e2 54       	subi	r30, 0x42	; 66
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	20 81       	ld	r18, Z
    3f28:	88 ec       	ldi	r24, 0xC8	; 200
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	62 2f       	mov	r22, r18
    3f2e:	0e 94 d7 16 	call	0x2dae	; 0x2dae <SEGMENT_voidSetSegmentVal>
    3f32:	fe 01       	movw	r30, r28
    3f34:	ef 5a       	subi	r30, 0xAF	; 175
    3f36:	ff 4f       	sbci	r31, 0xFF	; 255
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	a0 e0       	ldi	r26, 0x00	; 0
    3f3e:	bf e3       	ldi	r27, 0x3F	; 63
    3f40:	80 83       	st	Z, r24
    3f42:	91 83       	std	Z+1, r25	; 0x01
    3f44:	a2 83       	std	Z+2, r26	; 0x02
    3f46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f48:	8e 01       	movw	r16, r28
    3f4a:	03 5b       	subi	r16, 0xB3	; 179
    3f4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4e:	fe 01       	movw	r30, r28
    3f50:	ef 5a       	subi	r30, 0xAF	; 175
    3f52:	ff 4f       	sbci	r31, 0xFF	; 255
    3f54:	60 81       	ld	r22, Z
    3f56:	71 81       	ldd	r23, Z+1	; 0x01
    3f58:	82 81       	ldd	r24, Z+2	; 0x02
    3f5a:	93 81       	ldd	r25, Z+3	; 0x03
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	4a ef       	ldi	r20, 0xFA	; 250
    3f62:	54 e4       	ldi	r21, 0x44	; 68
    3f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	f8 01       	movw	r30, r16
    3f6e:	80 83       	st	Z, r24
    3f70:	91 83       	std	Z+1, r25	; 0x01
    3f72:	a2 83       	std	Z+2, r26	; 0x02
    3f74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f76:	fe 01       	movw	r30, r28
    3f78:	e3 5b       	subi	r30, 0xB3	; 179
    3f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7c:	60 81       	ld	r22, Z
    3f7e:	71 81       	ldd	r23, Z+1	; 0x01
    3f80:	82 81       	ldd	r24, Z+2	; 0x02
    3f82:	93 81       	ldd	r25, Z+3	; 0x03
    3f84:	20 e0       	ldi	r18, 0x00	; 0
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	40 e8       	ldi	r20, 0x80	; 128
    3f8a:	5f e3       	ldi	r21, 0x3F	; 63
    3f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f90:	88 23       	and	r24, r24
    3f92:	44 f4       	brge	.+16     	; 0x3fa4 <segDataDisplay+0xae>
		__ticks = 1;
    3f94:	fe 01       	movw	r30, r28
    3f96:	e5 5b       	subi	r30, 0xB5	; 181
    3f98:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	91 83       	std	Z+1, r25	; 0x01
    3fa0:	80 83       	st	Z, r24
    3fa2:	64 c0       	rjmp	.+200    	; 0x406c <segDataDisplay+0x176>
	else if (__tmp > 65535)
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e3 5b       	subi	r30, 0xB3	; 179
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	60 81       	ld	r22, Z
    3fac:	71 81       	ldd	r23, Z+1	; 0x01
    3fae:	82 81       	ldd	r24, Z+2	; 0x02
    3fb0:	93 81       	ldd	r25, Z+3	; 0x03
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	3f ef       	ldi	r19, 0xFF	; 255
    3fb6:	4f e7       	ldi	r20, 0x7F	; 127
    3fb8:	57 e4       	ldi	r21, 0x47	; 71
    3fba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3fbe:	18 16       	cp	r1, r24
    3fc0:	0c f0       	brlt	.+2      	; 0x3fc4 <segDataDisplay+0xce>
    3fc2:	43 c0       	rjmp	.+134    	; 0x404a <segDataDisplay+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fc4:	fe 01       	movw	r30, r28
    3fc6:	ef 5a       	subi	r30, 0xAF	; 175
    3fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fca:	60 81       	ld	r22, Z
    3fcc:	71 81       	ldd	r23, Z+1	; 0x01
    3fce:	82 81       	ldd	r24, Z+2	; 0x02
    3fd0:	93 81       	ldd	r25, Z+3	; 0x03
    3fd2:	20 e0       	ldi	r18, 0x00	; 0
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	40 e2       	ldi	r20, 0x20	; 32
    3fd8:	51 e4       	ldi	r21, 0x41	; 65
    3fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fde:	dc 01       	movw	r26, r24
    3fe0:	cb 01       	movw	r24, r22
    3fe2:	8e 01       	movw	r16, r28
    3fe4:	05 5b       	subi	r16, 0xB5	; 181
    3fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe8:	bc 01       	movw	r22, r24
    3fea:	cd 01       	movw	r24, r26
    3fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff0:	dc 01       	movw	r26, r24
    3ff2:	cb 01       	movw	r24, r22
    3ff4:	f8 01       	movw	r30, r16
    3ff6:	91 83       	std	Z+1, r25	; 0x01
    3ff8:	80 83       	st	Z, r24
    3ffa:	1f c0       	rjmp	.+62     	; 0x403a <segDataDisplay+0x144>
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e7 5b       	subi	r30, 0xB7	; 183
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	88 ec       	ldi	r24, 0xC8	; 200
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	91 83       	std	Z+1, r25	; 0x01
    4008:	80 83       	st	Z, r24
    400a:	fe 01       	movw	r30, r28
    400c:	e7 5b       	subi	r30, 0xB7	; 183
    400e:	ff 4f       	sbci	r31, 0xFF	; 255
    4010:	80 81       	ld	r24, Z
    4012:	91 81       	ldd	r25, Z+1	; 0x01
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	f1 f7       	brne	.-4      	; 0x4014 <segDataDisplay+0x11e>
    4018:	fe 01       	movw	r30, r28
    401a:	e7 5b       	subi	r30, 0xB7	; 183
    401c:	ff 4f       	sbci	r31, 0xFF	; 255
    401e:	91 83       	std	Z+1, r25	; 0x01
    4020:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4022:	de 01       	movw	r26, r28
    4024:	a5 5b       	subi	r26, 0xB5	; 181
    4026:	bf 4f       	sbci	r27, 0xFF	; 255
    4028:	fe 01       	movw	r30, r28
    402a:	e5 5b       	subi	r30, 0xB5	; 181
    402c:	ff 4f       	sbci	r31, 0xFF	; 255
    402e:	80 81       	ld	r24, Z
    4030:	91 81       	ldd	r25, Z+1	; 0x01
    4032:	01 97       	sbiw	r24, 0x01	; 1
    4034:	11 96       	adiw	r26, 0x01	; 1
    4036:	9c 93       	st	X, r25
    4038:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    403a:	fe 01       	movw	r30, r28
    403c:	e5 5b       	subi	r30, 0xB5	; 181
    403e:	ff 4f       	sbci	r31, 0xFF	; 255
    4040:	80 81       	ld	r24, Z
    4042:	91 81       	ldd	r25, Z+1	; 0x01
    4044:	00 97       	sbiw	r24, 0x00	; 0
    4046:	d1 f6       	brne	.-76     	; 0x3ffc <segDataDisplay+0x106>
    4048:	27 c0       	rjmp	.+78     	; 0x4098 <segDataDisplay+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    404a:	8e 01       	movw	r16, r28
    404c:	05 5b       	subi	r16, 0xB5	; 181
    404e:	1f 4f       	sbci	r17, 0xFF	; 255
    4050:	fe 01       	movw	r30, r28
    4052:	e3 5b       	subi	r30, 0xB3	; 179
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	60 81       	ld	r22, Z
    4058:	71 81       	ldd	r23, Z+1	; 0x01
    405a:	82 81       	ldd	r24, Z+2	; 0x02
    405c:	93 81       	ldd	r25, Z+3	; 0x03
    405e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4062:	dc 01       	movw	r26, r24
    4064:	cb 01       	movw	r24, r22
    4066:	f8 01       	movw	r30, r16
    4068:	91 83       	std	Z+1, r25	; 0x01
    406a:	80 83       	st	Z, r24
    406c:	de 01       	movw	r26, r28
    406e:	a9 5b       	subi	r26, 0xB9	; 185
    4070:	bf 4f       	sbci	r27, 0xFF	; 255
    4072:	fe 01       	movw	r30, r28
    4074:	e5 5b       	subi	r30, 0xB5	; 181
    4076:	ff 4f       	sbci	r31, 0xFF	; 255
    4078:	80 81       	ld	r24, Z
    407a:	91 81       	ldd	r25, Z+1	; 0x01
    407c:	8d 93       	st	X+, r24
    407e:	9c 93       	st	X, r25
    4080:	fe 01       	movw	r30, r28
    4082:	e9 5b       	subi	r30, 0xB9	; 185
    4084:	ff 4f       	sbci	r31, 0xFF	; 255
    4086:	80 81       	ld	r24, Z
    4088:	91 81       	ldd	r25, Z+1	; 0x01
    408a:	01 97       	sbiw	r24, 0x01	; 1
    408c:	f1 f7       	brne	.-4      	; 0x408a <segDataDisplay+0x194>
    408e:	fe 01       	movw	r30, r28
    4090:	e9 5b       	subi	r30, 0xB9	; 185
    4092:	ff 4f       	sbci	r31, 0xFF	; 255
    4094:	91 83       	std	Z+1, r25	; 0x01
    4096:	80 83       	st	Z, r24

				  _delay_ms(DELAY_TO_PARALLEL_SEVSG);

				 DIO_enuSetPortValue(DIO_u8_PORTA,0b11111101);
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	6d ef       	ldi	r22, 0xFD	; 253
    409c:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>
			     SEGMENT_voidSetSegmentVal(&segments,seven_segmentArray[sec2]);
    40a0:	80 91 d6 00 	lds	r24, 0x00D6
    40a4:	88 2f       	mov	r24, r24
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	fc 01       	movw	r30, r24
    40aa:	e2 54       	subi	r30, 0x42	; 66
    40ac:	ff 4f       	sbci	r31, 0xFF	; 255
    40ae:	20 81       	ld	r18, Z
    40b0:	88 ec       	ldi	r24, 0xC8	; 200
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	62 2f       	mov	r22, r18
    40b6:	0e 94 d7 16 	call	0x2dae	; 0x2dae <SEGMENT_voidSetSegmentVal>
    40ba:	fe 01       	movw	r30, r28
    40bc:	ed 5b       	subi	r30, 0xBD	; 189
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	a0 e0       	ldi	r26, 0x00	; 0
    40c6:	bf e3       	ldi	r27, 0x3F	; 63
    40c8:	80 83       	st	Z, r24
    40ca:	91 83       	std	Z+1, r25	; 0x01
    40cc:	a2 83       	std	Z+2, r26	; 0x02
    40ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40d0:	8e 01       	movw	r16, r28
    40d2:	01 5c       	subi	r16, 0xC1	; 193
    40d4:	1f 4f       	sbci	r17, 0xFF	; 255
    40d6:	fe 01       	movw	r30, r28
    40d8:	ed 5b       	subi	r30, 0xBD	; 189
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	60 81       	ld	r22, Z
    40de:	71 81       	ldd	r23, Z+1	; 0x01
    40e0:	82 81       	ldd	r24, Z+2	; 0x02
    40e2:	93 81       	ldd	r25, Z+3	; 0x03
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	4a ef       	ldi	r20, 0xFA	; 250
    40ea:	54 e4       	ldi	r21, 0x44	; 68
    40ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	f8 01       	movw	r30, r16
    40f6:	80 83       	st	Z, r24
    40f8:	91 83       	std	Z+1, r25	; 0x01
    40fa:	a2 83       	std	Z+2, r26	; 0x02
    40fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40fe:	fe 01       	movw	r30, r28
    4100:	ff 96       	adiw	r30, 0x3f	; 63
    4102:	60 81       	ld	r22, Z
    4104:	71 81       	ldd	r23, Z+1	; 0x01
    4106:	82 81       	ldd	r24, Z+2	; 0x02
    4108:	93 81       	ldd	r25, Z+3	; 0x03
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e8       	ldi	r20, 0x80	; 128
    4110:	5f e3       	ldi	r21, 0x3F	; 63
    4112:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4116:	88 23       	and	r24, r24
    4118:	2c f4       	brge	.+10     	; 0x4124 <segDataDisplay+0x22e>
		__ticks = 1;
    411a:	81 e0       	ldi	r24, 0x01	; 1
    411c:	90 e0       	ldi	r25, 0x00	; 0
    411e:	9e af       	std	Y+62, r25	; 0x3e
    4120:	8d af       	std	Y+61, r24	; 0x3d
    4122:	46 c0       	rjmp	.+140    	; 0x41b0 <segDataDisplay+0x2ba>
	else if (__tmp > 65535)
    4124:	fe 01       	movw	r30, r28
    4126:	ff 96       	adiw	r30, 0x3f	; 63
    4128:	60 81       	ld	r22, Z
    412a:	71 81       	ldd	r23, Z+1	; 0x01
    412c:	82 81       	ldd	r24, Z+2	; 0x02
    412e:	93 81       	ldd	r25, Z+3	; 0x03
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	3f ef       	ldi	r19, 0xFF	; 255
    4134:	4f e7       	ldi	r20, 0x7F	; 127
    4136:	57 e4       	ldi	r21, 0x47	; 71
    4138:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    413c:	18 16       	cp	r1, r24
    413e:	64 f5       	brge	.+88     	; 0x4198 <segDataDisplay+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4140:	fe 01       	movw	r30, r28
    4142:	ed 5b       	subi	r30, 0xBD	; 189
    4144:	ff 4f       	sbci	r31, 0xFF	; 255
    4146:	60 81       	ld	r22, Z
    4148:	71 81       	ldd	r23, Z+1	; 0x01
    414a:	82 81       	ldd	r24, Z+2	; 0x02
    414c:	93 81       	ldd	r25, Z+3	; 0x03
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	40 e2       	ldi	r20, 0x20	; 32
    4154:	51 e4       	ldi	r21, 0x41	; 65
    4156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415a:	dc 01       	movw	r26, r24
    415c:	cb 01       	movw	r24, r22
    415e:	bc 01       	movw	r22, r24
    4160:	cd 01       	movw	r24, r26
    4162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	9e af       	std	Y+62, r25	; 0x3e
    416c:	8d af       	std	Y+61, r24	; 0x3d
    416e:	0f c0       	rjmp	.+30     	; 0x418e <segDataDisplay+0x298>
    4170:	88 ec       	ldi	r24, 0xC8	; 200
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	9c af       	std	Y+60, r25	; 0x3c
    4176:	8b af       	std	Y+59, r24	; 0x3b
    4178:	8b ad       	ldd	r24, Y+59	; 0x3b
    417a:	9c ad       	ldd	r25, Y+60	; 0x3c
    417c:	01 97       	sbiw	r24, 0x01	; 1
    417e:	f1 f7       	brne	.-4      	; 0x417c <segDataDisplay+0x286>
    4180:	9c af       	std	Y+60, r25	; 0x3c
    4182:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4184:	8d ad       	ldd	r24, Y+61	; 0x3d
    4186:	9e ad       	ldd	r25, Y+62	; 0x3e
    4188:	01 97       	sbiw	r24, 0x01	; 1
    418a:	9e af       	std	Y+62, r25	; 0x3e
    418c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    418e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4190:	9e ad       	ldd	r25, Y+62	; 0x3e
    4192:	00 97       	sbiw	r24, 0x00	; 0
    4194:	69 f7       	brne	.-38     	; 0x4170 <segDataDisplay+0x27a>
    4196:	16 c0       	rjmp	.+44     	; 0x41c4 <segDataDisplay+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4198:	fe 01       	movw	r30, r28
    419a:	ff 96       	adiw	r30, 0x3f	; 63
    419c:	60 81       	ld	r22, Z
    419e:	71 81       	ldd	r23, Z+1	; 0x01
    41a0:	82 81       	ldd	r24, Z+2	; 0x02
    41a2:	93 81       	ldd	r25, Z+3	; 0x03
    41a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a8:	dc 01       	movw	r26, r24
    41aa:	cb 01       	movw	r24, r22
    41ac:	9e af       	std	Y+62, r25	; 0x3e
    41ae:	8d af       	std	Y+61, r24	; 0x3d
    41b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    41b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    41b4:	9a af       	std	Y+58, r25	; 0x3a
    41b6:	89 af       	std	Y+57, r24	; 0x39
    41b8:	89 ad       	ldd	r24, Y+57	; 0x39
    41ba:	9a ad       	ldd	r25, Y+58	; 0x3a
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <segDataDisplay+0x2c6>
    41c0:	9a af       	std	Y+58, r25	; 0x3a
    41c2:	89 af       	std	Y+57, r24	; 0x39
			      _delay_ms(DELAY_TO_PARALLEL_SEVSG);

			     DIO_enuSetPortValue(DIO_u8_PORTA,0b11111011);
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	6b ef       	ldi	r22, 0xFB	; 251
    41c8:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>
			     SEGMENT_voidSetSegmentVal(&segments,seven_segmentArray[min1]);
    41cc:	80 91 d7 00 	lds	r24, 0x00D7
    41d0:	88 2f       	mov	r24, r24
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	fc 01       	movw	r30, r24
    41d6:	e2 54       	subi	r30, 0x42	; 66
    41d8:	ff 4f       	sbci	r31, 0xFF	; 255
    41da:	20 81       	ld	r18, Z
    41dc:	88 ec       	ldi	r24, 0xC8	; 200
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	62 2f       	mov	r22, r18
    41e2:	0e 94 d7 16 	call	0x2dae	; 0x2dae <SEGMENT_voidSetSegmentVal>
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	a0 e0       	ldi	r26, 0x00	; 0
    41ec:	bf e3       	ldi	r27, 0x3F	; 63
    41ee:	8d ab       	std	Y+53, r24	; 0x35
    41f0:	9e ab       	std	Y+54, r25	; 0x36
    41f2:	af ab       	std	Y+55, r26	; 0x37
    41f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f6:	6d a9       	ldd	r22, Y+53	; 0x35
    41f8:	7e a9       	ldd	r23, Y+54	; 0x36
    41fa:	8f a9       	ldd	r24, Y+55	; 0x37
    41fc:	98 ad       	ldd	r25, Y+56	; 0x38
    41fe:	20 e0       	ldi	r18, 0x00	; 0
    4200:	30 e0       	ldi	r19, 0x00	; 0
    4202:	4a ef       	ldi	r20, 0xFA	; 250
    4204:	54 e4       	ldi	r21, 0x44	; 68
    4206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	89 ab       	std	Y+49, r24	; 0x31
    4210:	9a ab       	std	Y+50, r25	; 0x32
    4212:	ab ab       	std	Y+51, r26	; 0x33
    4214:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4216:	69 a9       	ldd	r22, Y+49	; 0x31
    4218:	7a a9       	ldd	r23, Y+50	; 0x32
    421a:	8b a9       	ldd	r24, Y+51	; 0x33
    421c:	9c a9       	ldd	r25, Y+52	; 0x34
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
    4222:	40 e8       	ldi	r20, 0x80	; 128
    4224:	5f e3       	ldi	r21, 0x3F	; 63
    4226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    422a:	88 23       	and	r24, r24
    422c:	2c f4       	brge	.+10     	; 0x4238 <segDataDisplay+0x342>
		__ticks = 1;
    422e:	81 e0       	ldi	r24, 0x01	; 1
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	98 ab       	std	Y+48, r25	; 0x30
    4234:	8f a7       	std	Y+47, r24	; 0x2f
    4236:	3f c0       	rjmp	.+126    	; 0x42b6 <segDataDisplay+0x3c0>
	else if (__tmp > 65535)
    4238:	69 a9       	ldd	r22, Y+49	; 0x31
    423a:	7a a9       	ldd	r23, Y+50	; 0x32
    423c:	8b a9       	ldd	r24, Y+51	; 0x33
    423e:	9c a9       	ldd	r25, Y+52	; 0x34
    4240:	20 e0       	ldi	r18, 0x00	; 0
    4242:	3f ef       	ldi	r19, 0xFF	; 255
    4244:	4f e7       	ldi	r20, 0x7F	; 127
    4246:	57 e4       	ldi	r21, 0x47	; 71
    4248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    424c:	18 16       	cp	r1, r24
    424e:	4c f5       	brge	.+82     	; 0x42a2 <segDataDisplay+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4250:	6d a9       	ldd	r22, Y+53	; 0x35
    4252:	7e a9       	ldd	r23, Y+54	; 0x36
    4254:	8f a9       	ldd	r24, Y+55	; 0x37
    4256:	98 ad       	ldd	r25, Y+56	; 0x38
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	40 e2       	ldi	r20, 0x20	; 32
    425e:	51 e4       	ldi	r21, 0x41	; 65
    4260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4264:	dc 01       	movw	r26, r24
    4266:	cb 01       	movw	r24, r22
    4268:	bc 01       	movw	r22, r24
    426a:	cd 01       	movw	r24, r26
    426c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	98 ab       	std	Y+48, r25	; 0x30
    4276:	8f a7       	std	Y+47, r24	; 0x2f
    4278:	0f c0       	rjmp	.+30     	; 0x4298 <segDataDisplay+0x3a2>
    427a:	88 ec       	ldi	r24, 0xC8	; 200
    427c:	90 e0       	ldi	r25, 0x00	; 0
    427e:	9e a7       	std	Y+46, r25	; 0x2e
    4280:	8d a7       	std	Y+45, r24	; 0x2d
    4282:	8d a5       	ldd	r24, Y+45	; 0x2d
    4284:	9e a5       	ldd	r25, Y+46	; 0x2e
    4286:	01 97       	sbiw	r24, 0x01	; 1
    4288:	f1 f7       	brne	.-4      	; 0x4286 <segDataDisplay+0x390>
    428a:	9e a7       	std	Y+46, r25	; 0x2e
    428c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4290:	98 a9       	ldd	r25, Y+48	; 0x30
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	98 ab       	std	Y+48, r25	; 0x30
    4296:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4298:	8f a5       	ldd	r24, Y+47	; 0x2f
    429a:	98 a9       	ldd	r25, Y+48	; 0x30
    429c:	00 97       	sbiw	r24, 0x00	; 0
    429e:	69 f7       	brne	.-38     	; 0x427a <segDataDisplay+0x384>
    42a0:	14 c0       	rjmp	.+40     	; 0x42ca <segDataDisplay+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a2:	69 a9       	ldd	r22, Y+49	; 0x31
    42a4:	7a a9       	ldd	r23, Y+50	; 0x32
    42a6:	8b a9       	ldd	r24, Y+51	; 0x33
    42a8:	9c a9       	ldd	r25, Y+52	; 0x34
    42aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	98 ab       	std	Y+48, r25	; 0x30
    42b4:	8f a7       	std	Y+47, r24	; 0x2f
    42b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    42b8:	98 a9       	ldd	r25, Y+48	; 0x30
    42ba:	9c a7       	std	Y+44, r25	; 0x2c
    42bc:	8b a7       	std	Y+43, r24	; 0x2b
    42be:	8b a5       	ldd	r24, Y+43	; 0x2b
    42c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    42c2:	01 97       	sbiw	r24, 0x01	; 1
    42c4:	f1 f7       	brne	.-4      	; 0x42c2 <segDataDisplay+0x3cc>
    42c6:	9c a7       	std	Y+44, r25	; 0x2c
    42c8:	8b a7       	std	Y+43, r24	; 0x2b
			     	 _delay_ms(DELAY_TO_PARALLEL_SEVSG);


			     DIO_enuSetPortValue(DIO_u8_PORTA,0b11110111);
    42ca:	80 e0       	ldi	r24, 0x00	; 0
    42cc:	67 ef       	ldi	r22, 0xF7	; 247
    42ce:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>
			     SEGMENT_voidSetSegmentVal(&segments,seven_segmentArray[min2]);
    42d2:	80 91 d8 00 	lds	r24, 0x00D8
    42d6:	88 2f       	mov	r24, r24
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	fc 01       	movw	r30, r24
    42dc:	e2 54       	subi	r30, 0x42	; 66
    42de:	ff 4f       	sbci	r31, 0xFF	; 255
    42e0:	20 81       	ld	r18, Z
    42e2:	88 ec       	ldi	r24, 0xC8	; 200
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	62 2f       	mov	r22, r18
    42e8:	0e 94 d7 16 	call	0x2dae	; 0x2dae <SEGMENT_voidSetSegmentVal>
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	a0 e0       	ldi	r26, 0x00	; 0
    42f2:	bf e3       	ldi	r27, 0x3F	; 63
    42f4:	8f a3       	std	Y+39, r24	; 0x27
    42f6:	98 a7       	std	Y+40, r25	; 0x28
    42f8:	a9 a7       	std	Y+41, r26	; 0x29
    42fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42fc:	6f a1       	ldd	r22, Y+39	; 0x27
    42fe:	78 a5       	ldd	r23, Y+40	; 0x28
    4300:	89 a5       	ldd	r24, Y+41	; 0x29
    4302:	9a a5       	ldd	r25, Y+42	; 0x2a
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	4a ef       	ldi	r20, 0xFA	; 250
    430a:	54 e4       	ldi	r21, 0x44	; 68
    430c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	8b a3       	std	Y+35, r24	; 0x23
    4316:	9c a3       	std	Y+36, r25	; 0x24
    4318:	ad a3       	std	Y+37, r26	; 0x25
    431a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    431c:	6b a1       	ldd	r22, Y+35	; 0x23
    431e:	7c a1       	ldd	r23, Y+36	; 0x24
    4320:	8d a1       	ldd	r24, Y+37	; 0x25
    4322:	9e a1       	ldd	r25, Y+38	; 0x26
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	40 e8       	ldi	r20, 0x80	; 128
    432a:	5f e3       	ldi	r21, 0x3F	; 63
    432c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4330:	88 23       	and	r24, r24
    4332:	2c f4       	brge	.+10     	; 0x433e <segDataDisplay+0x448>
		__ticks = 1;
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	9a a3       	std	Y+34, r25	; 0x22
    433a:	89 a3       	std	Y+33, r24	; 0x21
    433c:	3f c0       	rjmp	.+126    	; 0x43bc <segDataDisplay+0x4c6>
	else if (__tmp > 65535)
    433e:	6b a1       	ldd	r22, Y+35	; 0x23
    4340:	7c a1       	ldd	r23, Y+36	; 0x24
    4342:	8d a1       	ldd	r24, Y+37	; 0x25
    4344:	9e a1       	ldd	r25, Y+38	; 0x26
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	3f ef       	ldi	r19, 0xFF	; 255
    434a:	4f e7       	ldi	r20, 0x7F	; 127
    434c:	57 e4       	ldi	r21, 0x47	; 71
    434e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4352:	18 16       	cp	r1, r24
    4354:	4c f5       	brge	.+82     	; 0x43a8 <segDataDisplay+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4356:	6f a1       	ldd	r22, Y+39	; 0x27
    4358:	78 a5       	ldd	r23, Y+40	; 0x28
    435a:	89 a5       	ldd	r24, Y+41	; 0x29
    435c:	9a a5       	ldd	r25, Y+42	; 0x2a
    435e:	20 e0       	ldi	r18, 0x00	; 0
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	40 e2       	ldi	r20, 0x20	; 32
    4364:	51 e4       	ldi	r21, 0x41	; 65
    4366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	bc 01       	movw	r22, r24
    4370:	cd 01       	movw	r24, r26
    4372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	9a a3       	std	Y+34, r25	; 0x22
    437c:	89 a3       	std	Y+33, r24	; 0x21
    437e:	0f c0       	rjmp	.+30     	; 0x439e <segDataDisplay+0x4a8>
    4380:	88 ec       	ldi	r24, 0xC8	; 200
    4382:	90 e0       	ldi	r25, 0x00	; 0
    4384:	98 a3       	std	Y+32, r25	; 0x20
    4386:	8f 8f       	std	Y+31, r24	; 0x1f
    4388:	8f 8d       	ldd	r24, Y+31	; 0x1f
    438a:	98 a1       	ldd	r25, Y+32	; 0x20
    438c:	01 97       	sbiw	r24, 0x01	; 1
    438e:	f1 f7       	brne	.-4      	; 0x438c <segDataDisplay+0x496>
    4390:	98 a3       	std	Y+32, r25	; 0x20
    4392:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4394:	89 a1       	ldd	r24, Y+33	; 0x21
    4396:	9a a1       	ldd	r25, Y+34	; 0x22
    4398:	01 97       	sbiw	r24, 0x01	; 1
    439a:	9a a3       	std	Y+34, r25	; 0x22
    439c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    439e:	89 a1       	ldd	r24, Y+33	; 0x21
    43a0:	9a a1       	ldd	r25, Y+34	; 0x22
    43a2:	00 97       	sbiw	r24, 0x00	; 0
    43a4:	69 f7       	brne	.-38     	; 0x4380 <segDataDisplay+0x48a>
    43a6:	14 c0       	rjmp	.+40     	; 0x43d0 <segDataDisplay+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43a8:	6b a1       	ldd	r22, Y+35	; 0x23
    43aa:	7c a1       	ldd	r23, Y+36	; 0x24
    43ac:	8d a1       	ldd	r24, Y+37	; 0x25
    43ae:	9e a1       	ldd	r25, Y+38	; 0x26
    43b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b4:	dc 01       	movw	r26, r24
    43b6:	cb 01       	movw	r24, r22
    43b8:	9a a3       	std	Y+34, r25	; 0x22
    43ba:	89 a3       	std	Y+33, r24	; 0x21
    43bc:	89 a1       	ldd	r24, Y+33	; 0x21
    43be:	9a a1       	ldd	r25, Y+34	; 0x22
    43c0:	9e 8f       	std	Y+30, r25	; 0x1e
    43c2:	8d 8f       	std	Y+29, r24	; 0x1d
    43c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	f1 f7       	brne	.-4      	; 0x43c8 <segDataDisplay+0x4d2>
    43cc:	9e 8f       	std	Y+30, r25	; 0x1e
    43ce:	8d 8f       	std	Y+29, r24	; 0x1d
			         _delay_ms(DELAY_TO_PARALLEL_SEVSG);


			         DIO_enuSetPortValue(DIO_u8_PORTA,0b11101111);
    43d0:	80 e0       	ldi	r24, 0x00	; 0
    43d2:	6f ee       	ldi	r22, 0xEF	; 239
    43d4:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>
			       SEGMENT_voidSetSegmentVal(&segments,seven_segmentArray[hrs1]);
    43d8:	80 91 d9 00 	lds	r24, 0x00D9
    43dc:	88 2f       	mov	r24, r24
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	fc 01       	movw	r30, r24
    43e2:	e2 54       	subi	r30, 0x42	; 66
    43e4:	ff 4f       	sbci	r31, 0xFF	; 255
    43e6:	20 81       	ld	r18, Z
    43e8:	88 ec       	ldi	r24, 0xC8	; 200
    43ea:	90 e0       	ldi	r25, 0x00	; 0
    43ec:	62 2f       	mov	r22, r18
    43ee:	0e 94 d7 16 	call	0x2dae	; 0x2dae <SEGMENT_voidSetSegmentVal>
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	a0 e0       	ldi	r26, 0x00	; 0
    43f8:	bf e3       	ldi	r27, 0x3F	; 63
    43fa:	89 8f       	std	Y+25, r24	; 0x19
    43fc:	9a 8f       	std	Y+26, r25	; 0x1a
    43fe:	ab 8f       	std	Y+27, r26	; 0x1b
    4400:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4402:	69 8d       	ldd	r22, Y+25	; 0x19
    4404:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4406:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4408:	9c 8d       	ldd	r25, Y+28	; 0x1c
    440a:	20 e0       	ldi	r18, 0x00	; 0
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	4a ef       	ldi	r20, 0xFA	; 250
    4410:	54 e4       	ldi	r21, 0x44	; 68
    4412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	8d 8b       	std	Y+21, r24	; 0x15
    441c:	9e 8b       	std	Y+22, r25	; 0x16
    441e:	af 8b       	std	Y+23, r26	; 0x17
    4420:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4422:	6d 89       	ldd	r22, Y+21	; 0x15
    4424:	7e 89       	ldd	r23, Y+22	; 0x16
    4426:	8f 89       	ldd	r24, Y+23	; 0x17
    4428:	98 8d       	ldd	r25, Y+24	; 0x18
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	40 e8       	ldi	r20, 0x80	; 128
    4430:	5f e3       	ldi	r21, 0x3F	; 63
    4432:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4436:	88 23       	and	r24, r24
    4438:	2c f4       	brge	.+10     	; 0x4444 <segDataDisplay+0x54e>
		__ticks = 1;
    443a:	81 e0       	ldi	r24, 0x01	; 1
    443c:	90 e0       	ldi	r25, 0x00	; 0
    443e:	9c 8b       	std	Y+20, r25	; 0x14
    4440:	8b 8b       	std	Y+19, r24	; 0x13
    4442:	3f c0       	rjmp	.+126    	; 0x44c2 <segDataDisplay+0x5cc>
	else if (__tmp > 65535)
    4444:	6d 89       	ldd	r22, Y+21	; 0x15
    4446:	7e 89       	ldd	r23, Y+22	; 0x16
    4448:	8f 89       	ldd	r24, Y+23	; 0x17
    444a:	98 8d       	ldd	r25, Y+24	; 0x18
    444c:	20 e0       	ldi	r18, 0x00	; 0
    444e:	3f ef       	ldi	r19, 0xFF	; 255
    4450:	4f e7       	ldi	r20, 0x7F	; 127
    4452:	57 e4       	ldi	r21, 0x47	; 71
    4454:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4458:	18 16       	cp	r1, r24
    445a:	4c f5       	brge	.+82     	; 0x44ae <segDataDisplay+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    445c:	69 8d       	ldd	r22, Y+25	; 0x19
    445e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4460:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4462:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	40 e2       	ldi	r20, 0x20	; 32
    446a:	51 e4       	ldi	r21, 0x41	; 65
    446c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	bc 01       	movw	r22, r24
    4476:	cd 01       	movw	r24, r26
    4478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    447c:	dc 01       	movw	r26, r24
    447e:	cb 01       	movw	r24, r22
    4480:	9c 8b       	std	Y+20, r25	; 0x14
    4482:	8b 8b       	std	Y+19, r24	; 0x13
    4484:	0f c0       	rjmp	.+30     	; 0x44a4 <segDataDisplay+0x5ae>
    4486:	88 ec       	ldi	r24, 0xC8	; 200
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	9a 8b       	std	Y+18, r25	; 0x12
    448c:	89 8b       	std	Y+17, r24	; 0x11
    448e:	89 89       	ldd	r24, Y+17	; 0x11
    4490:	9a 89       	ldd	r25, Y+18	; 0x12
    4492:	01 97       	sbiw	r24, 0x01	; 1
    4494:	f1 f7       	brne	.-4      	; 0x4492 <segDataDisplay+0x59c>
    4496:	9a 8b       	std	Y+18, r25	; 0x12
    4498:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    449a:	8b 89       	ldd	r24, Y+19	; 0x13
    449c:	9c 89       	ldd	r25, Y+20	; 0x14
    449e:	01 97       	sbiw	r24, 0x01	; 1
    44a0:	9c 8b       	std	Y+20, r25	; 0x14
    44a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a4:	8b 89       	ldd	r24, Y+19	; 0x13
    44a6:	9c 89       	ldd	r25, Y+20	; 0x14
    44a8:	00 97       	sbiw	r24, 0x00	; 0
    44aa:	69 f7       	brne	.-38     	; 0x4486 <segDataDisplay+0x590>
    44ac:	14 c0       	rjmp	.+40     	; 0x44d6 <segDataDisplay+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ae:	6d 89       	ldd	r22, Y+21	; 0x15
    44b0:	7e 89       	ldd	r23, Y+22	; 0x16
    44b2:	8f 89       	ldd	r24, Y+23	; 0x17
    44b4:	98 8d       	ldd	r25, Y+24	; 0x18
    44b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ba:	dc 01       	movw	r26, r24
    44bc:	cb 01       	movw	r24, r22
    44be:	9c 8b       	std	Y+20, r25	; 0x14
    44c0:	8b 8b       	std	Y+19, r24	; 0x13
    44c2:	8b 89       	ldd	r24, Y+19	; 0x13
    44c4:	9c 89       	ldd	r25, Y+20	; 0x14
    44c6:	98 8b       	std	Y+16, r25	; 0x10
    44c8:	8f 87       	std	Y+15, r24	; 0x0f
    44ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    44cc:	98 89       	ldd	r25, Y+16	; 0x10
    44ce:	01 97       	sbiw	r24, 0x01	; 1
    44d0:	f1 f7       	brne	.-4      	; 0x44ce <segDataDisplay+0x5d8>
    44d2:	98 8b       	std	Y+16, r25	; 0x10
    44d4:	8f 87       	std	Y+15, r24	; 0x0f
			      	  _delay_ms(DELAY_TO_PARALLEL_SEVSG);


			      	 DIO_enuSetPortValue(DIO_u8_PORTA,0b11011111);
    44d6:	80 e0       	ldi	r24, 0x00	; 0
    44d8:	6f ed       	ldi	r22, 0xDF	; 223
    44da:	0e 94 56 14 	call	0x28ac	; 0x28ac <DIO_enuSetPortValue>
			       SEGMENT_voidSetSegmentVal(&segments,seven_segmentArray[hrs2]);
    44de:	80 91 da 00 	lds	r24, 0x00DA
    44e2:	88 2f       	mov	r24, r24
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	fc 01       	movw	r30, r24
    44e8:	e2 54       	subi	r30, 0x42	; 66
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	20 81       	ld	r18, Z
    44ee:	88 ec       	ldi	r24, 0xC8	; 200
    44f0:	90 e0       	ldi	r25, 0x00	; 0
    44f2:	62 2f       	mov	r22, r18
    44f4:	0e 94 d7 16 	call	0x2dae	; 0x2dae <SEGMENT_voidSetSegmentVal>
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	a0 e0       	ldi	r26, 0x00	; 0
    44fe:	bf e3       	ldi	r27, 0x3F	; 63
    4500:	8b 87       	std	Y+11, r24	; 0x0b
    4502:	9c 87       	std	Y+12, r25	; 0x0c
    4504:	ad 87       	std	Y+13, r26	; 0x0d
    4506:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4508:	6b 85       	ldd	r22, Y+11	; 0x0b
    450a:	7c 85       	ldd	r23, Y+12	; 0x0c
    450c:	8d 85       	ldd	r24, Y+13	; 0x0d
    450e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	4a ef       	ldi	r20, 0xFA	; 250
    4516:	54 e4       	ldi	r21, 0x44	; 68
    4518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	8f 83       	std	Y+7, r24	; 0x07
    4522:	98 87       	std	Y+8, r25	; 0x08
    4524:	a9 87       	std	Y+9, r26	; 0x09
    4526:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4528:	6f 81       	ldd	r22, Y+7	; 0x07
    452a:	78 85       	ldd	r23, Y+8	; 0x08
    452c:	89 85       	ldd	r24, Y+9	; 0x09
    452e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	40 e8       	ldi	r20, 0x80	; 128
    4536:	5f e3       	ldi	r21, 0x3F	; 63
    4538:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    453c:	88 23       	and	r24, r24
    453e:	2c f4       	brge	.+10     	; 0x454a <segDataDisplay+0x654>
		__ticks = 1;
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	9e 83       	std	Y+6, r25	; 0x06
    4546:	8d 83       	std	Y+5, r24	; 0x05
    4548:	3f c0       	rjmp	.+126    	; 0x45c8 <segDataDisplay+0x6d2>
	else if (__tmp > 65535)
    454a:	6f 81       	ldd	r22, Y+7	; 0x07
    454c:	78 85       	ldd	r23, Y+8	; 0x08
    454e:	89 85       	ldd	r24, Y+9	; 0x09
    4550:	9a 85       	ldd	r25, Y+10	; 0x0a
    4552:	20 e0       	ldi	r18, 0x00	; 0
    4554:	3f ef       	ldi	r19, 0xFF	; 255
    4556:	4f e7       	ldi	r20, 0x7F	; 127
    4558:	57 e4       	ldi	r21, 0x47	; 71
    455a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    455e:	18 16       	cp	r1, r24
    4560:	4c f5       	brge	.+82     	; 0x45b4 <segDataDisplay+0x6be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4562:	6b 85       	ldd	r22, Y+11	; 0x0b
    4564:	7c 85       	ldd	r23, Y+12	; 0x0c
    4566:	8d 85       	ldd	r24, Y+13	; 0x0d
    4568:	9e 85       	ldd	r25, Y+14	; 0x0e
    456a:	20 e0       	ldi	r18, 0x00	; 0
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	40 e2       	ldi	r20, 0x20	; 32
    4570:	51 e4       	ldi	r21, 0x41	; 65
    4572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	bc 01       	movw	r22, r24
    457c:	cd 01       	movw	r24, r26
    457e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4582:	dc 01       	movw	r26, r24
    4584:	cb 01       	movw	r24, r22
    4586:	9e 83       	std	Y+6, r25	; 0x06
    4588:	8d 83       	std	Y+5, r24	; 0x05
    458a:	0f c0       	rjmp	.+30     	; 0x45aa <segDataDisplay+0x6b4>
    458c:	88 ec       	ldi	r24, 0xC8	; 200
    458e:	90 e0       	ldi	r25, 0x00	; 0
    4590:	9c 83       	std	Y+4, r25	; 0x04
    4592:	8b 83       	std	Y+3, r24	; 0x03
    4594:	8b 81       	ldd	r24, Y+3	; 0x03
    4596:	9c 81       	ldd	r25, Y+4	; 0x04
    4598:	01 97       	sbiw	r24, 0x01	; 1
    459a:	f1 f7       	brne	.-4      	; 0x4598 <segDataDisplay+0x6a2>
    459c:	9c 83       	std	Y+4, r25	; 0x04
    459e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45a0:	8d 81       	ldd	r24, Y+5	; 0x05
    45a2:	9e 81       	ldd	r25, Y+6	; 0x06
    45a4:	01 97       	sbiw	r24, 0x01	; 1
    45a6:	9e 83       	std	Y+6, r25	; 0x06
    45a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45aa:	8d 81       	ldd	r24, Y+5	; 0x05
    45ac:	9e 81       	ldd	r25, Y+6	; 0x06
    45ae:	00 97       	sbiw	r24, 0x00	; 0
    45b0:	69 f7       	brne	.-38     	; 0x458c <segDataDisplay+0x696>
    45b2:	14 c0       	rjmp	.+40     	; 0x45dc <segDataDisplay+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b4:	6f 81       	ldd	r22, Y+7	; 0x07
    45b6:	78 85       	ldd	r23, Y+8	; 0x08
    45b8:	89 85       	ldd	r24, Y+9	; 0x09
    45ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    45bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	9e 83       	std	Y+6, r25	; 0x06
    45c6:	8d 83       	std	Y+5, r24	; 0x05
    45c8:	8d 81       	ldd	r24, Y+5	; 0x05
    45ca:	9e 81       	ldd	r25, Y+6	; 0x06
    45cc:	9a 83       	std	Y+2, r25	; 0x02
    45ce:	89 83       	std	Y+1, r24	; 0x01
    45d0:	89 81       	ldd	r24, Y+1	; 0x01
    45d2:	9a 81       	ldd	r25, Y+2	; 0x02
    45d4:	01 97       	sbiw	r24, 0x01	; 1
    45d6:	f1 f7       	brne	.-4      	; 0x45d4 <segDataDisplay+0x6de>
    45d8:	9a 83       	std	Y+2, r25	; 0x02
    45da:	89 83       	std	Y+1, r24	; 0x01
			          _delay_ms(DELAY_TO_PARALLEL_SEVSG);


			}
    45dc:	cc 5a       	subi	r28, 0xAC	; 172
    45de:	df 4f       	sbci	r29, 0xFF	; 255
    45e0:	0f b6       	in	r0, 0x3f	; 63
    45e2:	f8 94       	cli
    45e4:	de bf       	out	0x3e, r29	; 62
    45e6:	0f be       	out	0x3f, r0	; 63
    45e8:	cd bf       	out	0x3d, r28	; 61
    45ea:	cf 91       	pop	r28
    45ec:	df 91       	pop	r29
    45ee:	1f 91       	pop	r17
    45f0:	0f 91       	pop	r16
    45f2:	08 95       	ret

000045f4 <segClearAllDigits>:

void segClearAllDigits(void)
	{
    45f4:	df 93       	push	r29
    45f6:	cf 93       	push	r28
    45f8:	cd b7       	in	r28, 0x3d	; 61
    45fa:	de b7       	in	r29, 0x3e	; 62
		sec1=0;
    45fc:	10 92 d5 00 	sts	0x00D5, r1
		sec2=0;
    4600:	10 92 d6 00 	sts	0x00D6, r1
		min1=0;
    4604:	10 92 d7 00 	sts	0x00D7, r1
		min2=0;
    4608:	10 92 d8 00 	sts	0x00D8, r1
		hrs1=0;
    460c:	10 92 d9 00 	sts	0x00D9, r1
		hrs2=0;
    4610:	10 92 da 00 	sts	0x00DA, r1


	}
    4614:	cf 91       	pop	r28
    4616:	df 91       	pop	r29
    4618:	08 95       	ret

0000461a <__udivmodsi4>:
    461a:	a1 e2       	ldi	r26, 0x21	; 33
    461c:	1a 2e       	mov	r1, r26
    461e:	aa 1b       	sub	r26, r26
    4620:	bb 1b       	sub	r27, r27
    4622:	fd 01       	movw	r30, r26
    4624:	0d c0       	rjmp	.+26     	; 0x4640 <__udivmodsi4_ep>

00004626 <__udivmodsi4_loop>:
    4626:	aa 1f       	adc	r26, r26
    4628:	bb 1f       	adc	r27, r27
    462a:	ee 1f       	adc	r30, r30
    462c:	ff 1f       	adc	r31, r31
    462e:	a2 17       	cp	r26, r18
    4630:	b3 07       	cpc	r27, r19
    4632:	e4 07       	cpc	r30, r20
    4634:	f5 07       	cpc	r31, r21
    4636:	20 f0       	brcs	.+8      	; 0x4640 <__udivmodsi4_ep>
    4638:	a2 1b       	sub	r26, r18
    463a:	b3 0b       	sbc	r27, r19
    463c:	e4 0b       	sbc	r30, r20
    463e:	f5 0b       	sbc	r31, r21

00004640 <__udivmodsi4_ep>:
    4640:	66 1f       	adc	r22, r22
    4642:	77 1f       	adc	r23, r23
    4644:	88 1f       	adc	r24, r24
    4646:	99 1f       	adc	r25, r25
    4648:	1a 94       	dec	r1
    464a:	69 f7       	brne	.-38     	; 0x4626 <__udivmodsi4_loop>
    464c:	60 95       	com	r22
    464e:	70 95       	com	r23
    4650:	80 95       	com	r24
    4652:	90 95       	com	r25
    4654:	9b 01       	movw	r18, r22
    4656:	ac 01       	movw	r20, r24
    4658:	bd 01       	movw	r22, r26
    465a:	cf 01       	movw	r24, r30
    465c:	08 95       	ret

0000465e <__prologue_saves__>:
    465e:	2f 92       	push	r2
    4660:	3f 92       	push	r3
    4662:	4f 92       	push	r4
    4664:	5f 92       	push	r5
    4666:	6f 92       	push	r6
    4668:	7f 92       	push	r7
    466a:	8f 92       	push	r8
    466c:	9f 92       	push	r9
    466e:	af 92       	push	r10
    4670:	bf 92       	push	r11
    4672:	cf 92       	push	r12
    4674:	df 92       	push	r13
    4676:	ef 92       	push	r14
    4678:	ff 92       	push	r15
    467a:	0f 93       	push	r16
    467c:	1f 93       	push	r17
    467e:	cf 93       	push	r28
    4680:	df 93       	push	r29
    4682:	cd b7       	in	r28, 0x3d	; 61
    4684:	de b7       	in	r29, 0x3e	; 62
    4686:	ca 1b       	sub	r28, r26
    4688:	db 0b       	sbc	r29, r27
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	f8 94       	cli
    468e:	de bf       	out	0x3e, r29	; 62
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	cd bf       	out	0x3d, r28	; 61
    4694:	09 94       	ijmp

00004696 <__epilogue_restores__>:
    4696:	2a 88       	ldd	r2, Y+18	; 0x12
    4698:	39 88       	ldd	r3, Y+17	; 0x11
    469a:	48 88       	ldd	r4, Y+16	; 0x10
    469c:	5f 84       	ldd	r5, Y+15	; 0x0f
    469e:	6e 84       	ldd	r6, Y+14	; 0x0e
    46a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    46a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    46a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    46a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    46a8:	b9 84       	ldd	r11, Y+9	; 0x09
    46aa:	c8 84       	ldd	r12, Y+8	; 0x08
    46ac:	df 80       	ldd	r13, Y+7	; 0x07
    46ae:	ee 80       	ldd	r14, Y+6	; 0x06
    46b0:	fd 80       	ldd	r15, Y+5	; 0x05
    46b2:	0c 81       	ldd	r16, Y+4	; 0x04
    46b4:	1b 81       	ldd	r17, Y+3	; 0x03
    46b6:	aa 81       	ldd	r26, Y+2	; 0x02
    46b8:	b9 81       	ldd	r27, Y+1	; 0x01
    46ba:	ce 0f       	add	r28, r30
    46bc:	d1 1d       	adc	r29, r1
    46be:	0f b6       	in	r0, 0x3f	; 63
    46c0:	f8 94       	cli
    46c2:	de bf       	out	0x3e, r29	; 62
    46c4:	0f be       	out	0x3f, r0	; 63
    46c6:	cd bf       	out	0x3d, r28	; 61
    46c8:	ed 01       	movw	r28, r26
    46ca:	08 95       	ret

000046cc <_exit>:
    46cc:	f8 94       	cli

000046ce <__stop_program>:
    46ce:	ff cf       	rjmp	.-2      	; 0x46ce <__stop_program>
